version: '3.8'

services:
  # 主应用服务
  app:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: football-prediction-app
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENV=production
      - DATABASE_URL=postgresql://football_user:${POSTGRES_PASSWORD}@postgres:5432/football_prediction
      - REDIS_URL=redis://redis:6379/0
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=football-prediction
      - INFLUXDB_BUCKET=quality-metrics
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    networks:
      - football-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 实时质量监控WebSocket服务
  quality-monitor:
    build:
      context: .
      dockerfile: Dockerfile.quality-monitor
    container_name: football-quality-monitor
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - ENV=production
      - REDIS_URL=redis://redis:6379/1
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_ORG=football-prediction
      - INFLUXDB_BUCKET=quality-metrics
    depends_on:
      redis:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    networks:
      - football-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React前端监控面板
  quality-dashboard:
    build:
      context: ./frontend/quality-dashboard
      dockerfile: Dockerfile
    container_name: football-quality-dashboard
    restart: unless-stopped
    ports:
      - "3000:80"
    environment:
      - REACT_APP_WS_URL=ws://localhost:8001/ws/quality
      - REACT_APP_API_URL=http://localhost:8000
    depends_on:
      - quality-monitor
    networks:
      - football-network

  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: football-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=football_prediction
      - POSTGRES_USER=football_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - football-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U football_user -d football_prediction"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: football-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - football-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # InfluxDB时序数据库
  influxdb:
    image: influxdb:2.7-alpine
    container_name: football-influxdb
    restart: unless-stopped
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=football-prediction
      - DOCKER_INFLUXDB_INIT_BUCKET=quality-metrics
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN}
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    ports:
      - "8086:8086"
    networks:
      - football-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: football-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
      - quality-dashboard
    networks:
      - football-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: football-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - football-network

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    container_name: football-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
      - influxdb
    networks:
      - football-network

  # Celery任务队列工作进程
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: football-celery-worker
    restart: unless-stopped
    command: celery -A src.tasks.celery_app worker --loglevel=info --concurrency=4
    environment:
      - ENV=production
      - DATABASE_URL=postgresql://football_user:${POSTGRES_PASSWORD}@postgres:5432/football_prediction
      - REDIS_URL=redis://redis:6379/2
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
    networks:
      - football-network

  # Celery任务调度器
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: football-celery-beat
    restart: unless-stopped
    command: celery -A src.tasks.celery_app beat --loglevel=info
    environment:
      - ENV=production
      - DATABASE_URL=postgresql://football_user:${POSTGRES_PASSWORD}@postgres:5432/football_prediction
      - REDIS_URL=redis://redis:6379/2
    volumes:
      - ./logs:/app/logs
      - ./celerybeat-schedule:/app/celerybeat-schedule
    depends_on:
      - postgres
      - redis
    networks:
      - football-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  influxdb_data:
    driver: local
  influxdb_config:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  football-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16