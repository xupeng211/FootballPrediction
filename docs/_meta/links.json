{
  "edges": [
    {
      "from": "docs/SECURITY.md",
      "to": "docs/DATA_DESIGN.md"
    },
    {
      "from": "docs/SECURITY.md",
      "to": "docs/API_REFERENCE.md"
    },
    {
      "from": "docs/SECURITY.md",
      "to": "docs/DEPLOYMENT.md"
    },
    {
      "from": "docs/SECURITY.md",
      "to": "docs/OPERATIONS.md"
    },
    {
      "from": "docs/DEPLOYMENT_GUIDE.md",
      "to": "docs/docs/DATABASE_SCHEMA.md"
    },
    {
      "from": "docs/DEPLOYMENT_GUIDE.md",
      "to": "docs/docs/DEVELOPMENT_GUIDE.md"
    },
    {
      "from": "docs/DEPLOYMENT_GUIDE.md",
      "to": "docs/docs/MONITORING_GUIDE.md"
    },
    {
      "from": "docs/TESTING_STRATEGY.md",
      "to": "docs/testing/examples.md"
    },
    {
      "from": "docs/TESTING_STRATEGY.md",
      "to": "docs/testing/ci_config.md"
    },
    {
      "from": "docs/TESTING_STRATEGY.md",
      "to": "docs/testing/performance_tests.md"
    },
    {
      "from": "docs/TESTING_STRATEGY.md",
      "to": "docs/testing/fixtures_factories.md"
    },
    {
      "from": "docs/CI_REPORT.md",
      "to": "docs/assets/coverage_trend.png"
    },
    {
      "from": "docs/CI_GUARDIAN_GUIDE.md",
      "to": "docs/ci_defense_mechanisms.md"
    },
    {
      "from": "docs/CI_GUARDIAN_GUIDE.md",
      "to": "rules.md"
    },
    {
      "from": "docs/CI_GUARDIAN_GUIDE.md",
      "to": "Cursor_ClosedLoop_Prompt.md"
    },
    {
      "from": "docs/runbooks/README.md",
      "to": "docs/runbooks/DISASTER_RECOVERY_RUNBOOK.md"
    },
    {
      "from": "docs/runbooks/README.md",
      "to": "docs/runbooks/DATA_MIGRATION_RUNBOOK.md"
    },
    {
      "from": "docs/testing/README.md",
      "to": "docs/TESTING_STRATEGY.md"
    },
    {
      "from": "docs/testing/README.md",
      "to": "docs/testing/examples.md"
    },
    {
      "from": "docs/testing/README.md",
      "to": "docs/testing/ci_config.md"
    },
    {
      "from": "docs/testing/README.md",
      "to": "docs/testing/performance_tests.md"
    },
    {
      "from": "docs/testing/README.md",
      "to": "docs/testing/fixtures_factories.md"
    },
    {
      "from": "docs/testing/performance_tests.md",
      "to": "docs/testing/performance_trend.png"
    },
    {
      "from": "docs/archive/README_ASYNC_DB_TESTING.md",
      "to": "docs/archive/docs/async_database_testing_guide.md"
    },
    {
      "from": "docs/archive/README_ASYNC_DB_TESTING.md",
      "to": "docs/archive/templates/async_database_test_template.py"
    },
    {
      "from": "docs/archive/README_ASYNC_DB_TESTING.md",
      "to": "docs/archive/examples/refactored_test_index_existence.py"
    },
    {
      "from": "docs/archive/README_ASYNC_DB_TESTING.md",
      "to": "docs/archive/docs/async_database_testing_guide.md"
    },
    {
      "from": "docs/archive/README_ASYNC_DB_TESTING.md",
      "to": "docs/archive/examples/refactored_test_index_existence.py"
    },
    {
      "from": "docs/archive/README_ASYNC_DB_TESTING.md",
      "to": "docs/archive/templates/async_database_test_template.py"
    },
    {
      "from": "docs/archive/分阶段优化方案_FootballPrediction.md",
      "to": "docs/archive/.cursor/rules"
    },
    {
      "from": "docs/archive/分阶段优化方案_FootballPrediction.md",
      "to": "docs/archive/CI_风险分析与代码质量优化报告.md"
    },
    {
      "from": "docs/archive/分阶段优化方案_FootballPrediction.md",
      "to": "docs/archive/Makefile"
    },
    {
      "from": "docs/archive/分阶段优化方案_FootballPrediction.md",
      "to": "docs/archive/docs/TEST_STRATEGY.md"
    }
  ],
  "broken_links": [
    {
      "src": "docs/SECURITY.md",
      "ref": "./DEPLOYMENT.md",
      "resolved": "docs/DEPLOYMENT.md"
    },
    {
      "src": "docs/SECURITY.md",
      "ref": "./OPERATIONS.md",
      "resolved": "docs/OPERATIONS.md"
    },
    {
      "src": "docs/DEPLOYMENT_GUIDE.md",
      "ref": "docs/DATABASE_SCHEMA.md",
      "resolved": "docs/docs/DATABASE_SCHEMA.md"
    },
    {
      "src": "docs/DEPLOYMENT_GUIDE.md",
      "ref": "docs/DEVELOPMENT_GUIDE.md",
      "resolved": "docs/docs/DEVELOPMENT_GUIDE.md"
    },
    {
      "src": "docs/DEPLOYMENT_GUIDE.md",
      "ref": "docs/MONITORING_GUIDE.md",
      "resolved": "docs/docs/MONITORING_GUIDE.md"
    },
    {
      "src": "docs/CI_GUARDIAN_GUIDE.md",
      "ref": "ci_defense_mechanisms.md",
      "resolved": "docs/ci_defense_mechanisms.md"
    },
    {
      "src": "docs/CI_GUARDIAN_GUIDE.md",
      "ref": "../rules.md",
      "resolved": "rules.md"
    },
    {
      "src": "docs/CI_GUARDIAN_GUIDE.md",
      "ref": "../Cursor_ClosedLoop_Prompt.md",
      "resolved": "Cursor_ClosedLoop_Prompt.md"
    },
    {
      "src": "docs/testing/performance_tests.md",
      "ref": "performance_trend.png",
      "resolved": "docs/testing/performance_trend.png"
    },
    {
      "src": "docs/archive/README_ASYNC_DB_TESTING.md",
      "ref": "docs/async_database_testing_guide.md",
      "resolved": "docs/archive/docs/async_database_testing_guide.md"
    },
    {
      "src": "docs/archive/README_ASYNC_DB_TESTING.md",
      "ref": "templates/async_database_test_template.py",
      "resolved": "docs/archive/templates/async_database_test_template.py"
    },
    {
      "src": "docs/archive/README_ASYNC_DB_TESTING.md",
      "ref": "examples/refactored_test_index_existence.py",
      "resolved": "docs/archive/examples/refactored_test_index_existence.py"
    },
    {
      "src": "docs/archive/README_ASYNC_DB_TESTING.md",
      "ref": "docs/async_database_testing_guide.md",
      "resolved": "docs/archive/docs/async_database_testing_guide.md"
    },
    {
      "src": "docs/archive/README_ASYNC_DB_TESTING.md",
      "ref": "examples/refactored_test_index_existence.py",
      "resolved": "docs/archive/examples/refactored_test_index_existence.py"
    },
    {
      "src": "docs/archive/README_ASYNC_DB_TESTING.md",
      "ref": "templates/async_database_test_template.py",
      "resolved": "docs/archive/templates/async_database_test_template.py"
    },
    {
      "src": "docs/archive/分阶段优化方案_FootballPrediction.md",
      "ref": ".cursor/rules/",
      "resolved": "docs/archive/.cursor/rules"
    },
    {
      "src": "docs/archive/分阶段优化方案_FootballPrediction.md",
      "ref": "./CI_风险分析与代码质量优化报告.md",
      "resolved": "docs/archive/CI_风险分析与代码质量优化报告.md"
    },
    {
      "src": "docs/archive/分阶段优化方案_FootballPrediction.md",
      "ref": "./Makefile",
      "resolved": "docs/archive/Makefile"
    },
    {
      "src": "docs/archive/分阶段优化方案_FootballPrediction.md",
      "ref": "./docs/TEST_STRATEGY.md",
      "resolved": "docs/archive/docs/TEST_STRATEGY.md"
    }
  ],
  "headings": {
    "docs/DATA_COLLECTION_SETUP.md": [
      "📊 足球数据采集配置指南",
      "📋 概述",
      "🔧 支持的数据源",
      "🔑 API密钥配置",
      "1. Football-Data.org 配置",
      "注册和获取API密钥",
      "环境变量配置",
      "在 .env.staging 或 .env 文件中添加",
      "API限制和特性",
      "使用示例",
      "测试API连接",
      "2. The-Odds-API.com 配置",
      "注册和获取API密钥",
      "环境变量配置",
      "在 .env.staging 或 .env 文件中添加",
      "API限制和特性",
      "使用示例",
      "测试API连接",
      "3. 可选数据源配置",
      "API-Football (备用数据源)"
    ],
    "docs/DATA_DESIGN.md": [
      "数据层设计文档",
      "项目概述",
      "🎯 当前项目数据架构分析",
      "✅ 现有架构优势",
      "⚠️ 需要改进的方面",
      "1. 数据获取（抓取/采集） **✅ 已实现框架与基础功能**",
      "1.1 数据类型需求",
      "1.2 数据采集策略 **✅ 已实现**",
      "✅ 完整实现：src/data/collectors/base_collector.py",
      "✅ 具体实现的采集器类：",
      "- FixturesCollector: 赛程数据采集",
      "- OddsCollector: 赔率数据采集",
      "- ScoresCollector: 比分数据采集",
      "1.3 采集日志记录 **✅ 已实现**",
      "✅ 完整实现：DataCollectionLog模型",
      "✅ 自动日志记录：",
      "- 采集开始时创建日志记录",
      "- 采集结束时更新结果统计",
      "- 支持成功、失败、部分成功状态",
      "- 详细的错误信息记录"
    ],
    "docs/SECURITY.md": [
      "足球预测系统安全文档",
      "概述",
      "📋 目录",
      "权限审计与合规",
      "🎯 审计目标",
      "📊 审计日志结构",
      "核心审计表：`audit_logs`",
      "审计操作类型分类",
      "🔒 敏感数据保护",
      "敏感数据识别",
      "敏感数据处理策略",
      "敏感数据处理流程",
      "📈 合规要求与标准",
      "数据保护法规合规",
      "行业标准合规",
      "🛠️ 审计日志管理",
      "自动审计装饰器",
      "API层审计",
      "手动审计记录",
      "手动记录审计日志"
    ],
    "docs/ARCHITECTURE_IMPROVEMENTS.md": [
      "数据架构优化改进说明",
      "改进概述",
      "详细改进内容",
      "1. 任务调度系统重构",
      "改进目标",
      "实现内容",
      "1.1 主调度器 (`src/scheduler/task_scheduler.py`)",
      "1.2 作业管理器 (`src/scheduler/job_manager.py`)",
      "1.3 依赖解析器 (`src/scheduler/dependency_resolver.py`)",
      "1.4 恢复处理器 (`src/scheduler/recovery_handler.py`)",
      "集成与兼容性",
      "2. 数据库索引优化",
      "改进目标",
      "实现内容",
      "2.1 新增索引 (`src/database/migrations/versions/006_missing_indexes.py`)",
      "2.2 性能提升预期",
      "2.3 索引维护策略",
      "3. 数据质量监控系统",
      "改进目标",
      "实现内容"
    ],
    "docs/COVERAGE_PROGRESS.md": [
      "Coverage Progress Tracker",
      "当前基线",
      "🎉 Phase 5.3.2.1 重大成果",
      "Batch-Δ 大型模块覆盖率提升情况",
      "关键发现",
      "🎉 Phase 5.3.1 重大成果",
      "核心模块覆盖率提升情况",
      "关键发现",
      "阶段目标",
      "待补测清单",
      "完成记录",
      "Phase 5.3 - 覆盖率优化阶段（2025-09-26 启动）",
      "🎯 Phase 5.3.1 核心目标（已完成）",
      "🎯 Phase 5.3.2 核心目标（已完成）",
      "🎉 Phase 5.3.2 重大成果",
      "系统性测试覆盖率提升情况",
      "关键发现",
      "📊 Phase 5.3.2 执行日志",
      "🎯 Phase 5.3.2.2 全局覆盖率突破阶段（已完成）",
      "🎉 Phase 5.3.2.2 重大成果"
    ],
    "docs/PHASE6_PROGRESS.md": [
      "Phase 6 - 数据库迁移修复 + 集成测试优化 完成报告",
      "🎯 阶段概述",
      "📋 任务完成情况",
      "✅ 任务 1: 数据库迁移修复",
      "问题分析",
      "解决方案",
      "验证结果",
      "✅ 任务 2: 集成测试优化",
      "问题分析",
      "解决方案",
      "验证结果",
      "✅ 任务 3: 外部依赖优化",
      "问题分析",
      "解决方案",
      "验证结果",
      "✅ 任务 4: 迁移验证脚本",
      "创建背景",
      "解决方案",
      "验证结果",
      "✅ 任务 5: 文档更新"
    ],
    "docs/security-checklist.md": [
      "🛡️ FootballPrediction 项目安全检查清单",
      "📋 部署前安全检查清单",
      "🔐 密码和凭据安全",
      "🔒 数据库安全",
      "🔴 Redis 安全",
      "📦 MinIO 安全",
      "🌐 网络安全",
      "🔍 监控和审计",
      "🧪 安全验证步骤",
      "1. 密码强度验证",
      "运行密码生成器验证",
      "检查密码复杂度",
      "2. 服务连接测试",
      "测试数据库连接（使用新密码）",
      "测试 Redis 连接（使用密码）",
      "测试 MinIO 连接",
      "3. 权限验证测试",
      "测试数据库权限分离",
      "测试 Redis 访问控制",
      "4. 网络安全测试"
    ],
    "docs/PHASE5_COMPLETION_REPORT.md": [
      "📋 Phase 5 质量门禁总结报告",
      "🎯 执行摘要",
      "总体状态",
      "关键发现",
      "📊 覆盖率分析",
      "总体覆盖率统计",
      "各模块覆盖率详情",
      "覆盖率最低的前 10 个文件",
      "🔧 CI/CD 门禁检查结果",
      "配置文件门槛验证",
      "CI/CD 流程验证",
      "✅ 已统一的配置点",
      "🎯 配置一致性",
      "📈 Phase 1-4 成果回顾",
      "已完成的改进",
      "覆盖率提升轨迹",
      "测试架构成果",
      "🚨 关键风险与阻塞项",
      "主要风险",
      "阻塞因素"
    ],
    "docs/USAGE_EXAMPLES.md": [
      "📖 使用示例",
      "🎯 基础使用流程",
      "1. 环境初始化",
      "项目初始化（仅首次使用）",
      "验证环境",
      "2. 在Cursor中使用完整提示词",
      "🔧 高级使用场景",
      "场景1：实现数据分析模块",
      "1. 设置任务环境变量",
      "2. 运行完整闭环",
      "3. 查看执行结果",
      "场景2：重构现有代码",
      "使用Cursor重构提示词",
      "场景3：修复Bug并添加测试",
      "Bug修复场景",
      "📊 监控和调试",
      "查看执行状态",
      "查看项目整体状态",
      "查看最近的质量检查结果",
      "查看完整的闭环执行日志"
    ],
    "docs/TEST_STRATEGY.md": [
      "📋 足球预测系统测试策略文档",
      "📖 文档信息",
      "文档目的",
      "适用范围",
      "版本信息",
      "🎯 测试总体目标",
      "核心质量目标",
      "测试质量指标",
      "🗂️ 测试套件分类与执行",
      "快速单测（排除 slow）",
      "单独运行慢测试（包括 Redis 健康检查等）",
      "仅跑单元测试（快速反馈）",
      "跑集成测试",
      "CI/CD 流程",
      "⚡ 测试性能优化",
      "🧩 依赖校验",
      "依赖管理规范",
      "慢测试分层",
      "CI/CD 执行顺序",
      "🏗️ 测试分层设计"
    ],
    "docs/RELEASE_CHECKLIST.md": [],
    "docs/COVERAGE_PROGRESS_NEW.md": [
      "覆盖率循环加速计划 - 进度记录",
      "执行目标",
      "执行轮次记录",
      "第1轮 - 基准测试",
      "第2轮 - Data Lake Storage 优化",
      "第3轮 - Football Data Cleaner 优化",
      "第4轮 - Missing Data Handler 优化",
      "第5轮 - Anomaly Detector 优化"
    ],
    "docs/DEPLOYMENT_GUIDE.md": [
      "🚀 足球预测系统生产部署指南",
      "📋 概述",
      "🏗️ 系统架构",
      "核心组件",
      "部署架构图",
      "🔧 环境准备",
      "硬件要求",
      "软件依赖",
      "📦 容器化部署",
      "1. 构建Docker镜像",
      "构建应用镜像",
      "构建特定环境镜像",
      "2. Docker Compose部署",
      "启动所有服务",
      "启动特定服务",
      "查看服务状态",
      "查看日志",
      "3. 生产环境配置",
      "☁️ 云服务部署",
      "AWS部署方案"
    ],
    "docs/RETRY_MECHANISM_DESIGN.md": [
      "Retry Mechanism Design",
      "Overview",
      "Current State",
      "Proposed Implementation",
      "1. Retry Decorator",
      "2. Circuit Breaker Pattern",
      "3. Integration with Database Connection",
      "src/database/connection.py",
      "Database-specific retry configuration",
      "4. Integration with MLflow Service",
      "src/models/prediction_service.py",
      "MLflow-specific retry configuration",
      "Benefits",
      "Configuration"
    ],
    "docs/API_500_ERROR_ANALYSIS.md": [
      "API 500 错误分析报告",
      "🎯 问题概述",
      "1️⃣ 路由函数定位",
      "**目标路由**: `/features/{match_id}`",
      "2️⃣ 依赖项分析",
      "**主要依赖**:",
      "3️⃣ 崩溃点识别",
      "**🔥 主要崩溃点 1**: SQL 构造错误",
      "**🔥 潜在崩溃点 2**: 特征存储服务调用",
      "**🔥 潜在崩溃点 3**: 数据库连接问题",
      "**🔥 潜在崩溃点 4**: 特征存储初始化失败",
      "4️⃣ 错误处理和日志建议",
      "**立即修复** - 测试Mock配置",
      "❌ 错误的Mock方式",
      "✅ 正确的Mock方式",
      "**防御性改进** - API路由增强",
      "**Try-Catch 策略**",
      "5️⃣ 数据库连接问题的影响",
      "**是否是连锁反应?**",
      "**证据**:"
    ],
    "docs/PHASE5.3.2.2_COMPLETION_REPORT.md": [
      "Phase 5.3.2.2 全局覆盖率突破阶段完成报告",
      "📊 执行摘要",
      "🎯 关键成就",
      "1. 全局代码体量扫描",
      "2. Batch-Ω系列任务执行",
      "3. 测试套件创建",
      "4. Mock对象兼容性修复",
      "📈 覆盖率提升分析",
      "整体覆盖率变化",
      "模块级覆盖率分析",
      "技术挑战与解决方案",
      "🔧 技术创新与最佳实践",
      "Batch-Ω方法论",
      "测试策略优化",
      "📋 文件交付清单",
      "新建测试文件",
      "工具和配置文件",
      "文档更新",
      "🎯 后续建议",
      "短期目标 (1-2周)"
    ],
    "docs/COMPLETE_DEMO.md": [
      "🎯 FootballPrediction 完整系统演示",
      "🌟 系统特色",
      "🚀 完整演示流程",
      "第一步：项目初始化",
      "1. 克隆项目",
      "2. 一键初始化（创建venv + 安装依赖 + 项目结构）",
      "3. 查看项目状态",
      "第二步：环境检查",
      "运行环境检查器",
      "第三步：配置Issue同步",
      "查看配置向导",
      "根据向导配置（以GitHub为例）",
      "编辑ISSUES.md文件",
      "第四步：开发工作流",
      "🌅 每日开发开始",
      "一键准备开发环境",
      "💻 代码开发阶段",
      "🔍 持续质量检查",
      "快速修复格式问题",
      "完整质量检查"
    ],
    "docs/CI_BLOCKERS.md": [
      "GitHub Actions CI Blockers Analysis Report",
      "🚨 关键发现总结",
      "📊 CI Pipeline 结构分析",
      "1. Pipeline 概览",
      "2. 失败模式统计",
      "🔍 根本原因分析",
      "🎯 主要问题：数据库迁移离线模式兼容性",
      "🔧 迁移依赖链问题",
      "🚨 发现的所有问题",
      "🚫 BLOCKER 级别问题",
      "1. 性能优化迁移离线模式失败",
      "2. 数据库权限配置迁移问题",
      "🔴 HIGH 优先级问题",
      "3. 审计日志表迁移问题",
      "4. JSONB兼容性迁移问题",
      "5. 缺失索引迁移问题",
      "6. 分区表实现迁移问题",
      "🟡 MEDIUM 优先级问题",
      "7. Alembic配置警告",
      "8. 依赖版本冲突"
    ],
    "docs/bad_example.md": [
      "bad_example.py 迁移说明",
      "示意代码：避免在源码目录中保留此类示例"
    ],
    "docs/FEATURE_STORE_TEST_FIXES.md": [
      "🔧 特征存储测试修复指南",
      "📋 问题诊断总结",
      "🚨 **问题类型 1: typeguard.TypeCheckError**",
      "🚨 **问题类型 2: 断言错误和异步完成问题**",
      "🎯 **针对 `TestFootballFeatureStore::test_register_features` 的修复方法**",
      "❌ **原始问题**",
      "✅ **修复方案**",
      "**1. 创建具备完整属性的Mock对象**",
      "**2. 修复异步数据库操作Mock**",
      "**3. 添加日志记录验证**",
      "**4. 类型安全的参数传递**",
      "🔍 **类型检查错误的根本原因与解决**",
      "**根本原因分析**",
      "**✅ 正确的类型构造示例**",
      "✅ 正确的entity_rows类型",
      "✅ 正确的feature_refs类型",
      "❌ 错误的类型示例（会导致TypeCheckError）",
      "🚀 **异步操作完成性验证**",
      "**问题**: 异步未完成就检查状态",
      "❌ 问题代码"
    ],
    "docs/COMPREHENSIVE_API_DOCUMENTATION_STYLE_GUIDE.md": [
      "Comprehensive API Documentation Style Guide",
      "1. General Principles",
      "2. Docstring Format Standards",
      "2.1 Module Docstrings",
      "2.2 Class Docstrings",
      "2.3 Method Docstrings",
      "2.4 Data Class Docstrings",
      "2.5 Enum Docstrings",
      "3. API Documentation Standards",
      "3.1 FastAPI Endpoint Documentation",
      "3.2 FastAPI Path and Query Parameters",
      "4. Documentation Best Practices",
      "4.1 Consistency Guidelines",
      "4.2 Content Guidelines",
      "4.3 Maintenance Guidelines",
      "5. Documentation Tools and Automation",
      "5.1 Sphinx Configuration",
      "docs/conf.py",
      "支持Google和NumPy风格的docstrings",
      "5.2 Automated Documentation Generation"
    ],
    "docs/STAGING_DEPLOYMENT_REHEARSAL.md": [
      "🎯 足球预测系统 Staging 环境部署彩排演练流程",
      "📋 执行摘要",
      "🎯 演练目标",
      "📊 演练范围",
      "🔍 Staging vs 生产环境差异",
      "🔧 演练前准备",
      "✅ Checklist: 环境资源检查",
      "基础设施检查",
      "服务依赖检查",
      "配置文件检查",
      "监控告警检查",
      "📝 环境配置验证",
      "验证staging环境变量文件",
      "检查 .env.staging 文件存在性和内容",
      "验证关键环境变量",
      "验证staging Docker配置",
      "检查staging compose配置",
      "验证服务配置",
      "验证监控配置",
      "检查Grafana staging仪表盘"
    ],
    "docs/TESTING_OPTIMIZATION_REPORT.md": [
      "📋 测试套件优化总结报告",
      "🎯 优化目标",
      "✅ 任务完成情况",
      "1. 补充缺失标记 - ✅ 已完成",
      "2. 清理残留目录 - ✅ 已完成",
      "3. 统一覆盖率门槛 - ✅ 已完成",
      "4. 修复失败的测试 - ✅ 已完成",
      "4.1 异常检测器数据库连接问题",
      "4.2 统计分析算法适配",
      "4.3 数据库管理器API适配",
      "4.4 ORM模型字段映射修复",
      "Match模型测试数据修正",
      "Odds模型测试数据修正",
      "5. 运行测试验证 - ✅ 已完成",
      "6. 更新QA文档 - ✅ 已完成",
      "📊 优化成果",
      "质量指标提升",
      "架构优化成果",
      "开发体验改进",
      "🔧 技术细节"
    ],
    "docs/CI_FIX_REPORT.md": [
      "CI 修复报告",
      "🎯 修复目标",
      "📋 问题诊断",
      "1. 主要问题类型",
      "2. 具体问题统计",
      "🔧 修复方案",
      "阶段一：本地模拟CI环境分析 ✅",
      "阶段二：修复依赖和环境差异 ✅",
      "阶段三：修复容器/服务依赖 ✅",
      "阶段四：最终验证 ✅",
      "📊 修复结果",
      "测试统计",
      "服务状态",
      "提交信息",
      "🐳 服务配置对比",
      "GitHub Actions CI vs 本地测试环境",
      "🎉 关键成就",
      "🔮 后续建议",
      "📝 技术细节",
      "移除的文件"
    ],
    "docs/code_fixes_summary.md": [
      "代码错误修复总结",
      "🎯 修复目标",
      "🔧 修复详情",
      "1. FastAPI Query 参数错误修复",
      "❌ 错误代码",
      "✅ 修复后代码",
      "🔍 修复要点",
      "2. 异步 Mock 对象错误修复",
      "❌ 错误代码",
      "✅ 修复后代码",
      "🔍 修复要点",
      "📊 测试验证结果",
      "错误重现测试",
      "测试异步 Mock 错误 - 成功重现并捕获 TypeError",
      "✅ PASSED - 成功捕获预期的 TypeError",
      "修复验证测试",
      "测试修复后的 Query 参数",
      "✅ PASSED - Query 参数验证正常工作",
      "测试修复后的异步 Mock",
      "✅ PASSED - AsyncMock 正常工作，无警告"
    ],
    "docs/CACHING_IMPLEMENTATION_DESIGN.md": [
      "Caching Implementation Design",
      "Overview",
      "Current State",
      "Proposed Implementation",
      "1. Cache Entry with TTL",
      "2. TTL Cache Manager",
      "3. Integration with Prediction Service",
      "Benefits",
      "Configuration"
    ],
    "docs/COVERAGE_ROADMAP.md": [
      "Coverage Improvement Roadmap",
      "Baseline Snapshot (Week 0)",
      "Board Structure (Kanban)",
      "Phase 2 – Raise to 60%",
      "Phase 3 – Raise to 65%",
      "Phase 4 – Raise to 70%",
      "Operating Cadence",
      "Assistance Needed"
    ],
    "docs/DEPENDENCY_FILES_OVERVIEW.md": [
      "Dependency Files Overview",
      "Production Dependencies",
      "requirements.txt",
      "requirements.pinned.txt",
      "requirements.lock",
      "Development Dependencies",
      "requirements-dev.txt",
      "requirements-dev.pinned.txt",
      "requirements-dev.cleaned.txt",
      "Usage",
      "For Development",
      "Install flexible development dependencies",
      "Or install pinned development dependencies",
      "For Production",
      "Install pinned production dependencies",
      "For Dependency Updates",
      "Update lock files",
      "File Relationships",
      "Best Practices"
    ],
    "docs/PHASE_COMPLETION_AUDIT.md": [
      "📋 Phase 1-4 完成度审计报告",
      "🎯 执行摘要",
      "总体状态",
      "关键风险与阻塞项",
      "📋 证据清单",
      "1. 看板与文档证据",
      "2. 覆盖率配置证据",
      "3. 测试统计证据",
      "🔍 Phase-by-Phase 审计结果",
      "Phase 1: 核心业务单测 ✅ **PASS**",
      "1.1 PredictionService 测试",
      "1.2 ModelTrainer 测试",
      "1.3 FeatureCalculator 测试",
      "Phase 2: 数据处理与存储 ✅ **PASS**",
      "2.1 数据采集器测试",
      "2.2 数据处理服务测试",
      "2.3 数据库管理测试",
      "Phase 3: 流处理/任务/指标 + 门禁 ⚠️ **PARTIAL**",
      "3.1 Kafka 测试",
      "3.2 Celery 任务测试"
    ],
    "docs/API_REFERENCE.md": [
      "📚 FootballPrediction API 参考文档",
      "🎯 概览",
      "📦 API 端点 (src.api)",
      "健康检查 API",
      "健康检查端点",
      "监控 API",
      "性能指标端点",
      "📦 数据模型 (src.database.models)",
      "联赛模型 (League)",
      "联赛实体",
      "球队模型 (Team)",
      "球队实体",
      "比赛模型 (Match)",
      "比赛实体",
      "预测模型 (Prediction)",
      "预测实体",
      "赔率模型 (Odds)",
      "赔率实体",
      "特征模型 (Features)",
      "特征实体"
    ],
    "docs/CI_MIGRATION_COMPATIBILITY_REPORT.md": [
      "CI 迁移兼容性强化完成报告",
      "任务概述",
      "核心问题",
      "原始问题",
      "问题分析",
      "解决方案",
      "1. 迁移文件改造 ✅",
      "2. CI 兼容性修复 ✅",
      "3. 验证脚本优化 ✅",
      "离线模式测试",
      "在线模式测试",
      "完整验证",
      "验证结果",
      "1. 离线模式测试 ✅",
      "2. 在线模式测试 ✅",
      "3. 单元测试验证 ✅",
      "4. 验证脚本测试 ✅",
      "技术细节",
      "关键修复点",
      "数据库配置优化"
    ],
    "docs/PHASE5.3_COMPLETION_REPORT.md": [
      "Phase 5.3 覆盖率优化阶段完成报告",
      "📋 执行概述",
      "🎯 核心成果",
      "Batch-Δ 系列任务完成情况",
      "整体项目覆盖率影响",
      "🔧 技术实施细节",
      "关键技术策略",
      "主要挑战与解决",
      "📊 详细成果分析",
      "模块覆盖率改善分析",
      "整体项目影响评估",
      "🎯 方法论总结",
      "Batch-Δ 方法论验证",
      "成功要素",
      "📈 后续建议",
      "短期优化建议",
      "长期战略建议",
      "🏆 项目价值",
      "直接价值",
      "间接价值"
    ],
    "docs/DEPENDENCY_MANAGEMENT.md": [
      "Dependency Management",
      "Overview",
      "Dependency Files",
      "Version Management Strategy",
      "Flexible Versions (requirements.txt and requirements-dev.txt)",
      "Example of flexible versioning",
      "Pinned Versions (requirements.pinned.txt and requirements-dev.pinned.txt)",
      "Example of pinned versioning",
      "Lock File (requirements.lock)",
      "Updating Dependencies",
      "For Development",
      "For Production",
      "Dependency Categories",
      "Core Dependencies",
      "Machine Learning Dependencies",
      "MLOps Dependencies",
      "Monitoring Dependencies",
      "Security Considerations",
      "Best Practices"
    ],
    "docs/API_DOCUMENTATION_STYLE_GUIDE.md": [
      "API Documentation Style Guide",
      "1. General Principles",
      "2. Docstring Format Standards",
      "2.1 Class Docstrings",
      "2.2 Method Docstrings",
      "2.3 Data Class Docstrings",
      "3. API Documentation Standards",
      "3.1 FastAPI Endpoint Documentation",
      "4. Module Documentation",
      "4.1 Module-Level Docstrings",
      "5. Best Practices"
    ],
    "docs/UNUSED_DEPENDENCIES_ANALYSIS.md": [
      "Unused Dependencies Analysis",
      "Analysis Results",
      "Potentially Unused Production Dependencies (18)",
      "Actually Used Dependencies (Confirmed)",
      "Unused Development Dependencies",
      "Recommendations",
      "Conclusion"
    ],
    "docs/MCP_HEALTH_CHECK.md": [
      "MCP 健康检查报告",
      "检查摘要",
      "全局基础设施MCP检查结果",
      "PostgreSQL MCP ✅",
      "Redis MCP ✅",
      "Kafka MCP ✅",
      "Docker MCP ✅",
      "Kubernetes MCP ✅",
      "Prometheus MCP ✅",
      "Grafana MCP ✅",
      "项目专用MCP检查结果",
      "MLflow MCP ✅",
      "Feast MCP ✅",
      "Coverage MCP ✅",
      "Pytest MCP ✅",
      "执行日志",
      "建议和后续步骤",
      "🎯 建议的后续步骤"
    ],
    "docs/PHASE5.2.1_COMPLETION_REPORT.md": [
      "Phase 5.2.1 专项修复阶段完成报告",
      "📋 执行概述",
      "🎯 核心成果",
      "1. 重量级依赖冲突彻底解决",
      "解决方案架构",
      "核心技术实现",
      "LazyModuleProxy - 简化的懒加载代理",
      "动态模块导入器",
      "DynamicModuleImporter - 智能模块代理管理",
      "2. Mock 工厂体系完善",
      "重量级依赖 Mock 覆盖",
      "Mock 质量保证",
      "3. conftest.py 系统性改造",
      "核心改造内容",
      "关键代码片段",
      "预导入模拟设置",
      "4. 测试执行成功率",
      "测试执行统计",
      "覆盖率详情",
      "5. HTML 覆盖率报告生成"
    ],
    "docs/LOCAL_CI_REPORT.md": [
      "本地CI模拟执行报告",
      "📋 执行概述",
      "🎯 任务执行结果",
      "任务 1：准备干净环境 ✅",
      "清理旧容器和数据卷",
      "重新启动服务",
      "服务状态检查",
      "任务 2：数据库迁移 ⚠️",
      "基础迁移成功",
      "性能优化迁移失败（外键约束错误）",
      "当前状态: 004_configure_permissions (branchpoint)",
      "任务 3：运行测试 ✅",
      "任务 4：代码质量检查 ✅",
      "无输出 = 0 违规",
      "任务 5：对比GitHub Actions ✅",
      "🏆 总体评估",
      "✅ 成功指标",
      "⚠️ 注意事项",
      "🎯 预期CI状态",
      "📝 后续建议"
    ],
    "docs/PHASE5322_COMPLETION_REPORT.md": [
      "Phase 5.3.2.2 完成报告：全局覆盖率突破阶段",
      "📋 执行摘要",
      "🎯 目标达成情况",
      "整体目标",
      "单个模块目标达成情况",
      "📊 详细执行记录",
      "Batch-Γ-001: data_processing.py",
      "Batch-Γ-002: data_quality/anomaly_detector.py",
      "Batch-Γ-003: redis_manager.py",
      "Batch-Γ-004: audit_service.py",
      "Batch-Γ-005: data_lake_storage.py",
      "Batch-Γ-006: monitoring/quality_monitor.py",
      "Batch-Γ-007: monitoring/anomaly_detector.py",
      "Batch-Γ-008: streaming/kafka_consumer.py",
      "Batch-Γ-009: monitoring/metrics_collector.py",
      "Batch-Γ-010: tasks/backup_tasks.py",
      "🔧 技术实现亮点",
      "1. 异步测试模式",
      "2. Mock对象兼容性",
      "3. 边缘情况覆盖"
    ],
    "docs/REPAIR_VERIFICATION_REPORT.md": [
      "🎯 API 500 错误修复验证报告",
      "📋 修复执行总结",
      "✅ **优先级 1: 修复测试Mock配置错误** (已完成)",
      "❌ 原来的错误Mock",
      "✅ 修复后的正确Mock",
      "✅ **优先级 2: 修复数据库连接和异步fixture问题** (已完成)",
      "❌ 错误的fixture定义",
      "✅ 正确的fixture定义",
      "❌ 错误的字段名",
      "✅ 正确的字段名",
      "✅ **优先级 3: 改进API错误处理和日志** (已完成)",
      "🎉 最终验证结果",
      "**错误演进追踪**:",
      "**核心成果**:",
      "**当前状态**:",
      "📁 修复文件清单",
      "**直接修改的文件**:",
      "**创建的新文件**:",
      "🚀 生产环境部署建议",
      "1. 启动PostgreSQL服务"
    ],
    "docs/TESTING_STRATEGY.md": [
      "足球预测系统测试策略总览",
      "📋 项目概况",
      "🎯 测试策略目标",
      "短期目标 (1-2个月)",
      "中期目标 (3-6个月)",
      "长期目标 (6个月以上)",
      "📊 测试现状分析",
      "当前测试分布",
      "主要问题",
      "🚀 五阶段实施计划",
      "Phase 1: 基础修复与稳定化 (Week 1-2)",
      "Phase 2: 覆盖率提升攻坚 (Week 3-6)",
      "Phase 3: 集成与端到端测试 (Week 7-10)",
      "Phase 4: 性能与安全测试 (Week 11-14)",
      "Phase 5: 高级测试策略 (Week 15-20)",
      "🛠️ 技术实施指南",
      "测试框架配置",
      "测试架构设计",
      "关键测试策略",
      "📈 质量监控体系"
    ],
    "docs/CI_FINAL_REPORT.md": [
      "CI 最终修复报告",
      "🎯 修复目标",
      "📋 问题总结",
      "第一轮问题：代码质量和服务配置",
      "第二轮问题：数据库迁移失败",
      "🔧 修复方案",
      "第一轮修复：代码质量和服务配置 ✅",
      "第二轮修复：数据库迁移问题 ✅",
      "📊 修复结果",
      "本地验证",
      "服务状态",
      "GitHub Actions CI 状态",
      "🛠️ 关键技术修复",
      "1. Alembic 环境配置修复",
      "在 src/database/migrations/env.py 中添加",
      "2. 多Head修订合并",
      "识别多个head修订",
      "显示4个head修订",
      "创建合并迁移",
      "3. Docker 服务配置"
    ],
    "docs/CI_REPORT.md": [
      "CI Fast vs Slow 测试对比报告",
      "详细耗时",
      "Fast 最慢用例 Top 10",
      "Slow 最慢用例 Top 10",
      "Integration 最慢用例 Top 10",
      "覆盖率详情",
      "对比分析",
      "结论",
      "历史趋势",
      "覆盖率一致性验证结果 (2025-09-22)",
      "Nightly Coverage Threshold Reports",
      "2025-09-22 覆盖率门槛分离策略报告（修复后版本）",
      "CI 配置检查",
      "pytest.ini 检查",
      "文档说明检查",
      "结论",
      "2025-09-23 覆盖率门槛分离策略报告（修复后版本）",
      "CI 配置检查",
      "pytest.ini 检查",
      "文档说明检查"
    ],
    "docs/PRODUCTION_DEPLOYMENT_GUIDE.md": [
      "🚀 足球预测系统生产部署执行手册",
      "📋 执行摘要",
      "🎯 手册目标",
      "🏗️ 上线涉及的核心组件",
      "🔧 部署前准备",
      "1. 代码和CI/CD验证",
      "✅ 检查清单：代码准备",
      "🔄 版本号规范",
      "版本命名规范",
      "📋 验证命令",
      "1. 检查代码状态",
      "2. 验证CI/CD状态",
      "3. 检查测试覆盖率",
      "4. 安全扫描验证",
      "2. 环境变量准备",
      "🔐 环境变量清单",
      "=============================================================================",
      "应用基础配置",
      "=============================================================================",
      "============================================================================="
    ],
    "docs/COVERAGE_BASELINE_REPORT.md": [
      "Phase 5.3.1 覆盖率基线报告",
      "📊 当前覆盖率状态",
      "📈 各模块覆盖率统计",
      "🎯 覆盖率最低前10个文件",
      "🔍 关键发现",
      "1. 高覆盖率模块 (≥70%)",
      "2. 中等覆盖率模块 (30-70%)",
      "3. 低覆盖率模块 (<30%)",
      "📋 需要优先补测的模块",
      "Batch-Δ-021: 数据收集器模块",
      "Batch-Δ-022: Kafka流处理模块",
      "Batch-Δ-023: Kafka消费模块",
      "Batch-Δ-024: 数据处理服务",
      "Batch-Δ-025: 审计服务",
      "Batch-Δ-026: 赛程收集器",
      "Batch-Δ-027: 流处理器",
      "Batch-Δ-028: 比分收集器",
      "Batch-Δ-029: 维护任务",
      "Batch-Δ-030: 监控任务",
      "🎯 阶段目标"
    ],
    "docs/FAILURE_PROTECTION_DEMO.md": [
      "🛡️ 失败保护机制演示",
      "🎯 失败保护机制概述",
      "核心思路",
      "保护层级",
      "🧪 实际测试演示",
      "测试1：环境检查失败",
      "创建问题场景",
      "运行prepush",
      "测试2：代码质量检查失败",
      "创建格式糟糕的代码",
      "运行prepush",
      "测试3：单元测试失败",
      "创建失败的测试",
      "运行prepush",
      "测试4：所有检查通过",
      "清理问题文件",
      "确保在feature分支",
      "运行prepush",
      "🔧 修复建议系统",
      "环境问题"
    ],
    "docs/async_database_testing_guide.md": [
      "异步数据库测试指南",
      "🎯 概述",
      "❌ 常见问题",
      "问题1：错误的Fixture定义",
      "❌ 错误写法",
      "问题2：缺失装饰器",
      "❌ 错误写法",
      "问题3：同步/异步混用",
      "❌ 错误写法",
      "✅ 正确的解决方案",
      "1. 标准异步数据库测试模板",
      "2. 关键修复点",
      "A. Fixture装饰器",
      "✅ 正确",
      "B. 测试函数装饰器",
      "✅ 正确",
      "C. 数据库操作",
      "✅ 正确",
      "D. Session管理",
      "✅ 正确"
    ],
    "docs/monitoring.md": [
      "🔍 监控系统文档",
      "概述",
      "监控端点",
      "1. 📊 性能指标 - `/api/v1/metrics`",
      "响应示例",
      "指标说明",
      "2. 🏥 服务状态 - `/api/v1/status`",
      "响应示例",
      "状态说明",
      "使用场景",
      "1. 性能监控",
      "获取系统性能指标",
      "监控内存使用率",
      "2. 健康检查",
      "负载均衡器健康检查",
      "检查数据库状态",
      "3. 业务监控",
      "查看模型准确率",
      "查看最近活动",
      "监控集成"
    ],
    "docs/MONITORING.md": [
      "数据质量监控与告警机制",
      "概述",
      "质量监控 (Quality Monitor)",
      "监控维度",
      "1. 数据新鲜度 (Data Freshness)",
      "2. 数据完整性 (Data Completeness)",
      "3. 数据一致性 (Data Consistency)",
      "质量评分",
      "异常检测 (Anomaly Detection)",
      "检测方法",
      "1. 3σ规则检测",
      "2. IQR方法检测",
      "3. Z-score分析",
      "4. 范围检查",
      "5. 频率分布检测",
      "检测频率过高或过低的值",
      "6. 时间间隔检测",
      "使用IQR方法检测异常间隔",
      "异常类型",
      "严重程度"
    ],
    "docs/architecture.md": [
      "足球比赛结果预测系统 - 系统架构文档",
      "📋 目录",
      "1. 系统架构概览",
      "1.1 整体架构图",
      "1.2 数据流说明",
      "输入阶段",
      "处理阶段",
      "建模阶段",
      "输出阶段",
      "2. 模块设计说明",
      "2.1 数据采集模块",
      "职责",
      "输入/输出",
      "核心组件",
      "依赖关系",
      "扩展方向",
      "2.2 数据存储与清洗模块",
      "职责",
      "输入/输出",
      "核心组件"
    ],
    "docs/PHASE6_COMPLETION_REPORT.md": [
      "🎯 Phase 6：上线前检查与补齐 Blocker 阶段 - 最终验收报告",
      "📋 执行摘要",
      "🎯 核心成果",
      "📊 各任务完成情况",
      "Task 1: CI/CD 流程与覆盖率门槛 ✅",
      "优化内容",
      "配置变更",
      ".github/workflows/ci.yml",
      "Task 2: 依赖与运行环境确认 ✅",
      "Docker 服务验证",
      "依赖管理",
      "Task 3: 数据准备与迁移 ✅",
      "数据库迁移系统",
      "关键迁移文件",
      "数据初始化",
      "Task 4: 回滚与应急机制 ✅",
      "数据库备份系统",
      "容器回滚机制",
      "应急策略",
      "Task 5: 监控与告警验证 ✅"
    ],
    "docs/CI_GUARDIAN_GUIDE.md": [
      "🛡️ CI Guardian 系统使用指南",
      "📋 系统概述",
      "🚀 快速开始",
      "1. 基础使用",
      "监控特定CI命令",
      "分析现有日志中的问题",
      "生成并验证防御机制",
      "运行完整的CI守护检查（推荐）",
      "2. 集成到Makefile",
      "3. 集成到CI流程",
      "🔧 核心组件详解",
      "1. CI Guardian 主控制器 (`ci_guardian.py`)",
      "监控CI命令并生成防御机制",
      "分析现有问题日志",
      "仅生成防御机制",
      "验证现有防御机制",
      "显示执行摘要",
      "2. CI问题分析器 (`ci_issue_analyzer.py`)",
      "分析质量检查日志",
      "分析特定工具输出"
    ],
    "docs/QA_TEST_KANBAN.md": [
      "📋 足球预测项目测试质量看板",
      "📊 项目概况",
      "🎯 任务看板",
      "Backlog（未准备）",
      "Ready（可开始）",
      "Phase 1. 核心业务优先（高优先级）",
      "Phase 2. 数据处理与存储（中优先级）✅ **已完成**",
      "Phase 3. 流与任务（中优先级）",
      "Phase 4. 监控与工具（低优先级）",
      "Phase 4. 补测与提效阶段（Batch-Δ 任务）",
      "Phase 5. 质量门禁与 CI",
      "In Progress（进行中）",
      "Done（已完成）",
      "Blocked（阻塞）",
      "Review（待评审）",
      "Done（已完成）",
      "Phase 4. 补测与提效阶段（Batch-Δ 任务）",
      "Phase 1. 核心业务优先（高优先级）✅ **已完成**",
      "Phase 0. 基线与覆盖率恢复 ✅ **已完成**",
      "📝 每日进展日志"
    ],
    "docs/PHASE5.2_COMPLETION_REPORT.md": [
      "Phase 5.2 系统性提升阶段完成报告",
      "📋 执行概述",
      "🎯 核心成果",
      "1. 重量级依赖导入问题解决",
      "解决方案架构",
      "关键技术实现",
      "conftest.py 关键改进",
      "解决的具体问题",
      "2. Batch-Δ任务完成情况",
      "Batch-Δ-015: anomaly_detector.py 异常检测器",
      "Batch-Δ-016: model_training.py 模型训练",
      "Batch-Δ-017: feature_calculator.py 特征计算器",
      "Batch-Δ-018: lineage_reporter.py 数据血缘报告",
      "Batch-Δ-019: metrics_collector.py 指标收集器",
      "Batch-Δ-020: kafka_producer.py Kafka生产者",
      "3. 技术方法论创新",
      "直接验证脚本架构",
      "统一的验证脚本模式",
      "AST代码分析技术",
      "AST结构分析"
    ],
    "docs/QUICK_START.md": [
      "🚀 快速开始指南",
      "📋 第一步：环境检查",
      "运行环境检查器，查看当前状态",
      "🔧 第二步：按建议修复环境",
      "1. 创建和激活虚拟环境",
      "创建虚拟环境",
      "激活虚拟环境",
      "或",
      "2. 安装项目依赖",
      "安装所有依赖",
      "3. 初始化Git仓库",
      "初始化Git仓库",
      "添加所有文件",
      "创建初始提交",
      "创建功能分支",
      "4. 验证环境修复",
      "再次运行环境检查",
      "🎯 第三步：使用Cursor闭环系统",
      "方法1：完整自动化闭环",
      "运行完整闭环，包含所有细节规则检查"
    ],
    "docs/CI_SLOW_SUITE_FIX_REPORT.md": [
      "CI slow-suite 修复完成报告",
      "🎯 修复目标",
      "📋 问题分析",
      "根本原因",
      "技术细节",
      "🔧 修复方案",
      "1. 修复初始数据库架构迁移",
      "2. 修复索引创建迁移",
      "3. 增强CI配置",
      "4. 优化数据库配置",
      "✅ 验证结果",
      "数据库迁移验证",
      "集成测试验证",
      "CI环境验证",
      "📊 修复文件清单",
      "核心修复文件",
      "配置优化文件",
      "🎉 修复成果",
      "技术成果",
      "业务影响"
    ],
    "docs/TASKS.md": [
      "上线前优化任务看板",
      "核心功能",
      "测试与质量",
      "部署与运维",
      "配置与安全",
      "CI/CD",
      "上线前最终动作（待执行）",
      "🚀 Phase 5 - 覆盖率提升 + 生产部署与监控优化（2025-09-25 完成）",
      "📋 任务 1：覆盖率提升专项",
      "📋 任务 2：生产部署准备",
      "📋 任务 3：监控与告警优化",
      "📋 任务 4：文档更新",
      "🎯 Phase 5 最终验收标准",
      "🚀 Phase 6 - 数据库迁移修复 + 集成测试优化（2025-09-25 完成）",
      "📋 任务 1：数据库迁移修复",
      "📋 任务 2：集成测试优化",
      "📋 任务 3：文档和工具完善",
      "📋 任务 4：最终验证",
      "🎯 Phase 6 最终验收标准"
    ],
    "docs/MAKEFILE_GUIDE.md": [
      "📖 Makefile 使用指南",
      "🎯 核心理念",
      "🚀 快速开始",
      "查看所有可用命令",
      "一键初始化开发环境",
      "快速开发环境准备",
      "提交前完整检查",
      "📋 命令详解",
      "🌐 环境管理",
      "`make venv`",
      "`make install`",
      "`make init`",
      "`make clean`",
      "🔍 环境检查",
      "`make env-check`",
      "`make context`",
      "`make status`",
      "🔧 代码质量",
      "`make format`",
      "`make lint`"
    ],
    "docs/runbooks/README.md": [
      "Operational Runbooks Index",
      "Available Runbooks",
      "Usage",
      "Contributing",
      "Contact"
    ],
    "docs/runbooks/DISASTER_RECOVERY_RUNBOOK.md": [
      "Disaster Recovery Runbook",
      "1. Overview",
      "2. Recovery Scenarios",
      "2.1 Database Recovery",
      "2.1.1 Full Database Recovery from Backup",
      "2.1.2 Point-in-Time Recovery (PITR)",
      "2.2 Application Service Recovery",
      "2.2.1 Complete Application Recovery",
      "2.3 Data Pipeline Recovery",
      "2.3.1 Restart Failed Data Pipeline",
      "3. Monitoring and Validation",
      "3.1 Post-Recovery Validation",
      "3.2 Performance Monitoring",
      "4. Communication and Documentation",
      "4.1 Incident Reporting",
      "5. Preventive Measures",
      "5.1 Regular Backup Verification",
      "Weekly backup verification script",
      "Test backup restoration",
      "Create test database"
    ],
    "docs/runbooks/DATA_MIGRATION_RUNBOOK.md": [
      "Data Migration Runbook",
      "1. Overview",
      "2. Pre-Migration Preparation",
      "2.1 Migration Planning",
      "2.2 Environment Preparation",
      "3. Migration Procedures",
      "3.1 Database Schema Migration",
      "3.1.1 Alembic Migration",
      "3.1.2 Manual Schema Changes",
      "3.2 Data Migration",
      "3.2.1 Batch Data Migration",
      "3.2.2 Incremental Data Migration",
      "3.3 Application Migration",
      "3.3.1 Configuration Migration",
      "3.3.2 Code Migration",
      "4. Post-Migration Validation",
      "4.1 Data Validation",
      "4.2 Functional Validation",
      "5. Rollback Procedures",
      "5.1 Database Rollback"
    ],
    "docs/testing/fixtures_factories.md": [
      "测试数据工厂",
      "📋 目录",
      "测试数据工厂概述",
      "设计原则",
      "目录结构",
      "最佳实践",
      "Factory Boy使用",
      "基础配置",
      "tests/factories/base_factory.py",
      "关系数据生成",
      "tests/factories/team_factory.py",
      "批量数据生成",
      "tests/factories/data_factory.py",
      "批量数据工厂",
      "Mock策略",
      "外部服务Mock",
      "tests/mock_helpers/mock_external_services.py",
      "Mock装饰器",
      "使用示例",
      "测试数据管理"
    ],
    "docs/testing/README.md": [
      "测试附录索引",
      "📚 附录文档索引",
      "[examples.md](./examples.md) — 完整测试用例示例",
      "[ci_config.md](./ci_config.md) — CI/CD 配置文件与本地模拟脚本",
      "[performance_tests.md](./performance_tests.md) — 性能与压力测试的完整代码与说明",
      "[fixtures_factories.md](./fixtures_factories.md) — 测试数据工厂与 fixtures 定义",
      "📁 目录结构"
    ],
    "docs/testing/performance_tests.md": [
      "性能测试方案",
      "📋 目录",
      "性能测试概述",
      "测试目标",
      "测试环境",
      "性能指标",
      "Locust性能测试",
      "基础配置",
      "locustfile.py",
      "自定义事件监听器",
      "测试场景",
      "test_scenarios.py",
      "测试执行",
      "run_performance_tests.py",
      "API基准测试",
      "HTTP性能测试",
      "api_benchmark.py",
      "监控与分析",
      "性能监控",
      "performance_monitor.py"
    ],
    "docs/testing/ci_config.md": [
      "CI/CD配置指南",
      "📋 目录",
      "GitHub Actions配置",
      "主工作流",
      ".github/workflows/main.yml",
      "PR检查工作流",
      ".github/workflows/pr-check.yml",
      "定时任务工作流",
      ".github/workflows/scheduled.yml",
      "部署工作流",
      ".github/workflows/deploy.yml",
      "覆盖率监控配置",
      "Codecov集成",
      "codecov.yml",
      "覆盖率报告生成",
      "scripts/generate_coverage_report.py",
      "Summary",
      "Module Coverage",
      "Recommendations",
      "覆盖率趋势分析"
    ],
    "docs/testing/examples.md": [
      "测试用例示例",
      "📋 目录",
      "单元测试示例",
      "数据库模型测试",
      "tests/unit/database/test_models_comprehensive.py",
      "调度器配置测试",
      "tests/unit/scheduler/test_celery_config_comprehensive.py",
      "数据处理函数测试",
      "tests/unit/data/processing/test_football_data_cleaner_comprehensive.py",
      "API路由测试",
      "tests/unit/api/test_health_comprehensive.py",
      "异步服务测试",
      "tests/unit/services/test_prediction_service_async.py",
      "集成测试示例",
      "数据库连接集成测试",
      "tests/integration/database/test_connection_integration.py",
      "Celery调度集成测试",
      "tests/integration/scheduler/test_celery_integration.py",
      "数据采集接口集成测试",
      "tests/integration/data/collectors/test_api_integration.py"
    ],
    "docs/archive/README_FEATURE_STORE_FIXES.md": [
      "🎉 特征存储测试问题修复完成",
      "📋 **您的问题已全部解决**",
      "✅ **问题 1: typeguard.TypeCheckError**",
      "✅ **问题 2: AssertionError (assert 0 == 1, assert None == 'logged')**",
      "🔧 **核心修复内容**",
      "🎯 **以 `test_register_features` 为例的修复要点**",
      "**修复前 ❌**",
      "问题1: Mock对象无属性",
      "问题2: 异步Mock错误",
      "问题3: 无日志验证",
      "**修复后 ✅**",
      "解决1: 完整Mock对象",
      "解决2: 正确异步Mock",
      "解决3: 日志验证",
      "🚀 **立即验证修复效果**",
      "运行修复版测试",
      "预期结果：所有9个测试通过 ✅",
      "📚 **关键修复原则**"
    ],
    "docs/archive/README_ASYNC_DB_TESTING.md": [
      "异步数据库测试解决方案",
      "🚀 快速开始",
      "📁 文件结构",
      "⚡ 立即修复",
      "第一步：修复主要问题",
      "❌ 错误",
      "✅ 正确",
      "第二步：验证修复",
      "📋 使用标准模板",
      "方法1：继承模板类",
      "在你的测试文件中",
      "方法2：直接使用fixture模式",
      "🎯 核心要点",
      "✅ 必须做的事情",
      "❌ 绝对不能做的事情",
      "📖 详细文档",
      "🔧 迁移现有测试",
      "识别需要修复的文件",
      "查找所有可能有问题的fixture",
      "查找缺少装饰器的异步测试"
    ],
    "docs/archive/分阶段优化方案_FootballPrediction.md": [
      "🎯 足球预测项目分阶段优化方案",
      "📊 项目现状分析",
      "✅ 项目优势",
      "🚨 紧急问题",
      "🎯 优化方案总体策略",
      "核心原则",
      "优化目标",
      "🚀 阶段1: 紧急修复 - CI绿灯保障 (2-3天)",
      "🎯 目标",
      "📋 执行计划",
      "Day 1: 代码风格修复 (6-8小时)",
      "阶段1.1: 环境准备和问题分析 (1小时)",
      "阶段1.2: 自动修复 (2-3小时)",
      "修复导入问题",
      "移除未使用导入",
      "格式化代码",
      "阶段1.3: 手动修复剩余问题 (2-3小时)",
      "逐文件修复F821、F841、E402等错误",
      "重点文件:",
      "- tests/conftest.py (导入冲突)"
    ],
    "docs/archive/README_STAGE1_2_IMPLEMENTATION.md": [
      "数据管道系统实现报告 - 阶段1&2",
      "📋 实现概述",
      "✅ 阶段1：数据采集框架 - 已完成",
      "1.1 采集器框架实现",
      "1.2 数据库表创建",
      "✅ 阶段2：数据存储与分层 - 已完成",
      "2.1 Bronze层原始数据表",
      "2.2 Gold层特征表扩展",
      "2.3 数据湖存储实现",
      "🔧 技术实现亮点",
      "1. 设计模式应用",
      "2. 数据质量保障",
      "3. 性能优化",
      "4. 监控与运维",
      "📊 实现指标",
      "🚀 接下来的阶段",
      "阶段3：数据清洗与标准化（待实现）",
      "阶段4：数据调度（待实现）",
      "阶段5：数据质量与安全（待实现）",
      "阶段6：数据使用接口（待实现）"
    ],
    "docs/archive/README_DOCKER.md": [
      "🐳 FootballPrediction Docker 部署指南",
      "🎯 快速开始",
      "1. 🚀 生产环境部署",
      "克隆项目",
      "配置环境变量",
      "编辑 .env 文件设置实际值",
      "启动生产环境",
      "访问应用",
      "2. 🛠️ 开发环境",
      "启动开发环境（支持热重载）",
      "查看服务状态",
      "访问开发工具",
      "🏗️ CI/CD 自动化",
      "GitHub Actions 工作流",
      "🔄 主要流水线 (`.github/workflows/ci.yml`)",
      "📦 发布流水线 (`.github/workflows/release.yml`)",
      "🐳 Docker镜像",
      "📋 可用命令",
      "Docker操作命令",
      "使用Makefile.docker中的命令"
    ],
    "docs/archive/COVERAGE_IMPROVEMENT_COMPREHENSIVE_PLAN.md": [
      "🚀 测试覆盖率全面提升方案",
      "📊 现状分析",
      "⚠️ 严重问题",
      "🔥 最低覆盖率模块（紧急处理）",
      "🎯 三阶段提升计划",
      "📅 阶段1：紧急修复核心模块 (第1-2周)",
      "1.1 API层核心测试",
      "1.2 数据处理层测试",
      "1.3 核心业务逻辑测试",
      "📅 阶段2：系统集成测试强化 (第3-4周)",
      "2.1 数据库层测试增强",
      "2.2 服务层测试完善",
      "2.3 监控和质量保证",
      "📅 阶段3：边界测试和质量优化 (第5-6周)",
      "3.1 边界和异常测试",
      "3.2 性能和安全测试",
      "3.3 端到端集成测试",
      "📋 实施细节",
      "🔧 测试框架和工具",
      "测试执行命令"
    ],
    "docs/archive/数据层符合性分析报告.md": [
      "数据层代码符合性分析报告",
      "📋 执行摘要",
      "✅ 高度符合的方面",
      "1. 数据库架构设计 (95/100)",
      "src/database/connection.py - 完全符合设计要求",
      "2. 数据模型设计 (90/100)",
      "src/database/base.py - 优秀的基础架构",
      "3. Silver层数据表 (85/100)",
      "核心表结构完全符合设计",
      "⚠️ 部分符合的方面",
      "4. 数据采集模块 (60/100)",
      "src/data/collectors/base_collector.py - 架构良好但未完全实现",
      "5. 数据清洗功能 (55/100)",
      "src/services/data_processing.py - 服务层实现",
      "❌ 不符合或缺失的方面",
      "6. Bronze层原始数据存储 (30/100)",
      "7. 数据调度系统 (20/100)",
      "src/scheduler/tasks.py - 基础框架存在",
      "但缺少具体的调度任务实现 ❌",
      "8. 数据质量监控 (25/100)"
    ],
    "docs/archive/COVERAGE_IMPROVEMENT_STRATEGIC_PLAN.md": [
      "🎯 测试覆盖率战略性提升计划",
      "📈 目标设定",
      "🔍 问题根因分析",
      "覆盖率最低的核心文件",
      "🚀 三阶段战略实施",
      "阶段1: 快速突破 (目标: 75%+) - 1-2天",
      "1.1 审计服务测试增强 (`audit_service.py`)",
      "需要补充的关键测试用例:",
      "1.2 模型训练测试增强 (`model_training.py`)",
      "需要补充的关键测试用例:",
      "阶段2: 稳固提升 (目标: 80%+) - 2-3天",
      "2.1 API层测试补强",
      "src/api/models.py (预期提升 +3-4%)",
      "src/api/data.py (预期提升 +3-4%)",
      "src/api/features.py (预期提升 +3-4%)",
      "2.2 数据库和工具类测试",
      "针对中等覆盖率文件进行精准补强:",
      "阶段3: 超越目标 (目标: 85%+) - 1天",
      "3.1 集成测试和边界测试补充",
      "3.2 测试质量提升"
    ],
    "docs/archive/数据层符合性分析报告_最新.md": [
      "足球预测系统数据层符合性分析报告",
      "📋 执行概要",
      "🎯 总体评估",
      "1. 数据获取（抓取/采集）模块分析 ✅ **符合度：95%**",
      "✅ 已完全实现的功能",
      "1.1 数据采集器架构",
      "1.2 防重复与防丢失机制",
      "已实现的防重复策略",
      "已实现的防丢失策略",
      "1.3 采集日志系统",
      "⚠️ 需要改进的方面",
      "2. 数据存储（分层架构）模块分析 ✅ **符合度：92%**",
      "✅ 已完全实现的分层存储",
      "2.1 Bronze层（原始数据）",
      "2.2 Silver层（清洗数据）",
      "2.3 Gold层（分析特征）",
      "2.4 数据湖存储",
      "✅ 数据库设计优势",
      "3. 数据清洗（质检与标准化）模块分析 ✅ **符合度：88%**",
      "✅ 已完全实现的清洗功能"
    ],
    "docs/archive/COVERAGE_SUCCESS.md": [],
    "docs/archive/STAGE1_RESULTS_SUMMARY.md": [
      "🎉 阶段1: 最小核心回归测试 - 结果总结",
      "📊 **测试结果概览**",
      "🎯 **关键发现**",
      "✅ **核心技术问题已全面修复**",
      "📋 **当前统一错误状态**",
      "🚀 **下一步建议**",
      "**阶段2: 扩展模块测试**",
      "🔍 测试 2.1: 特征存储模块测试",
      "🔍 测试 2.2: 数据库模型集成测试",
      "🔍 测试 2.3: 数据库性能优化测试",
      "**阶段3: 完整测试套件验证**",
      "渐进式完整测试（限制失败数量）",
      "如果大部分通过，尝试 make test",
      "🔧 **Mock数据/环境检查建议**",
      "**检查测试数据**",
      "查找测试数据文件",
      "检查fixture数据",
      "**检查环境配置**",
      "检查测试环境变量",
      "检查测试配置文件"
    ],
    "docs/archive/README_TESTS.md": [
      "足球预测系统测试框架",
      "概述",
      "测试架构",
      "三层测试架构",
      "核心测试组件",
      "1. 单元测试 (Unit Tests)",
      "test_data_cleaner.py",
      "test_database_manager.py",
      "test_feature_store.py",
      "2. 集成测试 (Integration Tests)",
      "test_data_pipeline.py",
      "test_scheduler.py",
      "test_cache_consistency.py",
      "3. 端到端测试 (E2E Tests)",
      "test_api_predictions.py",
      "test_lineage_tracking.py",
      "test_backtest_accuracy.py",
      "配置文件",
      "pytest.ini",
      "conftest.py"
    ],
    "docs/archive/COVERAGE_IMPROVEMENT_PLAN.md": [
      "📊 测试覆盖率提升方案",
      "🎯 当前状态分析",
      "✅ 总体覆盖率状态",
      "🔍 低覆盖率模块分析",
      "📋 未覆盖的关键代码行",
      "1. API Health 模块 (`src/api/health.py`)",
      "2. 数据库连接模块 (`src/database/connection.py`)",
      "3. Odds 模型 (`src/database/models/odds.py`)",
      "🚀 覆盖率提升方案",
      "阶段1：高优先级模块提升 (目标：覆盖率提升到85%)",
      "1. API Health 模块测试增强",
      "2. 数据库连接模块测试补强",
      "3. 模型复杂方法测试",
      "阶段2：边界情况和异常处理 (目标：覆盖率提升到87%)",
      "测试场景设计",
      "阶段3：集成测试增强 (目标：覆盖率稳定在88%+)",
      "系统集成测试",
      "📈 实施计划",
      "第1周：基础覆盖率提升",
      "第2周：模型方法完善"
    ],
    "docs/reports_archive/QUALITY_REPORT.md": [
      "📊 项目质量检查状态报告",
      "✅ 已完成的工作",
      "1. 环境和上下文加载",
      "2. Git 工作流合规",
      "3. 已修复的关键问题",
      "4. 代码格式和风格",
      "⚠️ 发现的问题",
      "类型检查状态",
      "主要问题文件",
      "🎯 下一步行动计划",
      "优先级1 - 立即处理",
      "优先级2 - 中期处理",
      "优先级3 - 长期改进",
      "🚀 CI状态",
      "📋 项目规则合规性"
    ],
    "docs/reports_archive/DATABASE_CONFIG_FIXES_REPORT.md": [
      "数据库与配置修复完成报告",
      "📋 任务完成状态",
      "1. 修复 JSONB 与 SQLite 兼容问题",
      "新增类型定义",
      "在模型中使用",
      "2. 完善 PostgreSQL Docker Compose 配置",
      "3. 数据库初始化脚本",
      "4. 持久化存储配置",
      "5. Alembic 迁移与模型一致性",
      "6. 分区表和索引实现",
      "🔧 新增和修改的文件清单",
      "新增文件",
      "修改文件",
      "📊 Alembic 迁移信息",
      "新增迁移ID和SQL片段",
      "关键SQL片段",
      "🧪 本地验证结果",
      "基础功能验证",
      "发现的问题和解决方案",
      "🎯 部署建议"
    ],
    "docs/reports_archive/PRODUCTION_DEPLOYMENT_MONITORING_COMPLETION_REPORT.md": [
      "🎉 生产部署与监控完成报告",
      "📋 任务完成情况总览",
      "✅ Docker 部署方案完善",
      "✅ 监控与告警系统",
      "✅ API文档与测试完善",
      "✅ 端到端验证流程",
      "📁 修改或新增的文件清单",
      "🆕 新增文件",
      "🔄 修改文件",
      "🔍 指标导出器验证输出",
      "核心指标分类:",
      "🖥️ Docker 启动日志和服务健康状态",
      "一键启动脚本功能",
      "启动命令",
      "包含的服务启动顺序：",
      "服务健康检查状态",
      "📈 Grafana 看板配置说明",
      "核心监控仪表板: `prediction_performance_dashboard.json`",
      "🔍 最终端到端预测流程验证结果",
      "验证脚本执行摘要"
    ],
    "docs/reports_archive/STAGE6_COMPLETION_REPORT.md": [
      "阶段六：预测反馈闭环与自动迭代 - 完成报告",
      "📋 任务完成概览",
      "✅ 全部任务已完成",
      "🔄 任务1：预测结果反馈机制",
      "实现功能",
      "核心特性",
      "核心类",
      "Makefile集成",
      "📊 任务2：模型评估报表生成",
      "实现功能",
      "核心特性",
      "核心类",
      "报表内容",
      "Makefile集成",
      "🤖 任务3：自动重训练管道",
      "实现功能",
      "核心特性",
      "核心类",
      "配置参数",
      "Makefile集成"
    ],
    "docs/reports_archive/OPTIMIZATION_REPORT.md": [
      "项目存储优化报告",
      "优化日期",
      "优化内容",
      "🗂️ 存储空间优化",
      "📊 优化成果",
      "✅ 质量保证",
      "🛠️ 技术实施",
      "优化后项目状态"
    ],
    "docs/reports_archive/COVERAGE_IMPROVEMENT_FINAL_REPORT.md": [
      "📊 测试覆盖率提升最终报告",
      "🎯 任务完成情况",
      "✅ 已完成工作",
      "1. 深度分析 (100% 完成)",
      "2. 策略制定 (100% 完成)",
      "3. 测试用例开发 (100% 完成)",
      "新增测试文件：",
      "测试内容覆盖：",
      "4. 测试架构优化 (100% 完成)",
      "📈 预期改进效果",
      "覆盖率提升预估",
      "质量提升预期",
      "🔍 测试覆盖深度",
      "🛡️ 问题预防能力",
      "🚀 实施指南",
      "立即执行命令",
      "1. 语法检查所有新测试文件",
      "2. 运行新增测试 (如果环境允许)",
      "3. 生成新的覆盖率报告",
      "4. 对比覆盖率提升"
    ],
    "docs/reports_archive/STAGE3_PROGRESS_REPORT.md": [
      "🚀 Football Prediction 项目阶段3优化任务进度报告",
      "📋 任务概述",
      "✅ 已完成的任务",
      "1. Makefile type-check 规则集成 ✅",
      "2. 大幅减少 Lint 错误 ✅",
      "3. 系统性导入问题修复 ✅",
      "3.1 文档字符串内错误导入修复",
      "3.2 模块导入路径修复",
      "4. 测试基础设施改善 ✅",
      "5. E402/E303 导入顺序问题修复 ✅",
      "🟡 当前状态",
      "Lint 错误分析",
      "主要剩余问题类型：",
      "MyPy 类型检查状态：",
      "📊 成果统计",
      "🎯 下阶段建议",
      "高优先级剩余任务：",
      "🏆 阶段3优化任务评估",
      "✅ 已达成目标：",
      "🟡 部分达成："
    ],
    "docs/reports_archive/PROBLEM_RESOLUTION_REPORT.md": [
      "🔧 Football Prediction 项目问题修复报告",
      "📋 修复概述",
      "✅ 已修复的问题",
      "1. **E402 模块导入错误** 🐛",
      "2. **MyPy 类型检查错误** 🔍",
      "3. **Feature Calculator 测试失败** 🧪",
      "4. **Metadata Manager 测试失败** 🗃️",
      "5. **代码格式和导入规范** 📝",
      "📊 项目健康状态",
      "🔧 技术细节",
      "修复前问题统计",
      "修复后状态",
      "🎯 质量门禁达标情况",
      "📝 遵循的开发规范",
      "🚀 后续建议",
      "📋 验证命令",
      "激活环境并加载上下文",
      "验证代码质量",
      "验证关键测试",
      "📅 修复时间线"
    ],
    "docs/reports_archive/TEST_ARCHITECTURE_REFACTOR_REPORT.md": [
      "📋 足球预测系统测试套件重构完成报告",
      "📖 项目信息",
      "🎯 重构目标完成情况",
      "✅ 已完成任务",
      "📊 重构成果统计",
      "🏗️ 测试架构改进详情",
      "1️⃣ Docker测试环境优化",
      "📂 `docker-compose.test.yml` 重构",
      "轻量级Alpine镜像",
      "2️⃣ 单元测试架构重构",
      "📝 `tests/unit/test_data_collectors.py` 新架构",
      "3️⃣ 集成测试体系构建",
      "📂 `tests/integration/test_bronze_silver_gold_flow.py` 新增",
      "4️⃣ 端到端测试完善",
      "📂 `tests/e2e/test_complete_prediction_workflow.py` 新增",
      "5️⃣ 测试配置规范化",
      "📂 `pytest.ini` 配置优化",
      "pytest 配置文件 - 符合TEST_STRATEGY.md测试规范",
      "测试标记定义 - 符合三层测试架构",
      "📈 测试质量提升成果"
    ],
    "docs/reports_archive/MARSHMALLOW_WARNING_RESOLUTION_REPORT.md": [
      "Marshmallow 警告问题解决报告",
      "📋 问题描述",
      "✅ 解决方案实施",
      "1. 创建专门的警告过滤模块",
      "2. 在应用启动时设置警告过滤器",
      "3. 测试环境警告抑制",
      "4. 脚本级别警告抑制",
      "🎯 达成效果",
      "✅ 成功实现的目标",
      "📍 当前状态",
      "🔧 技术实现细节",
      "警告过滤策略",
      "精确匹配Marshmallow 4警告",
      "多层次防护",
      "🚀 未来升级路径",
      "📊 验证命令",
      "📝 注意事项"
    ],
    "docs/reports_archive/CI_SUCCESS_REPORT.md": [
      "CI Green Light Verification",
      "📋 问题分析",
      "🔧 解决措施",
      "✅ 最终结果"
    ],
    "docs/reports_archive/QUALITY_IMPROVEMENT_COMPLETION_REPORT.md": [
      "🎯 质量改进工程师任务完成报告",
      "📋 任务执行摘要",
      "✅ 任务完成情况",
      "1. 🎨 代码风格修复 - ✅ **完成**",
      "2. 🔒 安全漏洞修复 - ✅ **完成**",
      "3. 📊 测试覆盖率提升 - ✅ **显著改进**",
      "4. 🚀 CI验证 - 🔄 **进行中**",
      "📈 具体改进成果",
      "代码质量提升",
      "安全性加强",
      "测试覆盖率详情",
      "运行的测试文件",
      "🛠️ 使用的工具和技术",
      "代码质量工具",
      "安全扫描工具",
      "测试和覆盖率工具",
      "🎯 遗留工作和建议",
      "覆盖率进一步提升",
      "长期质量维护",
      "📊 项目健康度评估"
    ],
    "docs/reports_archive/PROBLEM_STATUS_FINAL_REPORT.md": [
      "🔍 问题解决状况最终确认报告",
      "📊 **问题解决状况总览**",
      "✅ **已完全解决的问题**",
      "**1. typeguard.TypeCheckError: argument \"entities\" did not match any element in the union**",
      "**2. AssertionError: assert None == 'logged' 和 assert 0 == 1**",
      "**3. API 500错误中的Mock配置问题**",
      "**4. 异步数据库fixture问题**",
      "**5. 模型字段名TypeError**",
      "🔄 **部分解决/仍存在的问题**",
      "**原始测试文件中的Mock对象问题**",
      "🎯 **统一的剩余问题**",
      "**核心问题: 数据库连接**",
      "📋 **Make Test 状态**",
      "**当前状态**: 🟡 **部分运行**",
      "快速检查显示make test已经开始运行",
      "🚀 **下一步行动建议**",
      "**立即可执行的验证**",
      "1. 完整运行make test（设置合理超时）",
      "2. 如果仍有失败，运行分类测试",
      "**如果需要数据库连接**"
    ],
    "docs/reports_archive/QA_VERIFICATION_REPORT.md": [
      "🛡️ 足球预测系统 - QA验证报告",
      "📊 验证概览",
      "🔍 详细验证结果",
      "1️⃣ 环境配置验证 ✅",
      "2️⃣ 数据库模块验证 ⚠️",
      "3️⃣ 数据采集模块验证 ✅",
      "4️⃣ 数据清洗模块验证 ✅",
      "5️⃣ 特征计算模块验证 ✅",
      "6️⃣ 模型预测模块验证 ✅",
      "7️⃣ API服务模块验证 ✅",
      "8️⃣ 端到端集成验证 ✅",
      "🐛 发现的问题",
      "严重问题 (需要修复)",
      "一般问题 (建议修复)",
      "改进建议",
      "🎯 验证结论",
      "✅ 系统功能已打通项目",
      "⚠️ 需要完善的项目",
      "📈 最终评估",
      "🚀 总体结论"
    ],
    "docs/reports_archive/EXTERNAL_DEPENDENCIES_COMPLETION_REPORT.md": [
      "🎉 外部依赖与服务集成完成报告",
      "📋 任务完成情况",
      "✅ Feast 特征存储配置",
      "✅ MLflow 服务配置",
      "✅ 依赖管理优化",
      "📁 修改或新增的文件清单",
      "🆕 新增文件",
      "🔄 修改文件",
      "🔍 Feast 特征注册验证输出",
      "🖥️ MLflow UI 运行说明",
      "启动命令",
      "启动所有服务（包括 MLflow）",
      "单独启动 MLflow 相关服务",
      "访问地址",
      "验证步骤",
      "📦 更新后的 requirements.txt 关键片段",
      "数据处理和机器学习",
      "特征仓库 - Feast支持",
      "任务调度和cron表达式解析",
      "数据验证和配置"
    ]
  },
  "images": [
    {
      "src": "docs/CI_REPORT.md",
      "img": "assets/coverage_trend.png",
      "resolved": "docs/assets/coverage_trend.png"
    },
    {
      "src": "docs/testing/performance_tests.md",
      "img": "performance_trend.png",
      "resolved": "docs/testing/performance_trend.png"
    }
  ]
}