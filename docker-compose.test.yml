version: '3.8'

# 集成测试专用 Docker Compose 配置
# 用于运行集成测试和 E2E 测试
# 使用方式：
# - 启动测试环境：docker-compose -f docker-compose.test.yml up -d
# - 运行集成测试：docker-compose -f docker-compose.test.yml exec app pytest tests/integration/
# - 运行 E2E 测试：docker-compose -f docker-compose.test.yml exec app pytest tests/e2e/

services:
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    env_file:
      - ./docker/environments/.env.test
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ../src:/app/src:rw
      - ../tests:/app/tests:rw
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql+asyncpg://test_user:test_pass@db:5432/football_test
      - REDIS_URL=redis://redis:6379/1
      - KAFKA_BROKER=kafka:9092
      - KAFKA_TOPIC_PREFIX=test_
      - TEST_ENV=integration
      - LOG_LEVEL=DEBUG
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: football_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5433:5432"  # 使用不同端口避免冲突
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ../scripts/init-test-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d football_test"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"  # 使用不同端口避免冲突
    volumes:
      - redis_test_data:/data
    command: redis-server --appendonly yes --requirepass test_pass
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_test_data:/var/lib/zookeeper/data
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9093:9092"  # 使用不同端口避免冲突
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 1
      KAFKA_LOG_RETENTION_BYTES: 1073741824
    volumes:
      - kafka_test_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    restart: unless-stopped

  # MLflow 测试服务
  mlflow:
    image: python:3.11-slim
    ports:
      - "5001:5000"
    volumes:
      - mlflow_test_data:/mlflow
    command: >
      bash -c "
        pip install mlflow psycopg2-binary &&
        mlflow server
        --host 0.0.0.0
        --port 5000
        --backend-store-uri postgresql://test_user:test_pass@db:5432/football_test
        --default-artifact-root /mlflow/artifacts
      "
    environment:
      - DATABASE_URL=postgresql://test_user:test_pass@db:5432/football_test
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  # Nginx 测试配置
  nginx:
    image: nginx:alpine
    ports:
      - "81:80"  # 使用不同端口避免冲突
    volumes:
      - ./nginx/test.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # 测试数据初始化服务
  test-data-init:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    env_file:
      - ./docker/environments/.env.test
    volumes:
      - ../scripts:/app/scripts:ro
      - ../src:/app/src:ro
    command: >
      bash -c "
        python scripts/load_test_data.py --env=test &&
        python scripts/init_test_kafka_topics.py &&
        echo 'Test data initialized successfully'
      "
    environment:
      - DATABASE_URL=postgresql+asyncpg://test_user:test_pass@db:5432/football_test
      - REDIS_URL=redis://:test_pass@redis:6379/1
      - KAFKA_BROKER=kafka:9092
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: "no"

volumes:
  postgres_test_data:
  redis_test_data:
  kafka_test_data:
  zookeeper_test_data:
  mlflow_test_data:

networks:
  default:
    name: football-test-network
    driver: bridge