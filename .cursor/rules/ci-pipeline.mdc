# CI/CD 流水线规范

## 🔄 流水线阶段

- **代码检查**: 风格检查、语法检查、类型检查
- **安全扫描**: 依赖漏洞检查、代码安全审计
- **测试执行**: 单元测试、集成测试、覆盖率检查
- **构建验证**: 应用构建、Docker镜像构建
- **部署准备**: 环境配置、依赖安装验证

## ✅ 质量门禁标准

- **代码风格**: 通过black、flake8检查，无风格问题
- **类型检查**: 通过mypy检查，无类型错误
- **测试覆盖**: 覆盖率>=80%，所有测试通过
- **安全检查**: 无高危安全漏洞
- **构建成功**: 应用能够正常构建和启动

## 🛡️ 安全检查要求

- **依赖扫描**: 使用safety检查依赖包漏洞
- **密码检测**: 使用truffleHog扫描泄露的密码
- **代码审计**: 使用bandit进行Python安全审计
- **许可证检查**: 确保依赖包许可证兼容
- **环境变量**: 敏感信息使用环境变量，不硬编码

## 🚀 自动化要求

- **PR检查**: 每个Pull Request必须通过CI检查
- **主分支保护**: main分支不允许直接推送
- **自动测试**: 代码变更触发自动化测试
- **部署流程**: 通过CI验证后才能部署
- **回滚机制**: 部署失败时自动回滚

## 📊 监控指标

- **构建时间**: 单次CI运行时间<10分钟
- **成功率**: CI通过率>95%
- **测试稳定性**: 测试失败率<5%
- **部署频率**: 支持每日多次部署
- **修复时间**: 问题发现到修复<4小时

## 🔧 工具集成

- **GitHub Actions**: 主要CI/CD平台
- **pre-commit**: 本地提交前检查
- **Docker**: 容器化构建和部署
- **pytest**: 测试框架和覆盖率
- **🐳 ci-verify.sh**: 本地Docker环境CI模拟脚本
- **SonarQube**: 代码质量分析（可选）

## 🐳 本地CI模拟要求

- **推送前验证**: 执行`./ci-verify.sh`验证代码在真实Docker环境的兼容性
- **环境一致性**: 本地Docker环境与GitHub Actions CI环境保持一致
- **依赖验证**: 验证requirements.lock中的依赖在CI环境中正常安装
- **数据库测试**: 在PostgreSQL和Redis服务下运行完整测试套件
