# Python 编程规范

## 🎯 核心原则
- **修改优先**: 不随意创建新文件，优先修改已有文件
- **模块化设计**: 每个文件功能单一，避免"巨石文件"
- **详细注释**: 所有生成代码必须带详细中文注释
- **结构化输出**: 使用表格、目录结构等结构化格式

## 📝 命名规范
- **变量和函数**: snake_case (user_name, get_user_info)
- **类名**: PascalCase (UserService, DataProcessor)
- **常量**: UPPER_SNAKE_CASE (MAX_RETRY_COUNT, API_BASE_URL)
- **私有成员**: 前缀下划线 (_validate_data)
- **文件名**: 小写字母加下划线 (user_service.py)

## 🏗️ 架构原则
- **单一职责**: 每个函数/类只负责一个明确功能
- **依赖注入**: 通过参数传递依赖，避免全局状态
- **异常处理**: 使用具体异常类型，提供清晰错误信息
- **类型注解**: 所有公共接口必须有完整类型注解
- **文档字符串**: 使用Google风格docstring

## 📦 目录结构要求
- **源代码**: 必须在`src/`目录下
- **测试代码**: 必须在`tests/`目录下
- **核心逻辑**: 放在`src/core/`
- **服务层**: 放在`src/services/`
- **工具函数**: 放在`src/utils/`

## 🔧 代码风格
- **格式化**: 使用black格式化所有Python代码
- **行长度**: 最大88字符（black默认）
- **导入顺序**: 标准库 → 第三方 → 本地模块，各组间空行分隔
- **字符串**: 优先使用双引号，文档字符串使用三重双引号

## ✅ 质量检查
- **静态分析**: 代码必须通过flake8、mypy检查
- **测试覆盖**: 新代码必须有对应单元测试，覆盖率>=80%
- **代码审查**: 遵循项目代码审查流程
- **提交检查**: 使用pre-commit钩子确保代码质量
