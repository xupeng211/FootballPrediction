# AI开发规则

## 🎯 工具优先原则

- 🔧 **工具优先**: 建议通过Makefile执行脚本和命令以确保一致性
- 📋 **文档先行**: 开始工作前建议阅读相关文档了解项目上下文
- 🔧 **环境管理**: 建议在虚拟环境中进行开发操作

## 🚀 标准开发启动流程

1. **环境检查**: `make env-check` - 验证开发环境
2. **加载上下文**: `make context` - 加载项目上下文（⭐ 最重要）
3. **选择工具**: 根据任务选择适当的make命令
4. **质量检查**: `make ci` - 确保代码质量

## 📁 目录规范要求

- **源代码**: 必须放在`src/`目录
- **测试代码**: 必须放在`tests/`目录
- **API层**: `src/api/` - FastAPI接口层
- **数据层**: `src/database/` - 数据库模型和连接
- **业务逻辑**: `src/services/` - 业务服务层
- **工具函数**: `src/utils/` - 通用工具函数
- **监控层**: `src/monitoring/` - 监控和指标收集
- **模型层**: `src/models/` - 机器学习模型
## ✅ 代码质量标准

- **测试覆盖率**: >= 50% (CI环境), >= 20% (本地开发)
- **类型注解**: 所有公共接口必须有完整类型注解
- **代码注释**: 生成的代码应包含清晰的注释
- **异常处理**: 必须处理异常和边界情况

## 🔄 提交前检查流程

1. `make lint` - 代码风格检查
2. `make test` - 运行测试套件
3. `make type-check` - 类型检查
4. `make prepush` - 完整提交前检查
5. **🐳 Docker CI模拟**: `./ci-verify.sh` - 模拟GitHub Actions环境

## 🛡️ 建议避免的操作

- 绕过Makefile直接运行脚本（可能导致环境不一致）
- 跳过CI流程检查（可能引入质量问题）
- 修改核心功能时不写测试（增加维护风险）
- 在main分支直接开发（建议使用feature分支）
- 在关键接口使用`any`类型注解（降低类型安全性）
