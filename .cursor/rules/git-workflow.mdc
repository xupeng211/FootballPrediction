# Git 工作流规范

## 🌿 分支策略
- **主分支**: `main` - 生产就绪代码，受保护不允许直接推送
- **开发分支**: `develop` - 集成开发中的特性
- **特性分支**: `feature/功能描述` - 新功能开发
- **修复分支**: `hotfix/问题描述` - 紧急bug修复
- **发布分支**: `release/版本号` - 发布前准备

## 📝 提交信息格式
使用Conventional Commits规范：
```
<类型>[可选范围]: <描述>

[可选正文]

[可选脚注]
```

### 提交类型
- **feat**: 新功能
- **fix**: bug修复
- **docs**: 文档更新
- **style**: 格式调整（不影响代码运行）
- **refactor**: 重构（不是新增功能，也不是修改bug）
- **test**: 增加测试
- **chore**: 构建过程或辅助工具的变动

## 🔄 工作流程
1. **创建分支**: 从`develop`创建`feature/功能名`分支
2. **本地开发**: 频繁提交，保持提交粒度适中
3. **质量检查**: `make prepush` 进行完整检查
4. **🐳 CI模拟**: `./ci-verify.sh` 在Docker环境中验证CI兼容性
5. **推送代码**: 推送到远程分支
6. **创建PR**: 提交Pull Request到`develop`分支
7. **代码审查**: 等待团队审查和反馈
8. **合并代码**: 审查通过后合并到目标分支

## ✅ 提交前检查
- 运行`make lint`确保代码风格符合规范
- 运行`make test`确保所有测试通过
- 运行`make type-check`进行类型检查
- **🐳 运行`./ci-verify.sh`进行Docker环境CI模拟**：完全模拟GitHub Actions CI环境
- 检查是否有未提交的调试代码或临时文件

## 🚫 禁止操作
- 直接推送到`main`分支
- 强制推送（`git push --force`）到共享分支
- 提交包含密码或敏感信息的代码
- 合并时不删除已合并的特性分支
- 提交信息使用中文或不规范格式
