"""中间件工具测试"""

# 可选依赖导入
try:
    from src.dependencies.optional import *
except ImportError:
    pass

import pytest
from unittest.mock import Mock
from src.middleware.i18n import I18nMiddleware
from src.middleware.performance_monitoring import PerformanceMonitoringMiddleware


class TestMiddlewareUtils:
    """测试中间件工具"""

    def test_i18n_middleware_creation(self):
        """测试国际化中间件创建"""
        middleware = I18nMiddleware()
        assert middleware is not None

    def test_performance_middleware_creation(self):
        """测试性能监控中间件创建"""
        middleware = PerformanceMonitoringMiddleware()
        assert middleware is not None

    def test_middleware_initialization(self):
        """测试中间件初始化"""
        middleware = I18nMiddleware()

        # Mock应用
        app = Mock()
        middleware.init_app(app)

        app.add_middleware.assert_called_once()

    def test_performance_monitoring(self):
        """测试性能监控"""
        middleware = PerformanceMonitoringMiddleware()

        # Mock请求和响应
        request = Mock()
        request.method = "GET"
        request.url.path = "/api/test"

        response = Mock()
        response.status_code = 200

        # Mock监控方法
        middleware.record_request = Mock()
        middleware.record_response_time = Mock()

        # 记录指标
        middleware.record_request(request)
        middleware.record_response_time(request, response, 0.1)

        middleware.record_request.assert_called_once_with(request)
        middleware.record_response_time.assert_called_once_with(request, response, 0.1)

    def test_i18n_translation(self):
        """测试国际化翻译"""
        middleware = I18nMiddleware()

        # Mock翻译方法
        middleware.translate = Mock(return_value="Translated text")

        # 测试翻译
        result = middleware.translate("Hello", locale="zh")
        assert result == "Translated text"

    def test_middleware_metrics(self):
        """测试中间件指标"""
        middleware = PerformanceMonitoringMiddleware()

        # Mock指标
        middleware.get_metrics = Mock(
            return_value={
                "total_requests": 1000,
                "average_response_time": 0.05,
                "error_rate": 0.01,
            }
        )

        metrics = middleware.get_metrics()

        assert metrics["total_requests"] == 1000
        assert metrics["average_response_time"] == 0.05
        assert metrics["error_rate"] == 0.01
