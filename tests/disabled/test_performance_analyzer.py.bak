"""
性能分析器测试
Performance Analyzer Tests
"""

# 可选依赖导入
try:
    from src.dependencies.optional import *
except ImportError:
    pass

import pytest
from datetime import datetime, timedelta
from unittest.mock import Mock, patch
from typing import Dict, Any, List

from src.performance.analyzer import (
    PerformanceAnalyzer,
    PerformanceInsight,
    PerformanceTrend,
    PerformanceRecommendation,
)


class TestPerformanceInsight:
    """性能洞察测试类"""

    def test_init(self):
        """测试初始化"""
        insight = PerformanceInsight(
            category="api",
            severity="high",
            title="Slow API Response",
            description="API response time exceeded threshold",
            impact="Users experiencing delays",
            recommendation="Optimize database queries",
            metrics={"response_time": 2.5},
            threshold=1.0,
        )

        assert insight.category == "api"
        assert insight.severity == "high"
        assert insight.title == "Slow API Response"
        assert insight.impact == "Users experiencing delays"
        assert insight.metrics["response_time"] == 2.5

    def test_to_dict(self):
        """测试转换为字典"""
        insight = PerformanceInsight(
            category="database",
            severity="critical",
            title="Database Connection Pool Exhausted",
            description="All database connections are in use",
            impact="Application cannot process new requests",
            recommendation="Increase connection pool size",
            metrics={"active_connections": 20, "pool_size": 20},
            threshold=18,
        )

        result = insight.to_dict()

        assert result["category"] == "database"
        assert result["severity"] == "critical"
        assert result["title"] == "Database Connection Pool Exhausted"
        assert result["metrics"]["active_connections"] == 20
        assert isinstance(result["timestamp"], str)


class TestPerformanceTrend:
    """性能趋势测试类"""

    def test_init(self):
        """测试初始化"""
        now = datetime.now()
        trend = PerformanceTrend(
            metric="response_time",
            time_range="1h",
            trend_direction="increasing",
            change_rate=0.2,
            current_value=1.5,
            predicted_value=2.0,
            confidence=0.85,
            data_points=[
                {"timestamp": now - timedelta(minutes=30), "value": 1.2},
                {"timestamp": now, "value": 1.5},
            ],
        )

        assert trend.metric == "response_time"
        assert trend.trend_direction == "increasing"
        assert trend.change_rate == 0.2
        assert trend.current_value == 1.5
        assert trend.predicted_value == 2.0
        assert trend.confidence == 0.85
        assert len(trend.data_points) == 2

    def test_to_dict(self):
        """测试转换为字典"""
        now = datetime.now()
        trend = PerformanceTrend(
            metric="memory_usage",
            time_range="24h",
            trend_direction="stable",
            change_rate=0.01,
            current_value=100.0,
            predicted_value=101.0,
            confidence=0.95,
            data_points=[
                {"timestamp": now - timedelta(hours=12), "value": 99.5},
                {"timestamp": now, "value": 100.0},
            ],
        )

        result = trend.to_dict()

        assert result["metric"] == "memory_usage"
        assert result["trend_direction"] == "stable"
        assert result["current_value"] == 100.0
        assert result["predicted_value"] == 101.0
        assert len(result["data_points"]) == 2
        # 时间戳应该被序列化为字符串
        assert isinstance(result["data_points"][0]["timestamp"], str)


class TestPerformanceRecommendation:
    """性能建议测试类"""

    def test_init(self):
        """测试初始化"""
        recommendation = PerformanceRecommendation(
            title="Increase Database Connection Pool",
            description="Database connection pool is frequently exhausted",
            priority="high",
            estimated_impact="30% reduction in request timeouts",
            implementation_complexity="low",
            code_example="# Increase pool size\ndatabase.pool_size = 30",
            references=["https://example.com/connection-pooling"],
        )

        assert recommendation.title == "Increase Database Connection Pool"
        assert recommendation.priority == "high"
        assert recommendation.estimated_impact == "30% reduction in request timeouts"
        assert recommendation.implementation_complexity == "low"
        assert recommendation.code_example is not None
        assert recommendation.references == ["https://example.com/connection-pooling"]

    def test_to_dict(self):
        """测试转换为字典"""
        recommendation = PerformanceRecommendation(
            title="Add Redis Caching",
            description="Frequent queries for static data",
            priority="medium",
            estimated_impact="50% faster response times",
            implementation_complexity="medium",
            code_example="cache.set(key, value, ttl=3600)",
            references=[],
        )

        result = recommendation.to_dict()

        assert result["title"] == "Add Redis Caching"
        assert result["priority"] == "medium"
        assert result["estimated_impact"] == "50% faster response times"
        assert result["implementation_complexity"] == "medium"
        assert result["code_example"] == "cache.set(key, value, ttl=3600)"


class TestPerformanceAnalyzer:
    """性能分析器主类测试"""

    def setup_method(self):
        """每个测试方法前的设置"""
        self.analyzer = PerformanceAnalyzer()

    def test_init(self):
        """测试初始化"""
        assert isinstance(self.analyzer.insights, list)
        assert isinstance(self.analyzer.trends, list)
        assert self.analyzer.baseline_metrics is None

    def test_analyze_api_performance(self):
        """测试分析API性能"""
        # 模拟API统计数据
        api_stats = {
            "/api/users": {
                "request_count": 1000,
                "total_duration": 50.0,
                "average_duration": 0.05,
                "status_codes": {200: 900, 404: 50, 500: 50},
            },
            "/api/slow": {
                "request_count": 100,
                "total_duration": 100.0,
                "average_duration": 1.0,
                "status_codes": {200: 80, 500: 20},
            },
        }

        insights = self.analyzer.analyze_api_performance(api_stats)

        # 应该检测到慢端点
        assert len(insights) > 0
        slow_endpoint_found = any(
            insight.severity == "high" and "slow" in insight.title.lower()
            for insight in insights
        )
        assert slow_endpoint_found

        # 检查错误率洞察
        error_insight_found = any(
            "error" in insight.title.lower() or insight.severity == "medium"
            for insight in insights
        )
        assert error_insight_found

    def test_analyze_database_performance(self):
        """测试分析数据库性能"""
        # 模拟数据库统计
        db_stats = {
            "total_queries": 10000,
            "query_types": {
                "SELECT": {"count": 8000, "average_time": 0.01, "error_rate": 0.01},
                "INSERT": {"count": 1000, "average_time": 0.05, "error_rate": 0.05},
                "UPDATE": {"count": 500, "average_time": 0.15, "error_rate": 0.02},
            },
            "slow_queries": [
                {"query": "SELECT * FROM large_table", "duration": 2.0},
                {"query": "UPDATE heavy_table SET data = ?", "duration": 1.5},
            ],
        }

        insights = self.analyzer.analyze_database_performance(db_stats)

        # 应该检测到慢查询
        assert len(insights) > 0
        slow_query_found = any("slow" in insight.title.lower() for insight in insights)
        assert slow_query_found

        # 检查错误率洞察
        high_error_insight_found = any(
            insight.severity == "high" and "error" in insight.title.lower()
            for insight in insights
        )
        assert high_error_insight_found

    def test_analyze_cache_performance(self):
        """测试分析缓存性能"""
        # 模拟缓存统计
        cache_stats = {
            "hit_rate": 0.6,  # 60%命中率，较低
            "total_requests": 10000,
            "hits": 6000,
            "misses": 4000,
            "average_hit_time": 0.001,
            "average_set_time": 0.01,
        }

        insights = self.analyzer.analyze_cache_performance(cache_stats)

        # 应该检测到低命中率
        assert len(insights) > 0
        low_hit_rate_found = any(
            "hit rate" in insight.title.lower() or insight.severity == "medium"
            for insight in insights
        )
        assert low_hit_rate_found

    def test_analyze_memory_performance(self):
        """测试分析内存性能"""
        # 模拟内存统计
        memory_data = {
            "current_usage": 800.0,  # MB
            "peak_usage": 900.0,
            "available_memory": 200.0,
            "total_memory": 1024.0,
            "usage_percent": 80.0,
            "trend": "increasing",
            "samples": [
                {"timestamp": datetime.now() - timedelta(minutes=10), "value": 700},
                {"timestamp": datetime.now(), "value": 800},
            ],
        }

        insights = self.analyzer.analyze_memory_performance(memory_data)

        # 应该检测到高内存使用
        assert len(insights) > 0
        high_memory_found = any(
            "memory" in insight.title.lower() and insight.severity == "high"
            for insight in insights
        )
        assert high_memory_found

    def test_analyze_task_performance(self):
        """测试分析任务性能"""
        # 模拟任务统计
        task_stats = {
            "active_tasks": 15,
            "task_types": {
                "data_processing": {
                    "total_count": 1000,
                    "success_count": 900,
                    "failure_count": 100,
                    "success_rate": 0.9,
                    "average_time": 5.0,
                    "max_time": 30.0,
                },
                "email_notification": {
                    "total_count": 500,
                    "success_count": 400,
                    "failure_count": 100,
                    "success_rate": 0.8,
                    "average_time": 2.0,
                    "max_time": 60.0,
                },
            },
            "recent_failures": [
                {"task_name": "email_notification", "error": "SMTP timeout"},
                {"task_name": "data_processing", "error": "Database connection failed"},
            ],
        }

        insights = self.analyzer.analyze_task_performance(task_stats)

        # 应该检测到任务失败
        assert len(insights) > 0
        task_failure_found = any(
            "task" in insight.title.lower() and "failure" in insight.title.lower()
            for insight in insights
        )
        assert task_failure_found

    def test_generate_performance_report(self):
        """测试生成性能报告"""
        # 准备各种统计数据
        api_stats = {
            "/api/test": {
                "request_count": 100,
                "average_duration": 0.1,
                "status_codes": {200: 95, 404: 5},
            }
        }
        db_stats = {
            "total_queries": 1000,
            "query_types": {"SELECT": {"count": 800, "average_time": 0.01}},
        }
        cache_stats = {"hit_rate": 0.8}
        memory_data = {"usage_percent": 50.0}
        task_stats = {"active_tasks": 5}

        # 生成报告
        report = self.analyzer.generate_performance_report(
            api_stats=api_stats,
            db_stats=db_stats,
            cache_stats=cache_stats,
            memory_data=memory_data,
            task_stats=task_stats,
        )

        # 验证报告结构
        assert "timestamp" in report
        assert "summary" in report
        assert "insights" in report
        assert "recommendations" in report
        assert "performance_score" in report

        # 验证摘要
        summary = report["summary"]
        assert "total_insights" in summary
        assert "critical_issues" in summary
        assert "high_issues" in summary

        # 验证性能分数
        score = report["performance_score"]
        assert "score" in score
        assert "grade" in score
        assert "deduction_breakdown" in score

    def test_calculate_performance_score(self):
        """测试计算性能分数"""
        # 准备测试数据
        test_cases = [
            # (insights, expected_score_range)
            ([], (90, 100)),  # 无问题
            ([Mock(severity="low")], (80, 89)),
            ([Mock(severity="medium")], (60, 79)),
            ([Mock(severity="high")], (30, 59)),
            ([Mock(severity="critical")], (0, 29)),
            ([Mock(severity="critical"), Mock(severity="high")], (0, 29)),
        ]

        for insights, expected_range in test_cases:
            score = self.analyzer._calculate_performance_score(insights)
            assert expected_range[0] <= score <= expected_range[1]

    def test_get_performance_grade(self):
        """测试获取性能等级"""
        test_cases = [
            (95, "A+"),
            (90, "A"),
            (85, "A-"),
            (80, "B+"),
            (75, "B"),
            (70, "B-"),
            (65, "C+"),
            (60, "C"),
            (55, "C-"),
            (50, "D"),
            (30, "F"),
        ]

        for score, expected_grade in test_cases:
            grade = self.analyzer._get_performance_grade(score)
            assert grade == expected_grade

    def test_generate_optimization_recommendations(self):
        """测试生成优化建议"""
        # 创建一些测试洞察
        insights = [
            PerformanceInsight(
                category="api",
                severity="high",
                title="Slow API Response",
                description="API is slow",
                impact="Bad user experience",
                recommendation="Add caching",
                metrics={},
                threshold=0,
            ),
            PerformanceInsight(
                category="database",
                severity="critical",
                title="Database Timeout",
                description="Database queries timing out",
                impact="Application failing",
                recommendation="Optimize queries",
                metrics={},
                threshold=0,
            ),
        ]

        recommendations = self.analyzer.generate_optimization_recommendations(insights)

        # 应该为每个严重洞察生成建议
        assert len(recommendations) >= 1

        # 验证建议内容
        for rec in recommendations:
            assert rec.title is not None
            assert rec.description is not None
            assert rec.priority in ["low", "medium", "high"]
            assert rec.implementation_complexity in ["low", "medium", "high"]

    @patch("src.performance.analyzer.np")
    def test_analyze_trends(self, mock_np):
        """测试分析趋势"""
        # 模拟numpy的polyfit
        mock_np.polyfit.return_value = (0.1, 100)  # slope, intercept

        # 准备时间序列数据
        data_points = [
            {"timestamp": datetime.now() - timedelta(hours=2), "value": 100},
            {"timestamp": datetime.now() - timedelta(hours=1), "value": 110},
            {"timestamp": datetime.now(), "value": 120},
        ]

        trends = self.analyzer.analyze_trends("response_time", data_points)

        # 验证趋势分析结果
        assert len(trends) >= 1
        trend = trends[0]
        assert trend.metric == "response_time"
        assert trend.trend_direction == "increasing"
        assert trend.change_rate > 0

    def test_export_report_json(self):
        """测试导出JSON格式报告"""
        # 创建简单报告
        report = {
            "timestamp": datetime.now().isoformat(),
            "summary": {"total_insights": 0},
            "performance_score": {"score": 100, "grade": "A+"},
        }

        exported = self.analyzer.export_report(report, format="json")

        # 验证导出的是JSON字符串
        import json

        parsed = json.loads(exported)
        assert parsed == report

    def test_export_report_html(self):
        """测试导出HTML格式报告"""
        # 创建简单报告
        report = {
            "timestamp": datetime.now().isoformat(),
            "summary": {"total_insights": 1},
            "insights": [
                PerformanceInsight(
                    category="test",
                    severity="low",
                    title="Test Insight",
                    description="Test description",
                    impact="None",
                    recommendation="None",
                    metrics={},
                    threshold=0,
                )
            ],
            "performance_score": {"score": 95, "grade": "A"},
        }

        exported = self.analyzer.export_report(report, format="html")

        # 验证导出的是HTML
        assert "<html" in exported
        assert "<head>" in exported
        assert "<body>" in exported
        assert "Test Insight" in exported

    def test_export_report_unsupported_format(self):
        """测试导出不支持的格式"""
        report = {"test": "data"}

        # 应该抛出异常
        with pytest.raises(ValueError, match="Unsupported format"):
            self.analyzer.export_report(report, format="xml")

    def test_clear_insights(self):
        """测试清除洞察"""
        # 添加一些洞察
        self.analyzer.insights.append(Mock())
        self.analyzer.trends.append(Mock())

        # 清除
        self.analyzer.clear_insights()

        assert len(self.analyzer.insights) == 0
        assert len(self.analyzer.trends) == 0
