"""
测试监控指标模块
Test monitoring metrics modules
"""

# 可选依赖导入
try:
    from src.dependencies.optional import *
except ImportError:
    pass

import pytest
from unittest.mock import AsyncMock, MagicMock, patch

from src.monitoring.metrics import (
    MetricType,
    MetricUnit,
    MetricsAggregator,
    StatsdExporter,
    MetricsCollector,
    SystemMetricsCollector,
    DatabaseMetricsCollector,
    ApplicationMetricsCollector,
    get_metrics_collector,
    get_async_session,
)
from src.monitoring.metrics.exporters import PrometheusExporter, CloudWatchExporter


class TestMetricTypes:
    """测试指标类型定义"""

    def test_metric_type_enum(self):
        """测试指标类型枚举"""
        assert MetricType.COUNTER.value == "counter"
        assert MetricType.GAUGE.value == "gauge"
        assert MetricType.HISTOGRAM.value == "histogram"
        assert MetricType.SUMMARY.value == "summary"

    def test_metric_unit_enum(self):
        """测试指标单位枚举"""
        assert MetricUnit.COUNT.value == "count"
        assert MetricUnit.PERCENT.value == "percent"
        assert MetricUnit.MILLISECONDS.value == "milliseconds"
        assert MetricUnit.SECONDS.value == "seconds"
        assert MetricUnit.BYTES.value == "bytes"
        assert MetricUnit.REQUESTS_PER_SECOND.value == "requests_per_second"


class TestMetricsAggregator:
    """测试指标聚合器"""

    def test_aggregator_init(self):
        """测试聚合器初始化"""
        aggregator = MetricsAggregator()
        assert aggregator.metrics == {}

    def test_add_metric(self):
        """测试添加指标"""
        aggregator = MetricsAggregator()
        aggregator.add("test_metric", 10.0)
        aggregator.add("test_metric", 20.0, tags={"env": "prod"})

        assert len(aggregator.metrics) == 2

    def test_get_average(self):
        """测试获取平均值"""
        aggregator = MetricsAggregator()
        assert aggregator.get_average("non_existent") == 0.0

        aggregator.add("test_metric", 10.0)
        aggregator.add("test_metric", 20.0)
        assert aggregator.get_average("test_metric") == 15.0

    def test_get_sum(self):
        """测试获取总和"""
        aggregator = MetricsAggregator()
        assert aggregator.get_sum("non_existent") == 0.0

        aggregator.add("test_metric", 10.0)
        aggregator.add("test_metric", 20.0)
        assert aggregator.get_sum("test_metric") == 30.0

    def test_get_count(self):
        """测试获取计数"""
        aggregator = MetricsAggregator()
        assert aggregator.get_count("non_existent") == 0

        aggregator.add("test_metric", 10.0)
        aggregator.add("test_metric", 20.0)
        assert aggregator.get_count("test_metric") == 2

    def test_get_min_max(self):
        """测试获取最小值和最大值"""
        aggregator = MetricsAggregator()
        aggregator.add("test_metric", 10.0)
        aggregator.add("test_metric", 20.0)
        aggregator.add("test_metric", 5.0)

        assert aggregator.get_min("test_metric") == 5.0
        assert aggregator.get_max("test_metric") == 20.0

    def test_get_percentile(self):
        """测试获取百分位数"""
        aggregator = MetricsAggregator()
        for i in range(1, 101):
            aggregator.add("test_metric", float(i))

        # 使用线性插值，50百分位数应该是50.5
        assert aggregator.get_percentile("test_metric", 50) == 50.5
        # 95百分位数应该是95 + 0.05 = 95.05
        assert aggregator.get_percentile("test_metric", 95) == 95.05

    def test_clear_metrics(self):
        """测试清除指标"""
        aggregator = MetricsAggregator()
        aggregator.add("test_metric1", 10.0)
        aggregator.add("test_metric2", 20.0)

        aggregator.clear("test_metric1")
        assert len(aggregator.metrics) == 1
        assert "test_metric1" not in str(aggregator.metrics)

        aggregator.clear()
        assert len(aggregator.metrics) == 0

    def test_get_all_metrics(self):
        """测试获取所有指标"""
        aggregator = MetricsAggregator()
        aggregator.add("test_metric", 10.0)
        aggregator.add("test_metric", 20.0)

        all_metrics = aggregator.get_all_metrics()
        assert "test_metric" in all_metrics
        assert all_metrics["test_metric"]["count"] == 2
        assert all_metrics["test_metric"]["average"] == 15.0


class TestExporters:
    """测试导出器"""

    def test_statsd_exporter_init(self):
        """测试StatsD导出器初始化"""
        exporter = StatsdExporter("localhost", 8125)
        assert exporter.host == "localhost"
        assert exporter.port == 8125
        assert exporter.enabled is True

    @patch("src.monitoring.metrics.exporters.logger")
    def test_statsd_send(self, mock_logger):
        """测试StatsD发送"""
        exporter = StatsdExporter()
        exporter.send("test.metric", 10.0, "g")
        mock_logger.debug.assert_called_once()

    def test_statsd_increment(self):
        """测试StatsD计数器"""
        exporter = StatsdExporter()
        exporter.enabled = False  # 禁用以避免日志
        exporter.increment("test.counter", 5)
        # 没有异常即成功

    def test_statsd_gauge(self):
        """测试StatsD仪表"""
        exporter = StatsdExporter()
        exporter.enabled = False
        exporter.gauge("test.gauge", 25.5)

    def test_statsd_timing(self):
        """测试StatsD计时"""
        exporter = StatsdExporter()
        exporter.enabled = False
        exporter.timing("test.timing", 150.0)

    def test_statsd_histogram(self):
        """测试StatsD直方图"""
        exporter = StatsdExporter()
        exporter.enabled = False
        exporter.histogram("test.histogram", 100.0)

    def test_statsd_enable_disable(self):
        """测试StatsD启用/禁用"""
        exporter = StatsdExporter()
        exporter.disable()
        assert exporter.enabled is False
        exporter.enable()
        assert exporter.enabled is True

    def test_prometheus_exporter_init(self):
        """测试Prometheus导出器初始化"""
        exporter = PrometheusExporter()
        assert exporter.metrics == {}
        assert exporter.enabled is True

    def test_prometheus_counter(self):
        """测试Prometheus计数器"""
        exporter = PrometheusExporter()
        counter = exporter.counter("test_counter", "Test counter")
        assert counter["type"] == "counter"
        assert counter["value"] == 0

    def test_prometheus_gauge(self):
        """测试Prometheus仪表"""
        exporter = PrometheusExporter()
        gauge = exporter.gauge("test_gauge", "Test gauge", ["env"])
        assert gauge["type"] == "gauge"
        assert gauge["labels"] == ["env"]

    def test_prometheus_histogram(self):
        """测试Prometheus直方图"""
        exporter = PrometheusExporter()
        histogram = exporter.histogram("test_histogram", "Test histogram")
        assert histogram["type"] == "histogram"
        assert "buckets" in histogram

    def test_prometheus_generate_latest(self):
        """测试Prometheus生成指标"""
        exporter = PrometheusExporter()
        exporter.counter("test_counter", "Test counter")
        exporter.gauge("test_gauge", "Test gauge")

        output = exporter.generate_latest()
        assert "# HELP test_counter Test counter" in output
        assert "# TYPE test_counter counter" in output
        assert "# HELP test_gauge Test gauge" in output
        assert "# TYPE test_gauge gauge" in output

    def test_cloudwatch_exporter_init(self):
        """测试CloudWatch导出器初始化"""
        exporter = CloudWatchExporter("TestNamespace")
        assert exporter.namespace == "TestNamespace"
        assert exporter.enabled is True

    @patch("src.monitoring.metrics.exporters.logger")
    def test_cloudwatch_put_metric_data(self, mock_logger):
        """测试CloudWatch发送指标"""
        exporter = CloudWatchExporter()
        exporter.put_metric_data("test_metric", 10.0, "Count", {"env": "test"})
        mock_logger.debug.assert_called_once()


class TestCollectors:
    """测试指标收集器"""

    def test_metrics_collector_init(self):
        """测试指标收集器初始化"""
        collector = MetricsCollector(collection_interval=60)
        assert collector.collection_interval == 60
        assert collector.running is False
        assert collector.enabled is True

    @pytest.mark.asyncio
    async def test_collect_once(self):
        """测试单次收集"""
        collector = MetricsCollector()
        result = await collector.collect_once()
        assert result["success"] is True
        assert "collection_time" in result
        assert "duration_seconds" in result
        assert "metrics" in result

    def test_collect_system_metrics(self):
        """测试收集系统指标"""
        collector = MetricsCollector()
        with patch("psutil.cpu_percent") as mock_cpu_percent:
            mock_cpu_percent.return_value = 50.0
            with patch("psutil.virtual_memory") as mock_memory:
                mock_memory.percent = 60.0
                mock_memory.available = 1024 * 1024 * 1024
                with patch("psutil.disk_usage") as mock_disk:
                    mock_disk.percent = 70.0
                    mock_disk.free = 512 * 1024 * 1024

                    metrics = collector.collect_system_metrics()
                    assert metrics["cpu_usage_percent"] == 50.0
                    assert metrics["memory_usage_percent"] == 60.0
                    assert metrics["disk_usage_percent"] == 70.0

    @pytest.mark.asyncio
    async def test_collect_database_metrics(self):
        """测试收集数据库指标"""
        collector = MetricsCollector()
        metrics = await collector.collect_database_metrics()
        assert "table_counts" in metrics
        assert metrics["table_counts"]["matches"] == 1000

    def test_collect_application_metrics(self):
        """测试收集应用指标"""
        collector = MetricsCollector()
        metrics = collector.collect_application_metrics()
        assert "prediction_stats" in metrics
        assert metrics["prediction_stats"]["total_predictions"] == 1000

    def test_format_metrics_for_export(self):
        """测试格式化指标导出"""
        collector = MetricsCollector()
        raw_metrics = {"test": "value"}
        formatted = collector.format_metrics_for_export(raw_metrics)
        assert formatted["metrics"] == raw_metrics
        assert formatted["export_format"] == "prometheus"
        assert "timestamp" in formatted

    def test_get_status(self):
        """测试获取状态"""
        collector = MetricsCollector()
        status = collector.get_status()
        assert status["running"] is False
        assert status["enabled"] is True
        assert "collection_interval" in status
        assert "task_status" in status

    def test_enable_disable(self):
        """测试启用/禁用"""
        collector = MetricsCollector()
        collector.disable()
        assert collector.enabled is False
        collector.enable()
        assert collector.enabled is True

    def test_set_collection_interval(self):
        """测试设置收集间隔"""
        collector = MetricsCollector()
        collector.set_collection_interval(120)
        assert collector.collection_interval == 120


class TestSystemMetricsCollector:
    """测试系统指标收集器"""

    def test_system_collector_init(self):
        """测试系统收集器初始化"""
        collector = SystemMetricsCollector()
        assert collector.collection_interval == 30

    @pytest.mark.asyncio
    async def test_collect_cpu_metrics(self):
        """测试收集CPU指标"""
        collector = SystemMetricsCollector()
        with patch("psutil.cpu_percent") as mock_cpu_percent:
            mock_cpu_percent.return_value = 75.0
            with patch("psutil.cpu_count") as mock_cpu_count:
                mock_cpu_count.return_value = 8

                metrics = await collector.collect_cpu_metrics()
                assert metrics["cpu_usage_percent"] == 75.0
                assert metrics["cpu_count"] == 8

    @pytest.mark.asyncio
    async def test_collect_memory_metrics(self):
        """测试收集内存指标"""
        collector = SystemMetricsCollector()
        with patch("psutil.virtual_memory") as mock_virtual_memory:
            mock_memory = MagicMock()
            mock_memory.percent = 80.0
            mock_memory.total = 8 * 1024 * 1024 * 1024
            mock_memory.available = 2 * 1024 * 1024 * 1024
            mock_memory.used = 6 * 1024 * 1024 * 1024
            mock_virtual_memory.return_value = mock_memory

            metrics = await collector.collect_memory_metrics()
            assert metrics["memory_usage_percent"] == 80.0
            assert metrics["memory_total"] == 8 * 1024 * 1024 * 1024

    @pytest.mark.asyncio
    async def test_collect_all_metrics(self):
        """测试收集所有系统指标"""
        collector = SystemMetricsCollector()
        collector.disable()
        metrics = await collector.collect_all_metrics()
        assert metrics == {}

        collector.enable()
        with patch("psutil.cpu_percent") as mock_cpu_percent:
            mock_cpu_percent.return_value = 50.0
            with patch("psutil.cpu_count") as mock_cpu_count:
                mock_cpu_count.return_value = 4
                with patch("psutil.virtual_memory") as mock_virtual_memory:
                    mock_memory = MagicMock()
                    mock_memory.percent = 60.0
                    mock_memory.total = 4 * 1024 * 1024 * 1024
                    mock_memory.available = 1 * 1024 * 1024 * 1024
                    mock_memory.used = 3 * 1024 * 1024 * 1024
                    mock_virtual_memory.return_value = mock_memory

                    metrics = await collector.collect_all_metrics()
                    assert "system_metrics" in metrics
                    assert metrics["system_metrics"]["cpu_usage_percent"] == 50.0


class TestDatabaseMetricsCollector:
    """测试数据库指标收集器"""

    def test_database_collector_init(self):
        """测试数据库收集器初始化"""
        collector = DatabaseMetricsCollector()
        assert collector.collection_interval == 60

    @pytest.mark.asyncio
    async def test_collect_connection_metrics(self):
        """测试收集连接指标"""
        collector = DatabaseMetricsCollector()
        metrics = await collector.collect_connection_metrics()
        assert metrics["active_connections"] == 5
        assert metrics["max_connections"] == 20
        assert metrics["connection_pool_usage"] == 25.0

    @pytest.mark.asyncio
    async def test_collect_table_size_metrics(self):
        """测试收集表大小指标"""
        collector = DatabaseMetricsCollector()
        metrics = await collector.collect_table_size_metrics()
        assert metrics["total_size_mb"] == 1024.5
        assert "table_sizes" in metrics
        assert metrics["table_sizes"]["matches"] == 512.2

    @pytest.mark.asyncio
    async def test_collect_all_database_metrics(self):
        """测试收集所有数据库指标"""
        collector = DatabaseMetricsCollector()
        collector.enable()
        metrics = await collector.collect_all_metrics()
        assert "database_metrics" in metrics
        assert "active_connections" in metrics["database_metrics"]
        assert "total_size_mb" in metrics["database_metrics"]


class TestApplicationMetricsCollector:
    """测试应用指标收集器"""

    def test_application_collector_init(self):
        """测试应用收集器初始化"""
        collector = ApplicationMetricsCollector()
        assert collector.collection_interval == 30

    @pytest.mark.asyncio
    async def test_collect_request_metrics(self):
        """测试收集请求指标"""
        collector = ApplicationMetricsCollector()
        metrics = await collector.collect_request_metrics()
        assert metrics["total_requests"] == 1500
        assert metrics["successful_requests"] == 1450
        assert metrics["failed_requests"] == 50
        assert metrics["error_rate_percent"] == 3.33

    @pytest.mark.asyncio
    async def test_collect_business_metrics(self):
        """测试收集业务指标"""
        collector = ApplicationMetricsCollector()
        metrics = await collector.collect_business_metrics()
        assert metrics["total_predictions"] == 2500
        assert metrics["successful_predictions"] == 2350
        assert metrics["prediction_accuracy"] == 94.0

    @pytest.mark.asyncio
    async def test_collect_all_application_metrics(self):
        """测试收集所有应用指标"""
        collector = ApplicationMetricsCollector()
        collector.enable()
        metrics = await collector.collect_all_metrics()
        assert "application_metrics" in metrics
        assert "total_requests" in metrics["application_metrics"]
        assert "total_predictions" in metrics["application_metrics"]


class TestGlobalCollector:
    """测试全局收集器"""

    def test_get_metrics_collector(self):
        """测试获取全局收集器"""
        collector = get_metrics_collector()
        assert isinstance(collector, MetricsCollector)
        # 再次调用应该返回同一个实例
        collector2 = get_metrics_collector()
        assert collector is collector2

    @pytest.mark.asyncio
    async def test_get_async_session(self):
        """测试获取异步会话"""
        session = await get_async_session()
        assert session is not None


class TestBackwardCompatibility:
    """测试向后兼容性"""

    def test_old_imports(self):
        """测试旧的导入方式仍然工作"""
        # 测试从原始位置导入
#         from src.monitoring.metrics_collector import (
            MetricsCollector as OldMetricsCollector,
            SystemMetricsCollector as OldSystemMetricsCollector,
            MetricsAggregator as OldMetricsAggregator,
            MetricType as OldMetricType,
            MetricUnit as OldMetricUnit,
            get_metrics_collector as old_get_metrics_collector,
        )

        # 确保类可以正常实例化
        collector = OldMetricsCollector()
        assert collector is not None

        system_collector = OldSystemMetricsCollector()
        assert system_collector is not None

        aggregator = OldMetricsAggregator()
        assert aggregator is not None

        # 确保枚举值正确
        assert OldMetricType.COUNTER.value == "counter"
        assert OldMetricUnit.PERCENT.value == "percent"

        # 确保函数可以调用
        old_collector = old_get_metrics_collector()
        assert isinstance(old_collector, OldMetricsCollector)
