"""
测试审计服务模块化组件
Test Audit Service Modular Components

测试重构后的审计服务模块的各项功能。
"""

import pytest
from datetime import datetime, timedelta
from unittest.mock import AsyncMock, MagicMock, patch

# from src.services.audit_service_mod import (
    AuditService,
    AuditContext,
    AuditAction,
    AuditSeverity,
    AuditLog,
    AuditLogSummary,
    AuditStorage,
    audit_action,
    audit_api_operation,
    audit_database_operation,
    audit_sensitive_operation,
)
from src.services.audit_service_mod.utils import (
    hash_sensitive_data,
    sanitize_data,
    calculate_operation_risk,
    format_audit_log_for_display,
    extract_resource_info,
    validate_audit_compliance,
)


class TestAuditContext:
    """测试审计上下文"""

    def test_audit_context_creation(self):
        """测试创建审计上下文"""
        context = AuditContext(
            user_id="user123",
            username="testuser",
            user_role="admin",
            ip_address="192.168.1.1",
            user_agent="Mozilla/5.0",
        )

        assert context.user_id == "user123"
        assert context.username == "testuser"
        assert context.user_role == "admin"
        assert context.ip_address == "192.168.1.1"
        assert context.user_agent == "Mozilla/5.0"

    def test_audit_context_to_dict(self):
        """测试上下文转换为字典"""
        context = AuditContext(
            user_id="user123", username="testuser", user_role="admin"
        )

        result = context.to_dict()
        assert result["user_id"] == "user123"
        assert result["username"] == "testuser"
        assert result["user_role"] == "admin"

    def test_audit_context_update(self):
        """测试更新上下文"""
        context = AuditContext(user_id="user123")
        context.update(username="newuser", user_role="editor")

        assert context.username == "newuser"
        assert context.user_role == "editor"

    def test_audit_context_merge(self):
        """测试合并上下文"""
        context1 = AuditContext(user_id="user123", username="user1")
        context2 = AuditContext(
            user_id="user456", user_role="admin", ip_address="192.168.1.1"
        )

        merged = context1.merge(context2)
        assert merged.user_id == "user456"  # 使用新值
        assert merged.username == "user1"  # 保留原值
        assert merged.user_role == "admin"  # 使用新值
        assert merged.ip_address == "192.168.1.1"  # 使用新值

    def test_audit_context_from_request(self):
        """测试从请求创建上下文"""
        # 模拟FastAPI请求
        request = MagicMock()
        request.client.host = "192.168.1.1"
        request.headers = {
            "user-agent": "Mozilla/5.0",
            "x-request-id": "req123",
            "x-correlation-id": "corr456",
        }

        user_info = {
            "user_id": "user123",
            "username": "testuser",
            "role": "admin",
            "session_id": "sess789",
        }

        context = AuditContext.from_request(request, user_info)

        assert context.user_id == "user123"
        assert context.username == "testuser"
        assert context.user_role == "admin"
        assert context.session_id == "sess789"
        assert context.ip_address == "192.168.1.1"
        assert context.user_agent == "Mozilla/5.0"
        assert context.request_id == "req123"
        assert context.correlation_id == "corr456"


class TestAuditModels:
    """测试审计模型"""

    def test_audit_log_creation(self):
        """测试创建审计日志"""
        timestamp = datetime.utcnow()
        log = AuditLog(
            timestamp=timestamp,
            user_id="user123",
            action=AuditAction.CREATE,
            resource_type="user",
            resource_id="resource456",
            description="创建用户",
            severity=AuditSeverity.MEDIUM,
            old_values={"status": "inactive"},
            new_values={"status": "active"},
        )

        assert log.timestamp == timestamp
        assert log.user_id == "user123"
        assert log.action == AuditAction.CREATE
        assert log.resource_type == "user"
        assert log.resource_id == "resource456"
        assert log.description == "创建用户"
        assert log.severity == AuditSeverity.MEDIUM
        assert log.old_values == {"status": "inactive"}
        assert log.new_values == {"status": "active"}

    def test_audit_log_to_dict(self):
        """测试审计日志转换为字典"""
        timestamp = datetime.utcnow()
        log = AuditLog(
            timestamp=timestamp,
            user_id="user123",
            action=AuditAction.CREATE,
            description="测试操作",
        )

        result = log.to_dict()
        assert result["user_id"] == "user123"
        assert result["action"] == "create"
        assert result["description"] == "测试操作"
        assert result["timestamp"] == timestamp.isoformat()

    def test_audit_log_from_dict(self):
        """测试从字典创建审计日志"""
        data = {
            "id": 1,
            "timestamp": datetime.utcnow().isoformat(),
            "user_id": "user123",
            "action": "create",
            "severity": "medium",
            "description": "测试操作",
            "old_values": {"key": "old"},
            "new_values": {"key": "new"},
        }

        log = AuditLog.from_dict(data)
        assert log.id == 1
        assert log.user_id == "user123"
        assert log.action == AuditAction.CREATE
        assert log.severity == AuditSeverity.MEDIUM
        assert log.description == "测试操作"
        assert log.old_values == {"key": "old"}
        assert log.new_values == {"key": "new"}

    def test_audit_log_summary_initialization(self):
        """测试审计日志摘要初始化"""
        summary = AuditLogSummary()
        assert summary.total_logs == 0
        assert summary.action_counts == {}
        assert summary.severity_counts == {}
        assert summary.user_counts == {}
        assert summary.resource_counts == {}
        assert summary.date_range == {}
        assert summary.top_actions == []
        assert summary.high_risk_operations == []

    def test_audit_log_summary_with_data(self):
        """测试带数据的审计日志摘要"""
        summary = AuditLogSummary(
            total_logs=100,
            action_counts={"create": 50, "update": 30, "delete": 20},
            severity_counts={"low": 30, "medium": 50, "high": 20},
            user_counts={"user1": 60, "user2": 40},
            resource_counts={"users": 50, "posts": 30, "comments": 20},
        )

        assert summary.total_logs == 100
        assert summary.action_counts["create"] == 50
        assert summary.severity_counts["high"] == 20
        assert summary.user_counts["user1"] == 60
        assert summary.resource_counts["users"] == 50


class TestAuditUtilities:
    """测试审计工具函数"""

    def test_hash_sensitive_data(self):
        """测试敏感数据哈希"""
        data = {"password": "secret123", "email": "test@example.com"}
        hash_value = hash_sensitive_data(data)

        assert isinstance(hash_value, str)
        assert len(hash_value) == 64  # SHA256 长度
        assert hash_value != "secret123"

        # 相同数据应该产生相同哈希
        hash_value2 = hash_sensitive_data(data)
        assert hash_value == hash_value2

    def test_sanitize_data(self):
        """测试数据清理"""
        data = {
            "username": "testuser",
            "password": "secret123",
            "email": "test@example.com",
            "phone": "1234567890",
            "age": 25,
        }

        sensitive_fields = {"password", "email", "phone"}
        sanitized = sanitize_data(data, sensitive_fields)

        assert sanitized["username"] == "testuser"
        assert sanitized["password"] == "*********"
        assert sanitized["email"] == "*************"
        assert sanitized["phone"] == "**********"
        assert sanitized["age"] == 25

    def test_calculate_operation_risk(self):
        """测试操作风险计算"""
        # 低风险操作
        risk = calculate_operation_risk("read")
        assert risk == "low"

        # 中风险操作
        risk = calculate_operation_risk("update", table_name="posts")
        assert risk == "medium"

        # 高风险操作
        risk = calculate_operation_risk("delete", table_name="users")
        assert risk == "high"

        # 严重风险操作
        risk = calculate_operation_risk("drop", table_name="users")
        assert risk == "critical"

    def test_format_audit_log_for_display(self):
        """测试格式化审计日志"""
        timestamp = datetime.utcnow()
        log = AuditLog(
            timestamp=timestamp,
            user_id="user123",
            action=AuditAction.CREATE,
            description="创建用户",
            severity=AuditSeverity.MEDIUM,
            metadata={"duration_ms": 1500},
        )

        formatted = format_audit_log_for_display(log)
        assert "timestamp_formatted" in formatted
        assert "action_description" in formatted
        assert formatted["action_description"] == "创建"
        assert formatted["duration_formatted"] == "1.50s"

    def test_extract_resource_info(self):
        """测试提取资源信息"""
        # 从位置参数提取
        args = (None, "resource123")
        kwargs = {}
        resource_info = extract_resource_info(args, kwargs)
        assert resource_info["resource_id"] == "resource123"

        # 从关键字参数提取
        args = ()
        kwargs = {"match_id": "match456"}
        resource_info = extract_resource_info(args, kwargs)
        assert resource_info["resource_id"] == "match456"

        # 从上下文提取
        args = ()
        kwargs = {}
        context = {"resource_type": "user", "table_name": "users"}
        resource_info = extract_resource_info(args, kwargs, context)
        assert resource_info["resource_type"] == "user"
        assert resource_info["table_name"] == "users"

    def test_validate_audit_compliance(self):
        """测试审计日志合规性验证"""
        # 合规的日志
        log = AuditLog(
            timestamp=datetime.utcnow(),
            user_id="user123",
            action=AuditAction.CREATE,
            resource_id="resource456",
            description="创建用户",
            ip_address="192.168.1.1",
            new_values={"status": "active"},
        )

        result = validate_audit_compliance(log)
        assert result["is_compliant"] is True
        assert len(result["issues"]) == 0
        assert result["score"] == 100

        # 不合规的日志
        log_bad = AuditLog(
            user_id="user123", action=AuditAction.DELETE, severity=AuditSeverity.LOW
        )

        result = validate_audit_compliance(log_bad)
        assert result["is_compliant"] is False
        assert len(result["issues"]) > 0
        assert len(result["warnings"]) > 0
        assert result["score"] < 100


class TestAuditDecorators:
    """测试审计装饰器"""

    @pytest.mark.asyncio
    async def test_audit_action_decorator(self):
        """测试审计动作装饰器"""
        # 模拟审计服务
        with patch(
            "src.services.audit_service_mod.service.AuditService"
        ) as mock_service_class:
            mock_service = AsyncMock()
            mock_service_class.return_value = mock_service
            mock_service.initialize.return_value = None

            # 设置上下文
            context = AuditContext(user_id="user123")

            @audit_action("test_action", resource_type="test_resource")
            async def test_function(x, y):
                return x + y

            # 设置上下文变量
            from src.services.audit_service_mod.decorators import audit_context

            audit_context.set(context)

            # 执行函数
            result = await test_function(2, 3)

            assert result == 5
            mock_service.log_operation.assert_called_once()

    @pytest.mark.asyncio
    async def test_audit_api_operation_decorator(self):
        """测试API操作审计装饰器"""
        with patch(
            "src.services.audit_service_mod.service.AuditService"
        ) as mock_service_class:
            mock_service = AsyncMock()
            mock_service_class.return_value = mock_service

            @audit_api_operation(resource_type="api")
            async def api_function():
                return {"result": "success"}

            context = AuditContext(user_id="user123")
            from src.services.audit_service_mod.decorators import audit_context

            audit_context.set(context)

            result = await api_function()
            assert result["result"] == "success"

    @pytest.mark.asyncio
    async def test_audit_database_operation_decorator(self):
        """测试数据库操作审计装饰器"""
        with patch(
            "src.services.audit_service_mod.service.AuditService"
        ) as mock_service_class:
            mock_service = AsyncMock()
            mock_service_class.return_value = mock_service

            @audit_database_operation(table_name="users", severity="high")
            async def db_function():
                return {"affected_rows": 1}

            context = AuditContext(user_id="user123")
            from src.services.audit_service_mod.decorators import audit_context

            audit_context.set(context)

            result = await db_function()
            assert result["affected_rows"] == 1

    @pytest.mark.asyncio
    async def test_audit_sensitive_operation_decorator(self):
        """测试敏感操作审计装饰器"""
        with patch(
            "src.services.audit_service_mod.service.AuditService"
        ) as mock_service_class:
            mock_service = AsyncMock()
            mock_service_class.return_value = mock_service

            @audit_sensitive_operation(description="删除用户", severity="critical")
            async def sensitive_function():
                return {"deleted": True}

            context = AuditContext(user_id="user123")
            from src.services.audit_service_mod.decorators import audit_context

            audit_context.set(context)

            result = await sensitive_function()
            assert result["deleted"] is True


class TestAuditStorage:
    """测试审计存储管理"""

    @pytest.mark.asyncio
    async def test_save_log(self):
        """测试保存审计日志"""
        with patch("src.services.audit_service_mod.storage.DatabaseManager") as mock_db:
            mock_session = AsyncMock()
            mock_db_manager = AsyncMock()
            mock_db.return_value.get_session.return_value.__aenter__.return_value = (
                mock_session
            )
            mock_db.return_value.get_session.return_value.__aexit__.return_value = None

            storage = AuditStorage(mock_db_manager)

            log = AuditLog(
                user_id="user123", action=AuditAction.CREATE, description="测试操作"
            )

            # 模拟数据库操作
            mock_db_log = MagicMock()
            mock_db_log.id = 1
            mock_session.add.return_value = None
            mock_session.commit.return_value = None
            mock_session.refresh.return_value = None

            await storage.save_log(log)

            # 验证保存操作
            mock_session.add.assert_called_once()
            mock_session.commit.assert_called_once()
            # 注意：由于模拟的限制，log_id 可能为 None

    @pytest.mark.asyncio
    async def test_get_logs(self):
        """测试获取审计日志"""
        with patch("src.services.audit_service_mod.storage.DatabaseManager") as mock_db:
            mock_session = AsyncMock()
            mock_db_manager = AsyncMock()
            mock_db.return_value.get_session.return_value.__aenter__.return_value = (
                mock_session
            )
            mock_db.return_value.get_session.return_value.__aexit__.return_value = None

            storage = AuditStorage(mock_db_manager)

            # 模拟查询结果
            mock_db_log = MagicMock()
            mock_db_log.id = 1
            mock_db_log.user_id = "user123"
            mock_db_log.action = "create"
            mock_db_log.timestamp = datetime.utcnow()
            mock_db_log.description = "测试操作"
            mock_db_log.severity = "medium"
            mock_db_log.resource_type = None
            mock_db_log.resource_id = None
            mock_db_log.username = None
            mock_db_log.user_role = None
            mock_db_log.session_id = None
            mock_db_log.ip_address = None
            mock_db_log.user_agent = None
            mock_db_log.old_values = None
            mock_db_log.new_values = None
            mock_db_log.table_name = None
            mock_db_log.compliance_category = None
            mock_db_log.request_id = None
            mock_db_log.correlation_id = None
            mock_db_log.metadata = None

            mock_result = MagicMock()
            mock_result.scalars.return_value.all.return_value = [mock_db_log]
            mock_session.execute.return_value = mock_result

            logs = await storage.get_logs(limit=10)

            assert len(logs) == 1
            assert logs[0].user_id == "user123"
            assert logs[0].action == "create"

    @pytest.mark.asyncio
    async def test_get_logs_summary(self):
        """测试获取审计日志摘要"""
        with patch("src.services.audit_service_mod.storage.DatabaseManager") as mock_db:
            mock_session = AsyncMock()
            mock_db_manager = AsyncMock()
            mock_db.return_value.get_session.return_value.__aenter__.return_value = (
                mock_session
            )
            mock_db.return_value.get_session.return_value.__aexit__.return_value = None

            storage = AuditStorage(mock_db_manager)

            # 模拟统计查询结果
            mock_session.scalar.return_value = 100  # 总日志数
            mock_session.execute.return_value.fetchall.side_effect = [
                [("create", 50), ("update", 30), ("delete", 20)],  # 动作统计
                [("low", 30), ("medium", 50), ("high", 20)],  # 严重性统计
                [("user1", 60), ("user2", 40)],  # 用户统计
                [("users", 50), ("posts", 30), ("comments", 20)],  # 资源统计
                [(datetime.utcnow(), datetime.utcnow())],  # 日期范围
                [("create", 50), ("update", 30)],  # 热门操作
                [],  # 高风险操作
            ]

            summary = await storage.get_logs_summary()

            assert summary.total_logs == 100
            assert "create" in summary.action_counts
            assert "low" in summary.severity_counts
            assert "user1" in summary.user_counts
            assert "users" in summary.resource_counts

    @pytest.mark.asyncio
    async def test_archive_old_logs(self):
        """测试归档旧日志"""
        with patch("src.services.audit_service_mod.storage.DatabaseManager") as mock_db:
            mock_session = AsyncMock()
            mock_db_manager = AsyncMock()
            mock_db.return_value.get_session.return_value.__aenter__.return_value = (
                mock_session
            )
            mock_db.return_value.get_session.return_value.__aexit__.return_value = None

            storage = AuditStorage(mock_db_manager)

            # 模拟归档操作
            mock_session.scalar.return_value = 50  # 要归档的日志数
            mock_session.execute.return_value = None
            mock_session.commit.return_value = None

            archived_count = await storage.archive_old_logs(
                before_date=datetime.utcnow() - timedelta(days=365)
            )

            assert archived_count == 50
            mock_session.commit.assert_called_once()

    @pytest.mark.asyncio
    async def test_cleanup_old_logs(self):
        """测试清理旧日志"""
        with patch("src.services.audit_service_mod.storage.DatabaseManager") as mock_db:
            mock_session = AsyncMock()
            mock_db_manager = AsyncMock()
            mock_db.return_value.get_session.return_value.__aenter__.return_value = (
                mock_session
            )
            mock_db.return_value.get_session.return_value.__aexit__.return_value = None

            storage = AuditStorage(mock_db_manager)

            # 模拟清理操作
            mock_result = MagicMock()
            mock_result.scalars.return_value.all.return_value = [
                MagicMock() for _ in range(10)
            ]
            mock_session.execute.return_value = mock_result
            mock_session.delete.return_value = None
            mock_session.commit.return_value = None

            cleaned_count = await storage.cleanup_old_logs(retention_days=365)

            assert cleaned_count == 10
            assert mock_session.commit.call_count == 1


class TestAuditService:
    """测试审计服务"""

    @pytest.mark.asyncio
    async def test_audit_service_initialization(self):
        """测试审计服务初始化"""
        service = AuditService()
        assert service is not None
        assert hasattr(service, "storage")
        assert hasattr(service, "logger")

    @pytest.mark.asyncio
    async def test_log_operation(self):
        """测试记录操作"""
        with patch.object(
            AuditStorage, "save_log", new_callable=AsyncMock
        ) as mock_save:
            mock_save.return_value = 1

            service = AuditService()
            context = AuditContext(user_id="user123")

            log_id = await service.log_operation(
                context=context,
                action=AuditAction.CREATE,
                resource_type="user",
                description="创建用户",
            )

            assert log_id == 1
            mock_save.assert_called_once()

    @pytest.mark.asyncio
    async def test_log_action(self):
        """测试记录动作"""
        with patch.object(
            AuditStorage, "save_log", new_callable=AsyncMock
        ) as mock_save:
            mock_save.return_value = 1

            service = AuditService()
            context = AuditContext(user_id="user123")

            log_id = await service.async_log_action(
                context=context,
                action="create_user",
                resource_type="user",
                description="创建用户",
            )

            assert log_id == 1
            mock_save.assert_called_once()

    @pytest.mark.asyncio
    async def test_get_operation_history(self):
        """测试获取操作历史"""
        with patch.object(AuditStorage, "get_logs", new_callable=AsyncMock) as mock_get:
            mock_log = AuditLog(
                id=1,
                user_id="user123",
                action=AuditAction.CREATE,
                description="测试操作",
                timestamp=datetime.utcnow(),
            )
            mock_get.return_value = [mock_log]

            service = AuditService()
            logs = await service.get_operation_history(user_id="user123", limit=10)

            assert len(logs) == 1
            assert logs[0].user_id == "user123"
            mock_get.assert_called_once()

    @pytest.mark.asyncio
    async def test_get_compliance_report(self):
        """测试获取合规报告"""
        with patch.object(
            AuditStorage, "get_logs_summary", new_callable=AsyncMock
        ) as mock_summary:
            mock_summary.return_value = AuditLogSummary(
                total_logs=100,
                action_counts={"create": 50, "update": 30},
                severity_counts={"low": 40, "medium": 40, "high": 20},
                high_risk_operations=[
                    {
                        "timestamp": datetime.utcnow(),
                        "user_id": "user123",
                        "action": "delete",
                        "severity": "high",
                    }
                ],
            )

            service = AuditService()
            report = await service.get_compliance_report(days=30)

            assert report["total_logs"] == 100
            assert "compliance_score" in report
            assert "recommendations" in report
            mock_summary.assert_called_once()
