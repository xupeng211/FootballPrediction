# Football Prediction System - Docker Compose Configuration
# 使用环境变量切换不同环境

version: '3.8'

# 默认环境变量
x-default-environment: &default-env
  ENVIRONMENT: ${ENVIRONMENT:-development}
  DEBUG: ${DEBUG:-false}
  LOG_LEVEL: ${LOG_LEVEL:-INFO}
  PYTHONPATH: /app

x-db-environment: &db-env
  POSTGRES_USER: ${POSTGRES_USER:-postgres}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
  POSTGRES_DB: ${POSTGRES_DB:-football_prediction_dev}
  DB_HOST: db
  DB_PORT: 5432

x-redis-environment: &redis-env
  REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}

services:
  # 应用服务
  app:
    build:
      context: .
      target: ${BUILD_TARGET:-development}
      args:
        - APP_VERSION=${APP_TAG:-latest}
    image: ${APP_IMAGE:-football-prediction}:${APP_TAG:-latest}
    container_name: football-app
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-development}
      DEBUG: ${DEBUG:-false}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      PYTHONPATH: /app
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-football_prediction_dev}
      DB_HOST: db
      DB_PORT: 5432
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      # MLflow配置（仅在需要时启用）
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI:-}
      - MLFLOW_EXPERIMENT_NAME=${MLFLOW_EXPERIMENT_NAME:-football_prediction}
    env_file:
      - .env
    volumes:
      - ${APP_VOLUME:-}:/app  # 开发时挂载代码
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    networks:
      - football-network
    # 健康检查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 数据库服务
  db:
    image: postgres:15-alpine
    container_name: football-db
    environment:
      <<: *db-env
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    restart: unless-stopped
    networks:
      - football-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: football-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - football-network

  # MLflow服务（可选）
  mlflow:
    image: python:3.11-slim
    container_name: football-mlflow
    command: >
      bash -c "pip install mlflow psycopg2-binary &&
               mlflow server
               --host 0.0.0.0
               --port 5000
               --backend-store-uri postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${MLFLOW_DB:-mlflow}
               --default-artifact-root /mlflow/artifacts"
    ports:
      - "${MLFLOW_PORT:-5000}:5000"
    environment:
      <<: *db-env
    volumes:
      - mlflow_artifacts:/mlflow/artifacts
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - football-network
    profiles:
      - mlflow

  # Nginx反向代理（生产环境）
  nginx:
    image: nginx:alpine
    container_name: football-nginx
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - football-network
    profiles:
      - production

  # Celery Worker
  celery-worker:
    build:
      context: .
      target: ${BUILD_TARGET:-development}
    image: ${APP_IMAGE:-football-prediction}:${APP_TAG:-latest}
    container_name: football-celery-worker
    command: celery -A src.core.celery worker --loglevel=info
    environment:
      <<: [*default-env, *db-env, *redis-env]
    env_file:
      - .env
    volumes:
      - ${APP_VOLUME:-}:/app
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - football-network
    profiles:
      - celery

  # Celery Beat调度器
  celery-beat:
    build:
      context: .
      target: ${BUILD_TARGET:-development}
    image: ${APP_IMAGE:-football-prediction}:${APP_TAG:-latest}
    container_name: football-celery-beat
    command: celery -A src.core.celery beat --loglevel=info
    environment:
      <<: [*default-env, *db-env, *redis-env]
    env_file:
      - .env
    volumes:
      - ${APP_VOLUME:-}:/app
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - football-network
    profiles:
      - celery

# 网络配置
networks:
  football-network:
    driver: bridge

# 数据卷
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mlflow_artifacts:
    driver: local