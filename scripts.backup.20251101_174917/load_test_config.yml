# 负载测试配置文件
# Load Test Configuration

# 基础配置
basic_test:
  name: "基础负载测试"
  target_url: "http://localhost:8000"
  concurrent_users: 100
  duration: 60
  ramp_up_time: 10
  requests_per_second: 20
  timeout: 5
  success_criteria:
    p95_response_time_ms: 200
    error_rate_percent: 0.1
    min_rps: 15

# 中等负载测试
medium_test:
  name: "中等负载测试"
  target_url: "http://localhost:8000"
  concurrent_users: 500
  duration: 180
  ramp_up_time: 30
  requests_per_second: 50
  timeout: 8
  success_criteria:
    p95_response_time_ms: 300
    error_rate_percent: 0.5
    min_rps: 40

# 高负载压力测试
high_load_test:
  name: "高负载压力测试"
  target_url: "http://localhost:8000"
  concurrent_users: 1000
  duration: 300
  ramp_up_time: 60
  requests_per_second: 100
  timeout: 10
  success_criteria:
    p95_response_time_ms: 500
    error_rate_percent: 1.0
    min_rps: 80

# 峰值负载测试
peak_test:
  name: "峰值负载测试"
  target_url: "http://localhost:8000"
  concurrent_users: 2000
  duration: 120
  ramp_up_time: 30
  requests_per_second: 200
  timeout: 15
  success_criteria:
    p95_response_time_ms: 1000
    error_rate_percent: 2.0
    min_rps: 150

# 稳定性测试 (24小时)
stability_test:
  name: "24小时稳定性测试"
  target_url: "http://localhost:8000"
  concurrent_users: 200
  duration: 86400  # 24小时
  ramp_up_time: 300
  requests_per_second: 10
  timeout: 10
  success_criteria:
    p95_response_time_ms: 400
    error_rate_percent: 0.5
    min_rps: 8

# 测试端点配置
test_endpoints:
  health_check:
    path: "/health"
    method: "GET"
    weight: 10
    expected_status: 200

  api_predictions:
    path: "/api/v1/predictions/simple"
    method: "POST"
    weight: 30
    expected_status: 200
    payload_template:
      home_team: "Team_A"
      away_team: "Team_B"
      match_date: "2024-01-01"
      competition: "Test League"

  api_teams:
    path: "/api/v1/teams"
    method: "GET"
    weight: 20
    expected_status: 200

  api_matches:
    path: "/api/v1/matches"
    method: "GET"
    weight: 20
    expected_status: 200

  user_profile:
    path: "/api/v1/user/profile"
    method: "GET"
    weight: 20
    expected_status: 200

# 性能基准
performance_benchmarks:
  excellent:
    p95_response_time_ms: 100
    p99_response_time_ms: 200
    error_rate_percent: 0.01
    throughput_rps: 200

  good:
    p95_response_time_ms: 200
    p99_response_time_ms: 500
    error_rate_percent: 0.1
    throughput_rps: 100

  acceptable:
    p95_response_time_ms: 500
    p99_response_time_ms: 1000
    error_rate_percent: 1.0
    throughput_rps: 50

  poor:
    p95_response_time_ms: 1000
    p99_response_time_ms: 2000
    error_rate_percent: 5.0
    throughput_rps: 20

# 监控配置
monitoring:
  metrics_collection:
    enabled: true
    interval_seconds: 5
    include_system_metrics: true
    include_application_metrics: true

  alerts:
    response_time_threshold_ms: 1000
    error_rate_threshold_percent: 5.0
    memory_usage_threshold_percent: 80
    cpu_usage_threshold_percent: 80

# 报告配置
reporting:
  output_formats: ["json", "html", "csv"]
  include_detailed_logs: true
  include_charts: true
  compare_with_baseline: true
  generate_recommendations: true