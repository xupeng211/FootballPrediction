[tool:pytest]
# 优化的pytest配置

# 最小版本要求
minversion = 8.0

# 测试路径
testpaths = tests

# Python路径
pythonpath = .

# 测试文件模式
python_files = test_*.py *_test.py

# 测试类模式
python_classes = Test*

# 测试函数模式
python_functions = test_*

# 添加选项
addopts =
    --strict-markers
    --strict-config
    --tb=short
    --maxfail=10
    --durations=10

# 默认标记
markers =
    unit: 单元测试 - 快速独立测试
    integration: 集成测试 - 需要外部依赖
    e2e: 端到端测试 - 完整流程测试
    slow: 慢速测试 - 执行时间超过1秒
    fast: 快速测试 - 执行时间小于1秒
    critical: 关键测试 - 必须通过的核心功能测试
    regression: 回归测试 - 验证修复的问题不会重现
    smoke: 冒烟测试 - 基本功能验证
    performance: 性能测试 - 基准和性能相关
    security: 安全测试 - 安全相关测试
    database: 数据库测试 - 需要数据库连接
    redis: Redis测试 - 需要Redis连接
    api: API测试 - HTTP接口测试
    utils: 工具函数测试
    tasks: 后台任务测试

# 日志配置
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# 过滤警告
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning

# 异步配置
asyncio_mode = strict

# 覆盖率配置
[coverage:run]
source = src
omit =
    */tests/*
    */venv/*
    */__pycache__/*
    */migrations/*
    */alembic/*
    src/tasks/backup/**  # 备份模块太复杂
    src/tasks/data_collection_core.py  # 核心模块需要大量mock

# 覆盖率报告
[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

show_missing = true
precision = 2
skip_covered = false

# HTML报告
[coverage:html]
directory = htmlcov