version: "3.8"

services:
  db:
    image: postgres:15-alpine
    container_name: football-prediction-simple-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: football_prediction_staging
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: simple_db_password_2024
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-staging-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d football_prediction_staging"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: football-prediction-simple-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass simple_redis_password_2024
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - backend
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s

  app:
    build:
      context: ..
      dockerfile: Dockerfile.simple
    image: football-prediction:simple
    container_name: football-prediction-simple-app
    restart: unless-stopped
    environment:
      - ENV=staging
      - PYTHONPATH=/app
      - DEBUG=false
      - DATABASE_URL=postgresql+asyncpg://postgres:simple_db_password_2024@db:5432/football_prediction_staging
      - REDIS_URL=redis://:simple_redis_password_2024@redis:6379/0
      - JWT_SECRET_KEY=simple_jwt_secret_key_2024_very_secure
      - JWT_ALGORITHM=HS256
      - JWT_EXPIRE_MINUTES=30
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
    command: sh -c "echo 'Waiting for database...' && python -c 'import asyncio; from sqlalchemy.ext.asyncio import create_async_engine; async def check(): engine = create_async_engine(\"postgresql+asyncpg://postgres:simple_db_password_2024@db:5432/football_prediction_staging\"); async with engine.begin() as conn: await conn.execute(\"SELECT 1\"); await engine.dispose(); print(\"Database ready\"); asyncio.run(check())' && echo 'Starting application...' && uvicorn src.main:app --host 0.0.0.0 --port 8000 --reload"

networks:
  backend:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
