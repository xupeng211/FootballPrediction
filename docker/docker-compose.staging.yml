# =================================================================
# 本地试运营环境Docker Compose配置
# Local Staging Docker Compose Configuration
# =================================================================

version: '3.8'

services:
  # 应用服务
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile.production
    image: football-prediction:staging
    container_name: football-prediction-staging-app
    restart: unless-stopped
    env_file:
      - ../environments/.env.local
    environment:
      - ENV=staging
      - PYTHONPATH=/app
      - WORKERS=2
      - MAX_CONNECTIONS=50
      - ACCESS_LOG=true
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
      - monitoring
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # 数据库服务
  db:
    image: postgres:15-alpine
    container_name: football-prediction-staging-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: football_prediction_staging
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: staging_db_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - postgres_backups:/backups
    networks:
      - backend
      - monitoring
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d football_prediction_staging"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: football-prediction-staging-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass staging_redis_password_2024
    volumes:
      - redis_data:/data
    networks:
      - backend
      - monitoring
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
        reservations:
          cpus: '0.15'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Nginx反向代理（本地HTTP版本）
  nginx:
    image: nginx:alpine
    container_name: football-prediction-staging-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ../nginx/nginx.staging.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - frontend
      - backend
      - monitoring
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # 监控服务
  prometheus:
    image: prom/prometheus:latest
    container_name: football-prediction-staging-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ../config/monitoring/prometheus.staging.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  grafana:
    image: grafana/grafana:latest
    container_name: football-prediction-staging-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ../config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=staging_grafana_admin_2024
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
        reservations:
          cpus: '0.15'
          memory: 128M

  # 日志收集
  loki:
    image: grafana/loki:latest
    container_name: football-prediction-staging-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
      - ../config/loki/loki.staging.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
        reservations:
          cpus: '0.15'
          memory: 128M

  # 日志转发器
  promtail:
    image: grafana/promtail:latest
    container_name: football-prediction-staging-promtail
    restart: unless-stopped
    volumes:
      - ../config/promtail/promtail.staging.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

  # 性能监控
  node-exporter:
    image: prom/node-exporter:latest
    container_name: football-prediction-staging-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M
        reservations:
          cpus: '0.05'
          memory: 64M

  # Redis监控
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: football-prediction-staging-redis-exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=staging_redis_password_2024
    depends_on:
      - redis
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
        reservations:
          cpus: '0.05'
          memory: 32M

networks:
  frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

  backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16

volumes:
  postgres_data:
    driver: local
  postgres_backups:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  nginx_logs:
    driver: local