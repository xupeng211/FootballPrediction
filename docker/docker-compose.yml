version: '3.8'

# 基础Docker Compose配置
# 支持通过环境变量ENV切换不同环境
# 使用方式：
# - 开发环境：docker-compose up（自动加载override）
# - 生产环境：ENV=production docker-compose up
# - 测试环境：ENV=test docker-compose run --rm app pytest

services:
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    env_file:
      - ./docker/environments/.env.${ENV:-development}
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../src:/app/src:${MOUNT_MODE:-rw}
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 ${RELOAD_FLAG}
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql+asyncpg://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db:5432/${DB_NAME:-football_prediction}
      - REDIS_URL=redis://redis:6379/0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${DB_NAME:-football_prediction}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-football_prediction}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - backend

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    networks:
      - backend

  # 可选服务：通过环境变量控制
  nginx:
    profiles:
      - production
      - staging
    image: nginx:alpine
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ../config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../config/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - frontend
      - backend

  # 监控服务
  prometheus:
    profiles:
      - monitoring
      - production
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ../config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - monitoring

  grafana:
    profiles:
      - monitoring
      - production
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ../config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    networks:
      - monitoring

  # 日志收集
  loki:
    profiles:
      - logging
      - production
    image: grafana/loki:latest
    ports:
      - "${LOKI_PORT:-3100}:3100"
    volumes:
      - loki_data:/loki
      - ../config/loki/loki.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - monitoring

  # 任务队列
  celery-worker:
    profiles:
      - celery
      - production
    build:
      context: ..
      dockerfile: docker/Dockerfile
    env_file:
      - ./docker/environments/.env.${ENV:-development}
    command: celery -A src.tasks.celery_app worker --loglevel=${LOG_LEVEL:-INFO}
    volumes:
      - ../src:/app/src:${MOUNT_MODE:-rw}
    depends_on:
      - db
      - redis
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql+asyncpg://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db:5432/${DB_NAME:-football_prediction}
      - REDIS_URL=redis://redis:6379/0
    restart: unless-stopped
    networks:
      - backend

  celery-beat:
    profiles:
      - celery
      - production
    build:
      context: ..
      dockerfile: docker/Dockerfile
    env_file:
      - ./docker/environments/.env.${ENV:-development}
    command: celery -A src.tasks.celery_app beat --loglevel=${LOG_LEVEL:-INFO}
    volumes:
      - ../src:/app/src:${MOUNT_MODE:-rw}
      - celerybeat_data:/app/celerybeat
    depends_on:
      - db
      - redis
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=postgresql+asyncpg://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db:5432/${DB_NAME:-football_prediction}
      - REDIS_URL=redis://redis:6379/0
    restart: unless-stopped
    networks:
      - backend

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  celerybeat_data:
    driver: local

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
  monitoring:
    driver: bridge
