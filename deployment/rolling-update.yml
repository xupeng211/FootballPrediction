# Rolling Update Strategy
# 滚动更新策略配置
# 生成时间: 2025-10-26 20:57:41

apiVersion: apps/v1
kind: Deployment
metadata:
  name: footballprediction-api
  namespace: footballprediction
  labels:
    app: footballprediction-api
    version: v1
spec:
  replicas: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app: footballprediction-api
  template:
    metadata:
      labels:
        app: footballprediction-api
        version: v1
    spec:
      containers:
      - name: api
        image: footballprediction/api:{{ values.imageTag }}
        ports:
        - containerPort: 8000
        env:
        - name: ENV
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: footballprediction-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: footballprediction-secrets
              key: redis-url
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 15"]
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30

---
apiVersion: v1
kind: Service
metadata:
  name: footballprediction-api-service
  namespace: footballprediction
  labels:
    app: footballprediction-api
spec:
  selector:
    app: footballprediction-api
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 8000
  type: ClusterIP

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: footballprediction-api-hpa
  namespace: footballprediction
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: footballprediction-api
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: footballprediction-api-pdb
  namespace: footballprediction
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: footballprediction-api

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: footballprediction-api-config
  namespace: footballprediction
data:
  config.yml: |
    service:
      name: "footballprediction-api"
      version: "{{ values.imageTag }}"
      environment: "production"

    logging:
      level: "INFO"
      format: "json"

    monitoring:
      enabled: true
      metrics_path: "/metrics"

    database:
      pool_size: 20
      max_overflow: 30
      pool_timeout: 30
      pool_recycle: 3600

    redis:
      max_connections: 50
      retry_on_timeout: true

    features:
      cache_enabled: true
      rate_limiting: true
      request_logging: true
