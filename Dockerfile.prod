# =================================================================
# 足球预测系统 - 生产环境 Dockerfile
# =================================================================
# 使用方式:
# docker build -f Dockerfile.prod --build-arg GIT_COMMIT=$(git rev-parse HEAD) --build-arg GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD) -t football-prediction:latest .
#
# 安全扫描:
# docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/Library/Caches:/root/.cache/ aquasec/trivy:latest image football-prediction:latest

# 基础镜像 - 使用官方 Python 3.11 slim 版本
FROM python:3.11.9-slim-bullseye AS base

# 构建参数
ARG APP_VERSION=1.0.0
ARG BUILD_DATE
ARG GIT_COMMIT
ARG GIT_BRANCH
ARG VCS_URL

# 设置标签信息
LABEL maintainer="football-prediction-team@example.com" \
      version="${APP_VERSION}" \
      description="Football Prediction System - Production Image" \
      org.label-schema.build-date="${BUILD_DATE}" \
      org.label-schema.name="football-prediction" \
      org.label-schema.description="Football Prediction System" \
      org.label-schema.url="https://github.com/xupeng211/FootballPrediction" \
      org.label-schema.vcs-ref="${GIT_COMMIT}" \
      org.label-schema.vcs-branch="${GIT_BRANCH}" \
      org.label-schema.vcs-url="${VCS_URL}" \
      org.label-schema.vendor="Football Prediction Team" \
      org.label-schema.schema-version="1.0" \
      security.scan.enabled="true" \
      security.scan.date="${BUILD_DATE}"

# 环境变量设置
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PYTHONHASHSEED=random \
    PIP_DEFAULT_TIMEOUT=60 \
    DEBIAN_FRONTEND=noninteractive

# ===================
# 依赖安装阶段
# ===================
FROM base AS dependencies

# 安装系统构建依赖 (网络优化版本)
RUN echo "Acquire::Retries \"3\";" > /etc/apt/apt.conf.d/80-retries && \
    echo "Acquire::http::Timeout \"10\";" >> /etc/apt/apt.conf.d/80-retries && \
    echo "Acquire::https::Timeout \"10\";" >> /etc/apt/apt.conf.d/80-retries && \
    apt-get update --fix-missing || apt-get update && \
    apt-get install -y --no-install-recommends --fix-missing \
    build-essential \
    libpq-dev \
    libffi-dev \
    libssl-dev \
    curl \
    ca-certificates \
    gnupg2 \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && find /var/log -type f -delete

# 复制依赖文件
COPY requirements/ requirements/

# 升级 pip 到最新版本
RUN pip install --upgrade pip==24.2

# 安装 Python 依赖（使用缓存挂载优化）
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=cache,target=/var/cache/apt \
    pip install --no-compile --no-warn-script-location \
    -r requirements/requirements.lock

# ===================
# 安全扫描阶段
# ===================
FROM dependencies AS security-scan

# 安装安全扫描工具
RUN pip install safety bandit

# 运行安全检查
RUN safety check --json --output safety-report.json || true
RUN bandit -r requirements/ -f json -o bandit-report.json || true

# ===================
# 代码构建阶段
# ===================
FROM dependencies AS builder

# 创建非 root 用户
RUN groupadd -r -g 1001 appuser && \
    useradd -r -u 1001 -g appuser -m -d /app appuser

# 设置工作目录
WORKDIR /app

# 复制应用代码
COPY --chown=appuser:appuser . .

# 编译 Python 文件以优化启动时间
RUN python -m compileall src/ || true

# 移除不必要的文件以减小镜像大小
RUN rm -rf \
    .git \
    .github \
    docs/ \
    tests/ \
    docker/ \
    scripts/development/ \
    scripts/ssl/ \
    *.md \
    .editorconfig \
    .gitignore \
    Makefile \
    pytest.ini \
    .coverage* \
    coverage.xml \
    htmlcov/ \
    .pytest_cache/ \
    .mypy_cache/ \
    .ruff_cache/

# 清理 Python 缓存和编译文件
RUN find . -name "*.pyc" -delete && \
    find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true && \
    find . -name "*.pyo" -delete && \
    find . -name "*.orig" -delete && \
    find . -name "*.rej" -delete

# 创建必要的运行时目录
RUN mkdir -p \
    logs \
    tmp \
    static \
    uploads && \
    chown -R appuser:appuser /app

# ===================
# 生产运行时阶段
# ===================
FROM python:3.11.9-slim-bullseye AS production

# 继承构建参数
ARG APP_VERSION
ARG BUILD_DATE
ARG GIT_COMMIT

# 安装运行时系统依赖
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    curl \
    ca-certificates \
    dumb-init \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean \
    && find /var/log -type f -delete

# 创建应用用户
RUN groupadd -r -g 1001 appuser && \
    useradd -r -u 1001 -g appuser -m -d /app appuser

# 设置工作目录
WORKDIR /app

# 从构建阶段复制 Python 包
COPY --from=builder --chown=appuser:appuser /root/.local /home/appuser/.local

# 从构建阶段复制应用代码
COPY --from=builder --chown=appuser:appuser /app .

# 创建启动脚本
RUN echo '#!/bin/sh\n\
set -e\n\
echo "Starting Football Prediction System v'${APP_VERSION}'"\n\
echo "Git Commit: '${GIT_COMMIT}'"\n\
echo "Build Date: '${BUILD_DATE}'"\n\
echo "=================================="\n\
\n\
# 等待数据库服务\n\
if [ "$DATABASE_URL" ]; then\n\
    echo "Waiting for database..."\n\
    timeout 60 bash -c "until curl -f $DATABASE_URL/health; do sleep 1; done"\n\
fi\n\
\n\
# 等待 Redis 服务\n\
if [ "$REDIS_URL" ]; then\n\
    echo "Waiting for Redis..."\n\
    timeout 60 bash -c "until redis-cli -u $REDIS_URL ping; do sleep 1; done"\n\
fi\n\
\n\
# 运行数据库迁移\n\
if [ "$RUN_MIGRATIONS" = "true" ]; then\n\
    echo "Running database migrations..."\n\
    python -m alembic upgrade head\n\
fi\n\
\n\
# 启动应用\n\
echo "Starting application..."\n\
exec dumb-init "$@"' > /app/entrypoint.sh && \
    chmod +x /app/entrypoint.sh && \
    chown appuser:appuser /app/entrypoint.sh

# 设置用户
USER appuser

# 设置环境变量
ENV PATH=/home/appuser/.local/bin:$PATH \
    PYTHONPATH=/app/src \
    HOME=/app

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# 暴露端口
EXPOSE 8000

# 安全默认配置
ENV RUN_MIGRATIONS=false \
    DEBUG=false \
    LOG_LEVEL=INFO

# 启动入口点
ENTRYPOINT ["/app/entrypoint.sh"]

# 默认启动命令
CMD ["uvicorn", "src.main:app", \
     "--host", "0.0.0.0", \
     "--port", "8000", \
     "--workers", "4", \
     "--worker-class", "uvicorn.workers.UvicornWorker", \
     "--access-log", \
     "--log-level", "info"]

# ===================
# 最小化运行时镜像
# ===================
FROM production AS runtime-minimal

# 移除开发工具和文档
RUN if [ -d "/home/appuser/.local/share" ]; then \
        rm -rf /home/appuser/.local/share/man; \
    fi && \
    rm -rf /home/appuser/.local/lib/python*/site-packages/*/tests && \
    find /home/appuser/.local -name "*.a" -delete && \
    find /home/appuser/.local -name "*.la" -delete && \
    find /home/appuser/.local -name "*.pyc" -delete && \
    find /home/appuser/.local -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

# 验证安装
RUN python -c "import src.main; print('Application import successful')" && \
    which uvicorn && \
    python --version

# 最终标签
LABEL org.label-schema.build-stage="runtime-minimal" \
      final.image="true"