version: '3.8'

# Staging 环境配置
# 用于端到端测试和生产前验证
# 模拟真实生产环境，但不暴露公网

services:
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    env_file:
      - ./docker/environments/.env.staging
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    volumes:
      - ../src:/app/src:ro  # 只读挂载
      - ../logs:/app/logs
    command: uvicorn src.main:app --host 0.0.0.0 --port 8000 --workers 4
    environment:
      - PYTHONPATH=/app
      - ENVIRONMENT=staging
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: football_staging
      POSTGRES_USER: staging_user
      POSTGRES_PASSWORD: ${STAGING_DB_PASSWORD:-staging_secure_password_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5434:5432"  # 不同端口避免冲突
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ../scripts/init-staging-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./backups:/backups
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U staging_user -d football_staging"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 2G

  redis:
    image: redis:7-alpine
    ports:
      - "6381:6379"  # 不同端口避免冲突
    volumes:
      - redis_staging_data:/data
      - ./redis/staging.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 10
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    ports:
      - "2182:2181"
    volumes:
      - zookeeper_staging_data:/var/lib/zookeeper/data
      - zookeeper_staging_logs:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9094:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168  # 7 days
      KAFKA_LOG_RETENTION_BYTES: 10737418240  # 10GB
      KAFKA_LOG_SEGMENT_BYTES: 1073741824  # 1GB
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_MESSAGE_MAX_BYTES: 1000000
      KAFKA_NUM_NETWORK_THREADS: 4
      KAFKA_NUM_IO_THREADS: 8
      KAFKA_SOCKET_SEND_BUFFER_BYTES: 102400
      KAFKA_SOCKET_RECEIVE_BUFFER_BYTES: 102400
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 104857600
    volumes:
      - kafka_staging_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G

  # MLflow Staging 服务
  mlflow:
    image: python:3.11-slim
    ports:
      - "5002:5000"
    volumes:
      - mlflow_staging_data:/mlflow
      - ../models:/models:ro
    command: >
      bash -c "
        pip install mlflow psycopg2-binary gunicorn &&
        gunicorn -w 4 -b 0.0.0.0:5000
        -e FLASK_ENV=staging
        'mlflow.server:app'
        --backend-store-uri postgresql://staging_user:${STAGING_DB_PASSWORD:-staging_secure_password_2024}@db:5432/football_staging
        --default-artifact-root /mlflow/artifacts
        --host 0.0.0.0
        --port 5000
      "
    environment:
      - DATABASE_URL=postgresql://staging_user:${STAGING_DB_PASSWORD:-staging_secure_password_2024}@db:5432/football_staging
      - MLFLOW_BACKEND_STORE_URI=postgresql://staging_user:${STAGING_DB_PASSWORD:-staging_secure_password_2024}@db:5432/football_staging
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
      - MLFLOW_EXPERIMENT_NAME=staging_experiment
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Nginx 负载均衡器
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/staging.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ../logs/nginx:/var/log/nginx
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

  # 监控服务
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus-staging.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_staging_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    volumes:
      - grafana_staging_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    restart: unless-stopped

  # 日志收集
  loki:
    image: grafana/loki:latest
    ports:
      - "3101:3100"
    volumes:
      - loki_staging_data:/loki
      - ./monitoring/loki-staging.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped

  # 备份服务
  backup:
    image: postgres:15-alpine
    environment:
      PGPASSWORD: ${STAGING_DB_PASSWORD:-staging_secure_password_2024}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    command: >
      bash -c "
        chmod +x /backup.sh &&
        while true; do
          /backup.sh staging_user football_staging &&
          sleep 86400
        done
      "
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped

  # 数据迁移服务（按需运行）
  migration:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    env_file:
      - ./docker/environments/.env.staging
    volumes:
      - ../src:/app/src:ro
      - ../alembic:/app/alembic:ro
    command: >
      bash -c "
        echo 'Running database migrations...' &&
        alembic upgrade head &&
        echo 'Migrations completed successfully'
      "
    environment:
      - DATABASE_URL=postgresql://staging_user:${STAGING_DB_PASSWORD:-staging_secure_password_2024}@db:5432/football_staging
      - PYTHONPATH=/app
    depends_on:
      db:
        condition: service_healthy
    restart: "no"
    profiles:
      - migration

volumes:
  postgres_staging_data:
    driver: local
  redis_staging_data:
    driver: local
  kafka_staging_data:
    driver: local
  zookeeper_staging_data:
    driver: local
  zookeeper_staging_logs:
    driver: local
  mlflow_staging_data:
    driver: local
  prometheus_staging_data:
    driver: local
  grafana_staging_data:
    driver: local
  loki_staging_data:
    driver: local

networks:
  default:
    name: football-staging-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16