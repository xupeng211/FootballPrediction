# Multi-Service Docker Compose
# 多服务Docker Compose配置
# 生成时间: 2025-10-26 20:57:41

version: '3.8'

services:
  # API Gateway
  api-gateway:
    build: .
    ports:
      - "8080:8000"
    environment:
      - ENV=production
      - DATABASE_URL=postgresql://postgres:password@db:5432/footballprediction
      - REDIS_URL=redis://redis:6379
    depends_on:
      - db
      - redis
    networks:
      - microservices-network
    restart: unless-stopped

  # 预测服务
  prediction-service:
    build: ./microservices/prediction
    ports:
      - "8001:8001"
    environment:
      - SERVICE_NAME=prediction
      - DATABASE_URL=postgresql://postgres:password@db:5432/footballprediction_prediction
      - REDIS_URL=redis://redis:6379
    depends_on:
      - db
      - redis
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 数据采集服务
  data-collection-service:
    build: ./microservices/data_collection
    ports:
      - "8002:8002"
    environment:
      - SERVICE_NAME=data_collection
      - DATABASE_URL=postgresql://postgres:password@db:5432/footballprediction_data
      - REDIS_URL=redis://redis:6379
    depends_on:
      - db
      - redis
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 用户管理服务
  user-management-service:
    build: ./microservices/user_management
    ports:
      - "8003:8003"
    environment:
      - SERVICE_NAME=user_management
      - DATABASE_URL=postgresql://postgres:password@db:5432/footballprediction_users
      - REDIS_URL=redis://redis:6379
    depends_on:
      - db
      - redis
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 分析服务
  analytics-service:
    build: ./microservices/analytics
    ports:
      - "8004:8004"
    environment:
      - SERVICE_NAME=analytics
      - DATABASE_URL=postgresql://postgres:password@db:5432/footballprediction_analytics
      - REDIS_URL=redis://redis:6379
    depends_on:
      - db
      - redis
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 数据库
  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=footballprediction
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    ports:
      - "5432:5432"
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis缓存
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api-gateway
    networks:
      - microservices-network
    restart: unless-stopped

  # 监控服务
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - microservices-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - microservices-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  microservices-network:
    driver: bridge
