name: 🛡️ 质量守护系统集成

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'scripts/quality_*.py'
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
  schedule:
    # 每小时运行一次质量检查
    - cron: '0 * * * *'

env:
  PYTHON_VERSION: '3.11'
  QUALITY_REPORT_DIR: 'quality_reports'

jobs:
  # 质量守护系统完整检查
  comprehensive-quality-check:
    name: 🛡️ 全面质量守护检查
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: 📥 Checkout代码
        uses: actions/checkout@v4

      - name: 🐍 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: |
            requirements/requirements.lock
            pyproject.toml

      - name: 📦 安装依赖
        run: |
          pip install --upgrade pip
          pip install -r requirements/requirements.lock
          pip install ruff mypy bandit pip-audit pytest pytest-cov

      - name: 📁 创建质量报告目录
        run: mkdir -p ${{ env.QUALITY_REPORT_DIR }}

      - name: 🛡️ 运行质量守护系统
        env:
          REPORT_FORMAT: json
          REPORT_OUTPUT: ${{ env.QUALITY_REPORT_DIR }}/quality_guardian_report.json
        run: |
          echo "🛡️ 启动质量守护系统..."
          python3 scripts/quality_guardian.py --check-only --format json --output "$REPORT_OUTPUT"

      - name: 🔧 智能修复尝试
        if: failure()
        run: |
          echo "🔧 尝试智能修复..."
          python3 scripts/smart_quality_fixer.py --auto-fix || true

      - name: 📊 生成质量评分
        run: |
          echo "📊 计算质量评分..."
          python3 -c "
import json
import os

report_file = '${{ env.QUALITY_REPORT_DIR }}/quality_guardian_report.json'
if os.path.exists(report_file):
    with open(report_file, 'r') as f:
        report = json.load(f)

    # 计算综合质量评分
    scores = []
    if 'syntax' in report:
        scores.append(100 if report['syntax']['passed'] else 0)
    if 'style' in report:
        scores.append(report['style'].get('score', 0))
    if 'type_check' in report:
        scores.append(report['type_check'].get('score', 0))
    if 'security' in report:
        scores.append(report['security'].get('score', 0))

    overall_score = sum(scores) / len(scores) if scores else 0

    # 生成评分报告
    score_report = {
        'timestamp': '${{ github.run_started_at }}',
        'commit': '${{ github.sha }}',
        'overall_score': round(overall_score, 2),
        'detailed_scores': {
            'syntax': report.get('syntax', {}).get('score', 0),
            'style': report.get('style', {}).get('score', 0),
            'type_check': report.get('type_check', {}).get('score', 0),
            'security': report.get('security', {}).get('score', 0)
        },
        'recommendations': []
    }

    # 添加建议
    if overall_score < 80:
        score_report['recommendations'].append('建议运行智能修复工具')
    if overall_score < 60:
        score_report['recommendations'].append('建议手动审查代码质量')

    with open('${{ env.QUALITY_REPORT_DIR }}/quality_score.json', 'w') as f:
        json.dump(score_report, f, indent=2)

    print(f'🎯 质量评分: {overall_score:.2f}/100')
    "

      - name: 📤 上传质量报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-guardian-reports
          path: ${{ env.QUALITY_REPORT_DIR }}/
          retention-days: 30

      - name: 💬 质量检查评论 (PR)
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          echo "💬 生成PR质量检查评论..."

          if [ -f "${{ env.QUALITY_REPORT_DIR }}/quality_score.json" ]; then
            python3 -c "
import json

with open('${{ env.QUALITY_REPORT_DIR }}/quality_score.json', 'r') as f:
    score_report = json.load(f)

score = score_report['overall_score']
emoji = '🟢' if score >= 80 else '🟡' if score >= 60 else '🔴'

comment = f'''## 🛡️ 质量守护系统检查报告

{emoji} **综合质量评分**: {score}/100

### 📊 详细评分
- **语法检查**: {score_report['detailed_scores']['score']}/100
- **代码风格**: {score_report['detailed_scores']['style']}/100
- **类型检查**: {score_report['detailed_scores']['type_check']}/100
- **安全检查**: {score_report['detailed_scores']['security']}/100

### 🔧 AI编程助手建议
'''

for rec in score_report['recommendations']:
    comment += f'- {rec}\n'

comment += '''
### 📋 质量提升步骤
1. 运行本地检查: `python3 scripts/quality_guardian.py --check-only`
2. 尝试自动修复: `python3 scripts/smart_quality_fixer.py`
3. 验证修复效果: `python3 scripts/improvement_monitor.py`

---
*🛡️ 此报告由质量守护系统自动生成*
'''

with open('quality_comment.md', 'w') as f:
    f.write(comment)
"

            gh pr comment "$PR_NUMBER" --body "$(cat quality_comment.md)"
          fi

  # 持续改进引擎集成
  continuous-improvement:
    name: 🔄 持续改进引擎
    runs-on: ubuntu-latest
    needs: comprehensive-quality-check
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 20

    steps:
      - name: 📥 Checkout代码
        uses: actions/checkout@v4

      - name: 🐍 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: |
            requirements/requirements.lock
            pyproject.toml

      - name: 📦 安装依赖
        run: |
          pip install --upgrade pip
          pip install -r requirements/requirements.lock

      - name: 🔄 运行持续改进引擎
        env:
          IMPROVEMENT_MODE: 'automated'
          ANALYSIS_DEPTH: 'comprehensive'
        run: |
          echo "🔄 启动持续改进引擎..."
          python3 scripts/continuous_improvement_engine.py \
            --automated \
            --analysis-depth comprehensive \
            --generate-report || true

      - name: 📊 生成改进报告
        run: |
          echo "📊 生成改进报告..."
          python3 scripts/improvement_monitor.py --export-formats json,markdown || true

      - name: 📤 上传改进报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: continuous-improvement-reports
          path: |
            improvement_reports/
            continuous_improvement_*.json
          retention-days: 30

  # AI编程助手友好性检查
  ai-programming-friendliness:
    name: 🤖 AI编程友好性检查
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout代码
        uses: actions/checkout@v4

      - name: 🐍 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 安装依赖
        run: |
          pip install --upgrade pip
          pip install -r requirements/requirements.lock

      - name: 🤖 AI编程友好性检查
        run: |
          echo "🤖 检查AI编程友好性..."

          # 检查关键脚本
          ai_scripts=(
            "scripts/quality_guardian.py"
            "scripts/smart_quality_fixer.py"
            "scripts/improvement_monitor.py"
            "scripts/ai_issue_analyzer.py"
            "scripts/ci_performance_monitor.py"
          )

          missing_scripts=()
          for script in "${ai_scripts[@]}"; do
            if [ ! -f "$script" ]; then
              missing_scripts+=("$script")
            fi
          done

          if [ ${#missing_scripts[@]} -gt 0 ]; then
            echo "❌ 缺失AI编程脚本:"
            printf '%s\n' "${missing_scripts[@]}"
            exit 1
          fi

          # 检查工作流
          ai_workflows=(
            ".github/workflows/ai-feedback.yml"
            ".github/workflows/project-health-monitor.yml"
            ".github/workflows/issue-tracking-pipeline.yml"
          )

          missing_workflows=()
          for workflow in "${ai_workflows[@]}"; do
            if [ ! -f "$workflow" ]; then
              missing_workflows+=("$workflow")
            fi
          done

          if [ ${#missing_workflows[@]} -gt 0 ]; then
            echo "❌ 缺失AI编程工作流:"
            printf '%s\n' "${missing_workflows[@]}"
            exit 1
          fi

          echo "✅ AI编程友好性检查通过"

      - name: 📚 生成AI编程指南
        run: |
          echo "📚 生成AI编程使用指南..."
          python3 -c "
import json
from datetime import datetime

# 生成AI编程快速指南
guide = '''# 🤖 AI编程助手快速使用指南

**生成时间**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## 🚀 Claude Code 快速启动

### 代码修改后立即执行
\`\`\`bash
# 1. 语法检查
python3 scripts/smart_quality_fixer.py --syntax-only

# 2. 全面质量检查
python3 scripts/quality_guardian.py --check-only

# 3. 智能修复发现问题
python3 scripts/smart_quality_fixer.py

# 4. 验证修复效果
python3 scripts/improvement_monitor.py
\`\`\`

### 批量代码修改后处理
\`\`\`bash
# 运行完整改进周期
./scripts/start_improvement.sh

# 或启动自动化改进
python3 scripts/continuous_improvement_engine.py --automated --interval 30

# 监控改进状态
python3 scripts/improvement_monitor.py
\`\`\`

### 每日开发前检查清单
- [ ] 运行质量状态检查: \`python3 scripts/quality_guardian.py --check-only\`
- [ ] 检查改进趋势: \`python3 scripts/improvement_monitor.py\`
- [ ] 验证环境健康: \`make env-check\`
- [ ] 运行快速测试: \`make test-quick\`

### 提交前最终验证
\`\`\`bash
# 完整预推送验证
make prepush

# 或手动执行
python3 scripts/quality_guardian.py --check-only
python3 scripts/smart_quality_fixer.py
python3 scripts/improvement_monitor.py
make test-quick
\`\`\`

## 🛡️ 质量守护系统

### 核心组件
1. **质量守护器** (\`scripts/quality_guardian.py\`) - 全面质量检查
2. **智能修复器** (\`scripts/smart_quality_fixer.py\`) - 自动问题修复
3. **改进监控器** (\`scripts/improvement_monitor.py\`) - 改进状态跟踪
4. **持续改进引擎** (\`scripts/continuous_improvement_engine.py\`) - 自动化改进

### 使用建议
- 代码修改后始终运行质量检查
- 信任智能修复器的建议
- 关注改进监控器的趋势
- 利用持续改进引擎进行自动化优化

---
*📚 此指南由AI编程友好性检查自动生成*
'''

with open('AI_PROGRAMMING_GUIDE.md', 'w') as f:
    f.write(guide)

print('📚 AI编程指南已生成')
"

      - name: 📤 上传AI编程指南
        uses: actions/upload-artifact@v4
        with:
          name: ai-programming-guide
          path: AI_PROGRAMMING_GUIDE.md
          retention-days: 7