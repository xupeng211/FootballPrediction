name: 📚 Documentation Preview

on:
  pull_request:
    branches: [main, develop]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'

# 取消并行的运行，避免资源浪费
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'

jobs:
  # ===== 构建预览 =====
  preview:
    name: 🔨 构建预览
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout代码
        uses: actions/checkout@v4.1.6

      - name: 🐍 设置Python环境
        uses: actions/setup-python@v4.7.1
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material
          pip install -r requirements/requirements.lock

      - name: 🔨 构建预览
        run: |
          echo "🔨 构建PR预览..."

          # 清理之前的构建
          rm -rf site/

          # 构建文档
          mkdocs build --quiet

          # 添加预览标识
          if [ -f "site/index.html" ]; then
            sed -i 's/<title>/<!-- PR Preview -->\n<title>/g' site/index.html
          fi

      - name: 📦 上传预览
        uses: actions/upload-artifact@v3.1.3
        with:
          name: docs-preview-${{ github.event.number }}
          path: site/
          retention-days: 7

  # ===== PR评论 =====
  pr-comment:
    name: 💬 PR评论
    runs-on: ubuntu-latest
    needs: preview
    if: github.event_name == 'pull_request'
    timeout-minutes: 5
    permissions:
      pull-requests: write

    steps:
      - name: 💬 添加预览链接
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.number;

            // 查找现有评论
            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: prNumber,
            });

            const existingComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('📚 文档预览')
            );

            const commentBody = '## 📚 文档预览\n\n' +
              '🔗 **预览链接**: [查看文档预览](https://github-actions-viewer.pages.dev/view/' + owner + '/' + repo + '/docs-preview-' + prNumber + '/index.html)\n\n' +
              '📋 **预览特性**:\n' +
              '- 🔄 实时预览文档更改\n' +
              '- 📱 响应式设计测试\n' +
              '- 🔍 搜索功能验证\n' +
              '- 🎨 主题样式检查\n\n' +
              '📝 **注意事项**:\n' +
              '- 预览链接将在7天后自动失效\n' +
              '- 部署到正式环境后会替换预览\n' +
              '- 如有问题，请在PR中反馈\n\n' +
              '---\n' +
              '🤖 由GitHub Actions自动生成';

            if (existingComment) {
              // 更新现有评论
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: existingComment.id,
                body: commentBody
              });
              console.log('Updated existing comment');
            } else {
              // 创建新评论
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: prNumber,
                body: commentBody
              });
              console.log('Created new comment');
            }

  # ===== 质量检查 =====
  quality-check:
    name: 🔍 质量检查
    runs-on: ubuntu-latest
    needs: preview
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout代码
        uses: actions/checkout@v4.1.6

      - name: 📦 下载预览
        uses: actions/download-artifact@v3.0.2
        with:
          name: docs-preview-${{ github.event.number }}
          path: site/

      - name: 🔍 执行质量检查
        run: |
          echo "🔍 执行文档质量检查..."

          # 检查HTML有效性
          HTML_FILES=$(find site -name "*.html" | wc -l)
          echo "📄 HTML文件数量：$HTML_FILES"

          # 检查关键页面
          CRITICAL_PAGES="index.html"
          for page in $CRITICAL_PAGES; do
            if [ -f "site/$page" ]; then
              echo "✅ $page 存在"
            else
              echo "❌ $page 缺失"
              exit 1
            fi
          done

          # 检查资源文件
          CSS_FILES=$(find site -name "*.css" | wc -l)
          JS_FILES=$(find site -name "*.js" | wc -l)
          echo "🎨 CSS文件：$CSS_FILES"
          echo "⚡ JS文件：$JS_FILES"

          # 生成质量报告
          echo "📊 生成质量报告..."
          echo "预览构建成功，质量检查通过！"

  # ===== 状态检查 =====
  status:
    name: ✅ 状态检查
    runs-on: ubuntu-latest
    needs: [preview, quality-check]
    if: always()
    timeout-minutes: 5

    steps:
      - name: ✅ 检查预览状态
        if: needs.preview.result == 'success' && needs.quality-check.result == 'success'
        run: |
          echo "✅ 预览构建成功"
          echo "🔗 预览链接已添加到PR评论"

      - name: ❌ 检查失败状态
        if: needs.preview.result == 'failure' || needs.quality-check.result == 'failure'
        run: |
          echo "❌ 预览构建失败"
          echo "🔗 请查看Actions日志获取详细信息"

      - name: 📊 生成状态报告
        run: |
          echo "📊 预览状态报告："
          echo "预览构建：${{ needs.preview.result }}"
          echo "质量检查：${{ needs.quality-check.result }}"
          echo "PR编号：${{ github.event.number }}"