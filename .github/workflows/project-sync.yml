name: Project Sync

on:
  # PR 关闭时触发看板同步
  pull_request:
    types: [closed]
  # 手动触发同步
  workflow_dispatch:
    inputs:
      task:
        description: 'Sync task to run'
        required: true
        default: 'kanban'
        type: choice
        options:
        - kanban
        - pr-update
        - issue-sync

jobs:
  # 看板同步
  kanban-sync:
    name: Kanban Synchronization
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event.inputs.task == 'kanban'

    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Git config
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Run kanban audit
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
        run: |
          python scripts/kanban_audit.py \
            --repo ${{ github.repository }} \
            --pr-number $PR_NUMBER \
            --update-kanban

  # PR状态更新
  pr-status-update:
    name: Update PR Status
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event.inputs.task == 'pr-update'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate history report
        run: |
          python scripts/kanban_history.py \
            --days 7 \
            --output docs/kanban/history_$(date +%Y%m%d).md

      - name: Update kanban board
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/kanban/
          git commit -m "chore: update kanban history [skip ci]" || exit 0
          git push

  # Issues同步
  issues-sync:
    name: Synchronize Issues
    runs-on: ubuntu-latest
    if: github.event.inputs.task == 'issue-sync'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check kanban health
        run: |
          python scripts/kanban_health_check.py \
            --repo ${{ github.repository }} \
            --output reports/kanban_health_$(date +%Y%m%d).md

      - name: Create issues for problems
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '📋 Kanban Health Issues',
              body: 'Kanban health check found issues. See reports for details.',
              labels: ['kanban', 'maintenance']
            })

  # Issues同步（简化版）

    permissions:
      issues: write

    steps:
      - name: Sync issues
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # 使用 GitHub CLI 同步 issues
          gh issue list --repo ${{ github.repository }} --state all --limit 100 > issues_list.json

          # 检查过期的 issues
          python scripts/sync_issues.py \
            --repo ${{ github.repository }} \
            --days-stale 30 \
            --auto-close

  # 删除清理任务（移到maintenance工作流）

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cleanup old branches
        run: |
          # 删除已合并的 PR 分支
          gh pr list --repo ${{ github.repository }} --merged --json headRefName | \
            jq -r '.[].headRefName' | \
            grep -v '^main$' | \
            grep -v '^develop$' | \
            xargs -I {} git branch -D {} 2>/dev/null || true

      - name: Cleanup old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            const cutoffDate = new Date();
            cutoffDate.setDate(cutoffDate.getDate() - 90);

            for (const run of artifacts.data.workflow_runs) {
              if (new Date(run.created_at) < cutoffDate && run.status === 'completed') {
                await github.rest.actions.deleteWorkflowRun({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: run.id
                });
              }
            }

  # 删除文档更新（移到maintenance工作流）

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update API docs
        run: |
          pip install -r requirements.txt
          python scripts/generate_api_docs.py

      - name: Update README stats
        run: |
          python scripts/update_readme_stats.py

      - name: Commit docs update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/ README.md
          git commit -m "chore: auto-update documentation [skip ci]" || exit 0
          git push