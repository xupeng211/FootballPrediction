name: CI Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: football_prediction_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
        pip install -e .

    - name: Set up environment variables
      run: |
        echo "TEST_DB_HOST=localhost" >> $GITHUB_ENV
        echo "TEST_DB_PORT=5432" >> $GITHUB_ENV
        echo "TEST_DB_NAME=football_prediction_test" >> $GITHUB_ENV
        echo "TEST_DB_USER=postgres" >> $GITHUB_ENV
        echo "TEST_DB_PASSWORD=postgres" >> $GITHUB_ENV
        echo "ENVIRONMENT=test" >> $GITHUB_ENV

    - name: Wait for DB
      run: until pg_isready -h localhost -p 5432; do sleep 2; done

    - name: Advanced Test Step by Step
      run: |
        echo "=== 基础检查全部成功，开始高级测试 ==="
        export PYTHONPATH="$(pwd):${PYTHONPATH}"
        echo "=== 测试1: 运行单个简单测试 ==="
        python -m pytest tests/test_basic.py::TestProjectBasics::test_project_structure -v
        echo "=== 测试1成功！ ==="
        echo "=== 测试2: 测试coverage导入 ==="
        python -c "import coverage; print('Coverage导入成功')"
        echo "=== 测试3: 运行带coverage的测试 ==="
        python -m pytest tests/test_basic.py::TestProjectBasics::test_project_structure --cov=core -v
        echo "=== 测试3成功！ ==="
        echo "=== 测试4: 检查make命令 ==="
        make --version
        echo "=== 测试5: 运行make env-check ==="
        make env-check
        echo "=== 所有高级测试成功！准备运行完整CI ==="

    - name: Upload coverage to Codecov
      if: github.event_name == 'push'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          coverage.xml
          htmlcov/
          bandit-report.json

  ci-verify:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose --version

    - name: Run CI verification script
      run: |
        chmod +x ./ci-verify.sh
        ./ci-verify.sh

    - name: Upload CI verification results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ci-verify-results
        path: |
          coverage.xml
          htmlcov/
