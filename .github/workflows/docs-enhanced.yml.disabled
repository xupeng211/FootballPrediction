name: 📚 Enhanced Documentation CI/CD

on:
  push:
    branches: [main, develop, docs/**]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - '.github/workflows/docs-enhanced.yml'
      - 'scripts/docs_ci_pipeline.py'
  pull_request:
    branches: [main, develop]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'scripts/docs_ci_pipeline.py'
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to GitHub Pages'
        required: false
        default: false
        type: boolean
      environment:
        description: 'Target environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      quality_check:
        description: 'Run quality checks'
        required: false
        default: true
        type: boolean

# 取消并行的运行，避免资源浪费
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ===== 阶段 1: 环境准备 =====
  setup:
    name: 🔧 环境准备
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}

    steps:
      - name: 📥 Checkout代码
        uses: actions/checkout@v4.1.6
        with:
          fetch-depth: 0

      - name: 🐍 设置Python环境
        uses: actions/setup-python@v4.7.1
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 安装Python依赖
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material
          pip install -r requirements/requirements.lock

      - name: 📋 设置Node.js环境
        uses: actions/setup-node@v4.0.2
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 安装Node.js依赖
        run: |
          npm install -g markdown-link-check
          npm install -g htmlhint

      - name: 💾 缓存依赖
        id: cache
        uses: actions/cache@v3.3.2
        with:
          path: |
            ~/.cache/pip
            ~/.npm
            node_modules
          key: ${{ runner.os }}-docs-${{ hashFiles('**/requirements*.lock', '**/package*.json') }}
          restore-keys: |
            ${{ runner.os }}-docs-

  # ===== 阶段 2: 文档验证 =====
  validate:
    name: 🔍 文档验证
    runs-on: ubuntu-latest
    needs: setup
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout代码
        uses: actions/checkout@v4.1.6
        with:
          fetch-depth: 0

      - name: 🐍 恢复Python缓存
        uses: actions/cache@v3.3.2
        with:
          path: |
            ~/.cache/pip
            ~/.npm
            node_modules
          key: ${{ runner.os }}-docs-${{ hashFiles('**/requirements*.lock', '**/package*.json') }}

      - name: 📦 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material
          pip install -r requirements/requirements.lock

      - name: 🏃‍♂️ 运行文档CI流水线
        run: |
          python scripts/docs_ci_pipeline.py \
            --build \
            --quality-check \
            --report-output docs-validation-report.json

      - name: 📊 上传验证报告
        uses: actions/upload-artifact@v3.1.3
        with:
          name: docs-validation-report
          path: |
            docs-validation-report.json
            .build/docs/pipeline_report_*.json
          retention-days: 30

      - name: 🔗 链接检查
        run: |
          echo "🔗 执行文档链接检查..."
          markdown-link-check docs/ \
            --verbose \
            --config .mlc_config.json \
            --timeout 30 || {
            echo "⚠️ 链接检查发现问题，但继续构建"
          }

      - name: 📋 语法检查
        run: |
          echo "📋 执行Markdown语法检查..."
          find docs -name "*.md" -exec echo "检查: {}" \; -exec markdownlint {} \; || {
            echo "⚠️ Markdown语法检查发现问题"
          }

  # ===== 阶段 3: 构建文档 =====
  build:
    name: 🔨 构建文档
    runs-on: ubuntu-latest
    needs: [setup, validate]
    timeout-minutes: 20

    steps:
      - name: 📥 Checkout代码
        uses: actions/checkout@v4.1.6
        with:
          fetch-depth: 0

      - name: 🐍 恢复Python缓存
        uses: actions/cache@v3.3.2
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-docs-${{ hashFiles('**/requirements*.lock') }}

      - name: 📦 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material
          pip install -r requirements/requirements.lock

      - name: 🔨 构建文档站点
        run: |
          echo "🔨 开始构建文档站点..."

          # 清理之前的构建
          rm -rf site/

          # 构建文档
          mkdocs build --verbose --clean

          # 检查构建结果
          if [ ! -f "site/index.html" ]; then
            echo "❌ 构建失败：主页面未生成"
            exit 1
          fi

          # 统计生成的页面
          HTML_FILES=$(find site -name "*.html" | wc -l)
          echo "✅ 构建成功：生成 $HTML_FILES 个HTML页面"

          # 检查站点大小
          SITE_SIZE=$(du -sh site/ | cut -f1)
          echo "📦 站点大小：$SITE_SIZE"

      - name: 📊 生成构建报告
        run: |
          cat > build-report.json << EOF
          {
            "build_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "$(git rev-parse --short HEAD)",
            "branch": "$(git rev-parse --abbrev-ref HEAD)",
            "html_pages": $(find site -name "*.html" | wc -l),
            "css_files": $(find site -name "*.css" | wc -l),
            "js_files": $(find site -name "*.js" | wc -l),
            "site_size": "$(du -sh site/ | cut -f1)",
            "build_status": "success"
          }
          EOF

      - name: 📦 上传构建产物
        uses: actions/upload-artifact@v3.1.3
        with:
          name: docs-site-${{ github.sha }}
          path: |
            site/
            build-report.json
          retention-days: 30

  # ===== 阶段 4: 质量检查 =====
  quality:
    name: 📈 质量检查
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout代码
        uses: actions/checkout@v4.1.6

      - name: 🐍 设置Python环境
        uses: actions/setup-python@v4.7.1
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 下载构建产物
        uses: actions/download-artifact@v3.0.2
        with:
          name: docs-site-${{ github.sha }}
          path: site/

      - name: 📈 执行质量分析
        run: |
          python scripts/docs_ci_pipeline.py \
            --quality-check \
            --report-output docs-quality-report.json

      - name: 🎯 性能分析
        run: |
          echo "🎯 执行性能分析..."

          # 检查页面大小
          LARGE_PAGES=$(find site -name "*.html" -exec wc -c {} + | awk '$1 > 50000' | wc -l)
          if [ "$LARGE_PAGES" -gt 0 ]; then
            echo "⚠️ 发现 $LARGE_PAGES 个大型页面（>50KB）"
          fi

          # 检查图片优化
          IMAGES=$(find site -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" -o -name "*.gif" | wc -l)
          echo "📷 图片数量：$IMAGES"

          # 检查HTML有效性
          npm install -g html-validator
          find site -name "*.html" -exec html-validator {} \; || {
            echo "⚠️ HTML验证发现问题"
          }

      - name: 📊 上传质量报告
        uses: actions/upload-artifact@v3.1.3
        with:
          name: docs-quality-report
          path: |
            docs-quality-report.json
            .build/docs/pipeline_report_*.json
          retention-days: 30

  # ===== 阶段 5: 部署到GitHub Pages =====
  deploy:
    name: 🚀 部署到GitHub Pages
    runs-on: ubuntu-latest
    needs: [validate, build, quality]
    if: |
      github.ref == 'refs/heads/main' ||
      github.ref == 'refs/heads/develop' ||
      github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'true'
    timeout-minutes: 10
    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: 📥 Checkout代码
        uses: actions/checkout@v4.1.6

      - name: 🐍 设置Python环境
        uses: actions/setup-python@v4.7.1
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs mkdocs-material
          pip install -r requirements/requirements.lock

      - name: 📦 下载构建产物
        uses: actions/download-artifact@v3.0.2
        with:
          name: docs-site-${{ github.sha }}
          path: site/

      - name: 🚀 配置GitHub Pages
        uses: actions/configure-pages@v4.0.0

      - name: 🚀 部署到GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4.0.5

      - name: 📊 部署报告
        run: |
          echo "🎉 文档已成功部署到GitHub Pages!"
          echo "🔗 访问地址: ${{ steps.deployment.outputs.page_url }}"

          # 生成部署报告
          cat > deployment-report.json << EOF
          {
            "deployment_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "$(git rev-parse --short HEAD)",
            "branch": "$(git rev-parse --abbrev-ref HEAD)",
            "deployment_url": "${{ steps.deployment.outputs.page_url }}",
            "environment": "${{ github.ref_name }}",
            "status": "success"
          }
          EOF

      - name: 📦 上传部署报告
        uses: actions/upload-artifact@v3.1.3
        with:
          name: docs-deployment-report
          path: deployment-report.json
          retention-days: 90

  # ===== 阶段 6: 通知 =====
  notify:
    name: 📢 通知
    runs-on: ubuntu-latest
    needs: [validate, build, quality, deploy]
    if: always()
    timeout-minutes: 5

    steps:
      - name: 📢 构建状态通知
        run: |
          echo "📊 文档CI/CD流水线执行完成"
          echo "======================================="
          echo "🔍 验证状态: ${{ needs.validate.result }}"
          echo "🔨 构建状态: ${{ needs.build.result }}"
          echo "📈 质量检查: ${{ needs.quality.result }}"
          echo "🚀 部署状态: ${{ needs.deploy.result }}"
          echo "======================================="

          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "🎉 文档已成功部署到GitHub Pages!"
            echo "📖 访问地址: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"
          elif [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ 文档构建成功，但未部署"
          else
            echo "❌ 文档构建失败，请检查日志"
            echo "🔗 查看详细日志：https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          fi

      - name: 📧 发送邮件通知 (可选)
        if: failure() && github.event_name == 'push'
        run: |
          echo "📧 可以在这里添加邮件通知逻辑"
          # 使用GitHub Actions的邮件发送action或自定义邮件服务

# ===== 工作流信息 =====
outputs:
  site_url:
    description: "部署的文档站点URL"
    value: ${{ jobs.deploy.outputs.page_url }}
  build_status:
    description: "构建状态"
    value: ${{ jobs.build.result }}
  deployment_status:
    description: "部署状态"
    value: ${{ jobs.deploy.result }}