name: Security Scan

on:
  push:
    branches: [main, develop, hotfix/**]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * *'

jobs:
  security-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.6
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4.7.1
        with:
          python-version: "3.11"

      - name: Install security toolchain
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety trufflehog

      - name: Run security scanners
        id: run-security
        run: |
          set -euo pipefail
          echo "üîç Running security scan for hardcoded secrets..."
          python scripts/security/check_hardcoded_secrets.py | tee security.log

          echo "üîç Running bandit security linter..."
          bandit -r src/ -f json -o bandit-report.json || true

          echo "üîç Checking for known vulnerabilities in dependencies..."
          safety check --json --output safety-report.json || true

          echo "üîç Running truffleHog for deep secrets scanning..."
          trufflehog filesystem . --json --output=trufflehog-report.json || true

      - name: Build security summary
        id: summary
        run: |
          python - <<'PY'
          import json
          from pathlib import Path

          summary = ["## üîí Security Scan Results", ""]

          log = Path("security.log")
          if log.exists():
              log_text = log.read_text(encoding="utf-8")
              if "Êú™ÂèëÁé∞Á°¨ÁºñÁ†ÅÁöÑÊïèÊÑü‰ø°ÊÅØ" in log_text or "No hardcoded" in log_text:
                  summary.append("‚úÖ No hardcoded secrets found")
              else:
                  summary.append("‚ö†Ô∏è Potential hardcoded secrets detected ‚Äî inspect security.log")
          else:
              summary.append("‚ö†Ô∏è Secret scan log missing")

          bandit_path = Path("bandit-report.json")
          if bandit_path.exists():
              try:
                  data = json.loads(bandit_path.read_text(encoding="utf-8"))
                  issues = len(data.get("results", []))
                  summary.append(f"{'‚ö†Ô∏è' if issues else '‚úÖ'} Bandit issues: {issues}")
              except Exception as exc:
                  summary.append(f"‚ö†Ô∏è Bandit report unreadable: {exc}")
          else:
              summary.append("‚ö†Ô∏è Bandit report missing")

          safety_path = Path("safety-report.json")
          if safety_path.exists():
              try:
                  data = json.loads(safety_path.read_text(encoding="utf-8"))
                  vulnerabilities = len(data.get("vulnerabilities", [])) if isinstance(data, dict) else len(data)
                  summary.append(f"{'‚ö†Ô∏è' if vulnerabilities else '‚úÖ'} Safety vulnerabilities: {vulnerabilities}")
              except Exception as exc:
                  summary.append(f"‚ö†Ô∏è Safety report unreadable: {exc}")
          else:
              summary.append("‚ö†Ô∏è Safety report missing")

          truffle_path = Path("trufflehog-report.json")
          if truffle_path.exists() and truffle_path.stat().st_size > 0:
              findings = 0
              try:
                  with truffle_path.open(encoding="utf-8") as handle:
                      for line in handle:
                          line = line.strip()
                          if line:
                              findings += 1
              except Exception as exc:
                  summary.append(f"‚ö†Ô∏è truffleHog report unreadable: {exc}")
              else:
                  summary.append(f"{'‚ö†Ô∏è' if findings else '‚úÖ'} truffleHog findings: {findings}")
          else:
              summary.append("‚úÖ truffleHog findings: 0")

          Path("security-summary.md").write_text("\n".join(summary) + "\n", encoding="utf-8")
          PY

      - name: Publish workflow summary
        if: always()
        run: |
          if [ -f security-summary.md ]; then
            cat security-summary.md >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Upload security reports
        uses: actions/upload-artifact@v4.3.1
        if: always()
        with:
          name: security-reports
          path: |
            security.log
            security-summary.md
            bandit-report.json
            safety-report.json
            trufflehog-report.json

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7.0.1
        with:
          script: |
            const fs = require('fs');
            const path = 'security-summary.md';
            const body = fs.existsSync(path)
              ? fs.readFileSync(path, 'utf8')
              : 'Security summary is unavailable. Please review workflow artifacts.';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body,
            });
