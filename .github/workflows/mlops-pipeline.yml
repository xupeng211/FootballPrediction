name: MLOps 机器学习流水线

on:
  # 每日早上 8:00 UTC (北京时间 16:00)
  schedule:
    - cron: '0 8 * * *'
  # 手动触发
  workflow_dispatch:
    inputs:
      task:
        description: 'MLOps task to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - feedback-update
          - performance-report
          - retrain-check
          - model-monitor
          - cleanup
      days_back:
        description: 'Days of data to analyze'
        required: false
        default: '30'
        type: string
      force_retrain:
        description: 'Force retrain evaluation'
        required: false
        default: false
        type: boolean

env:
  PYTHONPATH: ${{ github.workspace }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  REDIS_URL: ${{ secrets.REDIS_URL }}
  MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}

# 取消并行的运行，避免资源浪费
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ===== 阶段 1: 更新预测结果和反馈 =====
  feedback-update:
    name: 更新预测结果
    runs-on: ubuntu-latest
    if: inputs.task == 'all' || inputs.task == 'feedback-update'
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.6

      - name: 设置 Python
        uses: actions/setup-python@v4.7.1
        with:
          python-version: "3.11"

      - name: 缓存依赖
        uses: actions/cache@v4.3.2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/**/*.lock', 'requirements/**/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.lock

      - name: 更新预测结果
        run: |
          echo "=== 更新预测结果 ==="
          # 调用反馈更新脚本
          python scripts/update_predictions.py --days-back ${{ inputs.days_back || '30' }}

      - name: 生成反馈报告
        run: |
          echo "=== 生成反馈报告 ==="
          python scripts/generate_feedback_report.py

  # ===== 阶段 2: 性能报告 =====
  performance-report:
    name: 生成性能报告
    runs-on: ubuntu-latest
    needs: feedback-update
    if: inputs.task == 'all' || inputs.task == 'performance-report'
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.6

      - name: 设置 Python
        uses: actions/setup-python@v4.7.1
        with:
          python-version: "3.11"

      - name: 缓存依赖
        uses: actions/cache@v4.3.2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/**/*.lock', 'requirements/**/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.lock

      - name: 生成性能报告
        run: |
          echo "=== 生成性能报告 ==="
          python scripts/generate_performance_report.py --days-back ${{ inputs.days_back || '30' }}

      - name: 上传报告
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: reports/performance/

  # ===== 阶段 3: 模型重训练检查 =====
  retrain-check:
    name: 模型重训练检查
    runs-on: ubuntu-latest
    needs: [feedback-update, performance-report]
    if: inputs.task == 'all' || inputs.task == 'retrain-check'
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.6

      - name: 设置 Python
        uses: actions/setup-python@v4.7.1
        with:
          python-version: "3.11"

      - name: 缓存依赖
        uses: actions/cache@v4.3.2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/**/*.lock', 'requirements/**/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.lock

      - name: 检查是否需要重训练
        run: |
          echo "=== 检查重训练条件 ==="
          FORCE_RETRAIN="${{ inputs.force_retrain }}"
          python scripts/check_retrain_needed.py --force $FORCE_RETRAIN --days-back ${{ inputs.days_back || '30' }}

      - name: 触发重训练（如果需要）
        if: success()
        run: |
          echo "触发重训练流程..."

  # ===== 阶段 4: 模型监控 =====
  model-monitor:
    name: 模型监控
    runs-on: ubuntu-latest
    needs: [feedback-update, performance-report]
    if: inputs.task == 'all' || inputs.task == 'model-monitor'
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.6

      - name: 设置 Python
        uses: actions/setup-python@v4.7.1
        with:
          python-version: "3.11"

      - name: 缓存依赖
        uses: actions/cache@v4.3.2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements/**/*.lock', 'requirements/**/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.lock

      - name: 运行模型监控
        run: |
          echo "=== 运行模型监控 ==="
          python scripts/monitor_models.py

      - name: 检测模型漂移
        run: |
          echo "=== 检测模型漂移 ==="
          python scripts/detect_model_drift.py

      - name: 生成监控报告
        run: |
          echo "=== 生成监控报告 ==="
          python scripts/generate_monitor_report.py

      - name: 上传监控报告
        uses: actions/upload-artifact@v4
        with:
          name: model-monitor-report
          path: reports/monitoring/

  # ===== 阶段 5: 数据清理 =====
  cleanup:
    name: 数据清理
    runs-on: ubuntu-latest
    needs: [feedback-update, performance-report, retrain-check, model-monitor]
    if: inputs.task == 'all' || inputs.task == 'cleanup'
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.6

      - name: 设置 Python
        uses: actions/setup-python@v4.7.1
        with:
          python-version: "3.11"

      - name: 清理过期数据
        run: |
          echo "=== 清理过期数据 ==="
          python scripts/cleanup_old_data.py --days-back ${{ inputs.days_back || '90' }}

      - name: 清理临时文件
        run: |
          echo "=== 清理临时文件 ==="
          find . -type f -name "*.tmp" -delete || true
          find . -type d -name "__pycache__" -exec rm -rf {} + || true

  # ===== 总结 =====
  mlflow-tracking:
    name: MLflow 记录
    runs-on: ubuntu-latest
    needs: [feedback-update, performance-report]
    if: always()
    timeout-minutes: 5

    steps:
      - name: 记录 MLOps 运行
        run: |
          echo "记录 MLOps 流水线运行: $(date)"
