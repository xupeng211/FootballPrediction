name: 遗留测试流水线

on:
  # 手动触发
  workflow_dispatch:
    inputs:
      test_all:
        description: 'Run all legacy tests'
        required: false
        default: true
        type: boolean
  # 每日运行（UTC 02:00 = 10:00 北京时间）
  schedule:
    - cron: '0 2 * * *'
  # PR 触发（可选）
  pull_request:
    paths:
      - 'tests/legacy/**'
      - 'src/**'
  # 主分支推送
  push:
    branches: [main, develop]
    paths:
      - 'tests/legacy/**'

env:
  PYTHONPATH: ${{ github.workspace }}

jobs:
  legacy-tests:
    name: Legacy Integration Tests
    runs-on: ubuntu-latest

    # 使用矩阵测试不同配置
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11']
        test-group: [database, cache, mlflow, kafka, full]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: football_test
          POSTGRES_USER: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --name test-postgres

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --name test-redis

      mlflow:
        image: python:3.11-slim
        ports:
          - 5000:5000
        options: >-
          --name test-mlflow
        env:
          MLFLOW_BACKEND_STORE_URI: sqlite:///mlflow.db
        script: |
          pip install mlflow psycopg2-binary
          mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri sqlite:///mlflow.db

      zookeeper:
        image: confluentinc/cp-zookeeper:latest
        ports:
          - 2181:2181
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
        options: >-
          --name test-zookeeper

      kafka:
        image: confluentinc/cp-kafka:latest
        ports:
          - 9092:9092
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        depends_on:
          - zookeeper
        options: >-
          --name test-kafka

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-legacy-${{ hashFiles('**/requirements*.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          # 额外安装真实服务客户端
          pip install psycopg2-binary redis kafka-python

      - name: Wait for services
        timeout-minutes: 5
        run: |
          echo "Waiting for services to be ready..."

          # PostgreSQL
          timeout 60 bash -c 'until pg_isready -h localhost -p 5432; do sleep 1; done'
          echo "✅ PostgreSQL is ready"

          # Redis
          timeout 60 bash -c 'until redis-cli -h localhost -p 6379 ping; do sleep 1; done'
          echo "✅ Redis is ready"

          # MLflow
          timeout 120 bash -c 'until curl -s http://localhost:5000/health; do sleep 2; done'
          echo "✅ MLflow is ready"

          # Kafka
          timeout 60 bash -c 'until echo "test" | nc localhost 9092; do sleep 2; done'
          echo "✅ Kafka is ready"

      - name: Verify services
        run: |
          # Test PostgreSQL
          python -c "
          import psycopg2
          conn = psycopg2.connect('postgresql://postgres:testpass@localhost:5432/football_test')
          cur = conn.cursor()
          cur.execute('SELECT 1')
          print('✅ PostgreSQL connection successful')
          conn.close()
          "

          # Test Redis
          python -c "
          import redis
          r = redis.from_url('redis://localhost:6379')
          r.ping()
          print('✅ Redis connection successful')
          "

          # Test MLflow
          python -c "
          import requests
          resp = requests.get('http://localhost:5000/api/2.0/mlflow/experiments/list')
          print('✅ MLflow connection successful')
          "

          # Test Kafka
          python -c "
          from kafka import KafkaProducer
          import json
          producer = KafkaProducer(
              bootstrap_servers=['localhost:9092'],
              value_serializer=lambda v: json.dumps(v).encode('utf-8')
          )
          print('✅ Kafka connection successful')
          producer.close()
          "

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/football_test
        run: |
          # 运行数据库迁移
          alembic upgrade head || echo "No migrations found"

      - name: Run legacy tests - ${{ matrix.test-group }}
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/football_test
          REDIS_URL: redis://localhost:6379
          MLFLOW_TRACKING_URI: http://localhost:5000
          KAFKA_BOOTSTRAP_SERVERS: localhost:9092
        run: |
          case "${{ matrix.test-group }}" in
            "database")
              pytest tests/legacy/ -v -k "database or db" --tb=short --maxfail=3
              ;;
            "cache")
              pytest tests/legacy/ -v -k "redis or cache" --tb=short --maxfail=3
              ;;
            "mlflow")
              pytest tests/legacy/ -v -k "mlflow" --tb=short --maxfail=3
              ;;
            "kafka")
              pytest tests/legacy/ -v -k "kafka" --tb=short --maxfail=3
              ;;
            "full"|*)
              # 运行所有 legacy 测试
              pytest tests/legacy/ -v --tb=short --maxfail=5
              ;;
          esac

      - name: Generate test report
        if: always()
        run: |
          python -c "
          import json
          import datetime

          report = {
            'timestamp': datetime.datetime.utcnow().isoformat() + 'Z',
            'workflow': '${{ github.workflow }}',
            'run_id': '${{ github.run_id }}',
            'test_group': '${{ matrix.test-group }}',
            'python_version': '${{ matrix.python-version }}',
            'services': {
              'postgres': 'running',
              'redis': 'running',
              'mlflow': 'running',
              'kafka': 'running'
            }
          }

          with open('legacy-test-report-${{ matrix.test-group }}.json', 'w') as f:
            json.dump(report, f, indent=2)

          print('✅ Test report generated')
          "

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: legacy-test-report-${{ matrix.test-group }}
          path: |
            legacy-test-report-${{ matrix.test-group }}.json
            htmlcov/
          retention-days: 7

      - name: Service logs on failure
        if: failure()
        run: |
          echo "=== PostgreSQL logs ==="
          docker logs test-postgres 2>&1 | tail -50

          echo "=== Redis logs ==="
          docker logs test-redis 2>&1 | tail -50

          echo "=== MLflow logs ==="
          docker logs test-mlflow 2>&1 | tail -50

          echo "=== Kafka logs ==="
          docker logs test-kafka 2>&1 | tail -50

      - name: Cleanup
        if: always()
        run: |
          # 停止并清理容器
          docker stop test-postgres test-redis test-mlflow test-kafka test-zookeeper || true
          docker rm test-postgres test-redis test-mlflow test-kafka test-zookeeper || true