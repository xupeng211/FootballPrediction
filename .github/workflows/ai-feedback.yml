name: 🤖 AI编程助手反馈系统

on:
  issues:
    types: [opened, reopened]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  analyze-issues:
    name: 🤖 分析AI编程相关问题
    if: |
      contains(github.event.issue.labels.*.name, 'ai-programming') ||
      contains(github.event.issue.title, '[AI]') ||
      contains(github.event.pull_request.labels.*.name, 'ai-programming')
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📥 Checkout代码
        uses: actions/checkout@v4

      - name: 🐍 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 安装依赖
        run: |
          pip install requests

      - name: 🤖 分析Issue
        if: github.event_name == 'issues'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_TITLE: ${{ github.event.issue.title }}
          ISSUE_BODY: ${{ github.event.issue.body }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          echo "🤖 开始分析AI编程相关问题..."

          # 运行Issue分析器
          python3 scripts/ai_issue_analyzer.py \
            --title "$ISSUE_TITLE" \
            --body "$ISSUE_BODY" \
            --comment \
            --output analysis_result.md

          # 生成AI友好评论
          COMMENT_BODY=$(cat analysis_result.md)

          # 发布评论
          gh issue comment "$ISSUE_NUMBER" --body "$COMMENT_BODY"

          echo "✅ AI编程分析完成，已添加评论"

      - name: 🤖 分析PR
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
        run: |
          echo "🤖 开始分析AI编程相关PR..."

          # 检查PR变更
          git fetch origin main
          CHANGED_FILES=$(git diff --name-only origin/main HEAD | grep -E '\.(py|yml|yaml)$' || true)

          if [ -n "$CHANGED_FILES" ]; then
            echo "📁 检测到以下文件变更:"
            echo "$CHANGED_FILES"

            # 运行快速质量检查
            python3 scripts/quality_guardian.py --check-only || true

            # 生成AI编程友好评论
            COMMENT_BODY="## 🤖 AI编程助手PR分析

### 📊 变更摘要
- **变更文件数**: $(echo "$CHANGED_FILES" | wc -l)
- **Python文件**: $(echo "$CHANGED_FILES" | grep -c '\.py$' || echo 0)
- **配置文件**: $(echo "$CHANGED_FILES" | grep -c -E '\.(yml|yaml)$' || echo 0)

### 🔧 建议的验证步骤
1. **本地测试**:
   \`\`\`bash
   make test-quick
   make coverage-targeted MODULE=src
   \`\`\`

2. **质量检查**:
   \`\`\`bash
   python3 scripts/quality_guardian.py --check-only
   python3 scripts/smart_quality_fixer.py
   \`\`\`

3. **完整验证**:
   \`\`\`bash
   make prepush
   \`\`\`

### 📚 AI编程工具指南
- [CLAUDE.md](CLAUDE.md) - 完整使用指南
- [质量守护系统](docs/QUALITY_GUARDIAN_SYSTEM_GUIDE.md)
- [测试策略](docs/testing/TEST_IMPROVEMENT_GUIDE.md)

---
*🤖 此分析由AI编程助手反馈系统自动生成*
"

            # 发布评论
            gh pr comment "$PR_NUMBER" --body "$COMMENT_BODY"
          else
            echo "ℹ️ 未检测到Python/配置文件变更"
          fi

          echo "✅ AI编程PR分析完成"

  smart-suggestions:
    name: 💡 AI编程智能建议
    if: github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'auto-fixable')
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout代码
        uses: actions/checkout@v4

      - name: 🐍 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements/requirements.lock
            pyproject.toml

      - name: 📦 安装依赖
        run: |
          pip install --upgrade pip
          pip install -r requirements/requirements.lock

      - name: 🔧 尝试自动修复
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
        run: |
          echo "🔧 尝试AI编程自动修复..."

          # 运行智能修复工具
          python3 scripts/smart_quality_fixer.py || echo "智能修复完成（可能有警告）"

          # 检查修复效果
          python3 scripts/quality_guardian.py --check-only || true

          # 生成修复报告
          cat > fix_report.md << 'EOF'
          ## 🔧 AI编程自动修复报告

          ### ✅ 已尝试的修复操作
          1. 语法错误自动修复
          2. 导入问题修复
          3. 代码格式化
          4. 基础安全问题修复

          ### 📊 修复结果
          请查看工作流日志了解详细的修复结果。

          ### 🎯 下一步建议
          1. 检查修复效果是否符合预期
          2. 运行 `make test-quick` 验证功能
          3. 如有剩余问题，请查看详细日志

          ---
          *🔧 此报告由AI编程自动修复系统生成*
          EOF

          # 发布修复报告
          gh issue comment "$ISSUE_NUMBER" --body "$(cat fix_report.md)"

          echo "✅ AI编程自动修复完成"