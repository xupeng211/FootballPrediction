name: CI 持续集成流水线

on:
  push:
    branches: [ main, develop, hotfix/** ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHONPATH: ${{ github.workspace }}

jobs:
  # 阶段1: 基础检查（快速失败）
  basic-checks:
    name: Basic Checks
    runs-on: ubuntu-latest

    outputs:
      should-run-full: ${{ steps.changes.outputs.should-run }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for relevant changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
          else
            # For push events, check if relevant files changed
            if git diff --name-only HEAD~1 | grep -E "^(src/|tests/|requirements|pyproject|setup\.py|Makefile)"; then
              echo "should-run=true" >> $GITHUB_OUTPUT
            else
              echo "should-run=false" >> $GITHUB_OUTPUT
            fi
          fi

  # 阶段2: 代码质量检查
  quality-check:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: basic-checks
    if: needs.basic-checks.outputs.should-run == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy

      - name: Run linting
        run: |
          ruff check src/ tests/ --output-format=github

      - name: Run type checking
        run: |
          mypy src/ --ignore-missing-imports

  # 阶段3: 测试和覆盖率
  mocked-coverage:
    name: Mocked Coverage
    runs-on: ubuntu-latest
    needs: [basic-checks, quality-check]
    if: needs.basic-checks.outputs.should-run == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
          key: ${{ runner.os }}-mocked-${{ hashFiles('requirements.txt', 'requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-mocked-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run full unit test suite
        run: |
          python scripts/run_full_coverage.py

  test-and-coverage:
    name: Test & Coverage
    runs-on: ubuntu-latest
    needs: [basic-checks, quality-check, mocked-coverage]
    if: needs.basic-checks.outputs.should-run == 'true'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: football_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements*.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Wait for services
        run: |
          until pg_isready -h localhost -p 5432; do sleep 1; done
          until redis-cli -h localhost -p 6379 ping; do sleep 1; done

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://postgres:testpass@localhost:5432/football_test
          REDIS_URL: redis://localhost:6379
        run: |
          pytest --cov=src --cov-report=xml --cov-report=json -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Check coverage threshold
        run: |
          COVERAGE=$(python -c "import json; print(json.load(open('coverage.json'))['totals']['percent_covered'])")
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "Coverage ${COVERAGE}% is below 80% threshold"
            exit 1
          fi
          echo "Coverage ${COVERAGE}% meets threshold"

  # 阶段4: 构建镜像
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [basic-checks, test-and-coverage]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: football-prediction
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-

      - name: Build and test image
        uses: docker/build-push-action@v5
        id: build
        with:
          context: .
          target: production
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test image
        run: |
          docker run --rm ${{ steps.meta.outputs.tags }} python -c "import fastapi; print('Image OK')"

      - name: Login to Docker Hub
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push image
        if: github.event_name == 'push'
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # 阶段5: 安全扫描
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # 阶段6: 通知
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [basic-checks, quality-check, test-and-coverage, build]
    if: always()

    steps:
      - name: Notify success
        if: needs.test-and-coverage.result == 'success' && needs.build.result == 'success'
        run: |
          echo "✅ CI Pipeline completed successfully!"

      - name: Notify failure
        if: needs.test-and-coverage.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "❌ CI Pipeline failed!"
          exit 1
