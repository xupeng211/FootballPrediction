name: CI质量门禁

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # 预检查阶段
  pre-checks:
    name: 预检查
    runs-on: ubuntu-latest
    outputs:
      should-proceed: ${{ steps.decision.outputs.should-proceed }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.6

      - name: Quick syntax check
        id: syntax
        run: |
          echo "快速语法检查..."
          python -m py_compile src/main.py || echo "syntax_error=true" >> $GITHUB_OUTPUT

      - name: Decision
        id: decision
        run: |
          if [ "${{ steps.syntax.outputs.syntax_error }}" == "true" ]; then
            echo "should-proceed=false" >> $GITHUB_OUTPUT
            echo "❌ 预检查失败：语法错误"
            exit 1
          else
            echo "should-proceed=true" >> $GITHUB_OUTPUT
            echo "✅ 预检查通过"
          fi

  # 代码质量检查
  code-quality:
    name: 代码质量
    runs-on: ubuntu-latest
    needs: pre-checks
    if: needs.pre-checks.outputs.should-proceed == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.6

      - name: Setup Python
        uses: actions/setup-python@v4.7.1
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.lock
          pip install ruff mypy bandit safety

      - name: Run Ruff linting
        run: |
          echo "🔍 Running Ruff checks..."
          ruff check src/ --output-format=json > ruff-report.json
          ruff format src/ --check

      - name: Run MyPy type checking
        run: |
          echo "🔍 Running MyPy type checking..."
          mypy src/ --show-error-codes > mypy-report.json || true

      - name: Run Security scan
        run: |
          echo "🔒 Running security scan..."
          bandit -r src/ -f json -o bandit-report.json || true
          safety check --json --output safety-report.json || true

      - name: Code quality summary
        run: |
          echo "## 代码质量摘要" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Ruff results
          if [ -f ruff-report.json ]; then
            echo "### Ruff检查" >> $GITHUB_STEP_SUMMARY
            python -c "
import json
with open('ruff-report.json') as f:
    data = json.load(f)
print(f'- 总问题数: {len(data)}')
for item in data[:5]:
    print(f'- {item[\"location\"][\"file\"]}:{item[\"location\"][\"row\"]} - {item[\"message\"]}')
" >> $GITHUB_STEP_SUMMARY
          fi

          # MyPy results
          if [ -f mypy-report.json ]; then
            echo "### MyPy类型检查" >> $GITHUB_STEP_SUMMARY
            error_count=$(grep -c "error:" mypy-report.json || echo "0")
            echo f'- 类型错误数: {error_count}' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload quality reports
        uses: actions/upload-artifact@v3
        with:
          name: quality-reports
          path: |
            ruff-report.json
            mypy-report.json
            bandit-report.json
            safety-report.json

  # 测试阶段
  testing:
    name: 测试执行
    runs-on: ubuntu-latest
    needs: pre-checks
    if: needs.pre-checks.outputs.should-proceed == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.6

      - name: Setup Python
        uses: actions/setup-python@v4.7.1
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.lock
          pip install pytest pytest-cov pytest-mock

      - name: Run unit tests
        run: |
          echo "🧪 Running unit tests..."
          python -m pytest tests/unit/ -v --tb=short --junit-xml=test-results.xml || true

      - name: Run integration tests
        run: |
          echo "🧪 Running integration tests..."
          python -m pytest tests/integration/ -v --tb=short || true

      - name: Coverage report
        run: |
          echo "📊 Generating coverage report..."
          python -m pytest tests/ --cov=src/ --cov-report=json --cov-report=html --cov-report=xml || true

      - name: Test summary
        run: |
          echo "## 测试执行摘要" >> $GITHUB_STEP_SUMMARY

          if [ -f test-results.xml ]; then
            echo "### 测试结果" >> $GITHUB_STEP_SUMMARY
            python -c "
import xml.etree.ElementTree as ET
tree = ET.parse('test-results.xml')
tests = tree.findall('.//testcase')
passed = len([t for t in tests if t.get('status') != 'failed'])
failed = len([t for t in tests if t.get('status') == 'failed'])
print(f'- 总测试数: {len(tests)}')
print(f'- 通过: {passed}')
print(f'- 失败: {failed}')
print(f'- 成功率: {passed/len(tests)*100:.1f}%')
" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -f coverage.json ]; then
            echo "### 覆盖率" >> $GITHUB_STEP_SUMMARY
            python -c "
import json
with open('coverage.json') as f:
    data = json.load(f)
print(f'- 总覆盖率: {data.get(\"totals\", {}).get(\"percent_covered\", 0):.1f}%')
print(f'- 覆盖文件数: {data.get(\"totals\", {}).get(\"num_files\", 0)}')
" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload test reports
        uses: actions/upload-artifact@v3
        with:
          name: test-reports
          path: |
            test-results.xml
            coverage.json
            htmlcov/

  # 构建阶段
  build:
    name: 构建验证
    runs-on: ubuntu-latest
    needs: [code-quality, testing]
    if: always() && (needs.code-quality.result == 'success' || needs.code-quality.result == 'skipped') && (needs.testing.result == 'success' || needs.testing.result == 'skipped')

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.6

      - name: Setup Python
        uses: actions/setup-python@v4.7.1
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.lock

      - name: Build application
        run: |
          echo "🏗️ Building application..."
          python -c "import src.main; print('✅ Application imports successfully')"

      - name: Package check
        run: |
          echo "📦 Checking packaging..."
          pip check

      - name: Build summary
        run: |
          echo "## 构建摘要" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ 应用构建成功" >> $GITHUB_STEP_SUMMARY
          echo "✅ 依赖检查通过" >> $GITHUB_STEP_SUMMARY

  # 最终状态
  quality-gate:
    name: 质量门禁
    runs-on: ubuntu-latest
    needs: [code-quality, testing, build]
    if: always()

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.6

      - name: Evaluate quality gate
        run: |
          echo "## 质量门禁评估" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # 评估各阶段结果
          code_quality="${{ needs.code-quality.result }}"
          testing="${{ needs.testing.result }}"
          build="${{ needs.build.result }}"

          echo "### 阶段结果" >> $GITHUB_STEP_SUMMARY
          echo "- 代码质量: $code_quality" >> $GITHUB_STEP_SUMMARY
          echo "- 测试执行: $testing" >> $GITHUB_STEP_SUMMARY
          echo "- 构建验证: $build" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # 决定最终结果
          if [[ "$code_quality" == "success" && ("$testing" == "success" || "$testing" == "skipped") && ("$build" == "success" || "$build" == "skipped") ]]; then
            echo "### ✅ 质量门禁通过" >> $GITHUB_STEP_SUMMARY
            echo "🎉 所有检查通过，代码可以合并！" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "### ❌ 质量门禁失败" >> $GITHUB_STEP_SUMMARY
            echo "🚫 请修复失败的问题后重新提交。" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi