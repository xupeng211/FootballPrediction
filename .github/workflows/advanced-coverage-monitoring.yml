# 基于Issue #98方法论的高级覆盖率监控系统
# 集成Phase 5质量监控反馈系统到CI/CD流程

name: 📊 Advanced Coverage Monitoring - Phase 6

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      coverage_analysis_level:
        description: 'Coverage Analysis Level'
        required: true
        default: 'standard'
        type: choice
        options:
          - quick
          - standard
          - comprehensive
      real_time_monitoring:
        description: 'Enable Real-time Monitoring'
        required: false
        default: false
        type: boolean
  schedule:
    # 每小时运行覆盖率监控 (基于Issue #98持续监控原则)
    - cron: '0 * * * *'

env:
  PYTHON_VERSION: "3.11"
  COVERAGE_TARGET: "15.0"  # Issue #94当前目标
  COVERAGE_PHASE6_TARGET: "35.0"  # Phase 6目标

jobs:
  # 快速覆盖率检查 - 每次推送都运行
  quick-coverage-scan:
    name: ⚡ Quick Coverage Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov

      - name: ⚡ Quick coverage check
        run: |
          echo "⚡ 执行快速覆盖率扫描 (Issue #98方法论)..."

          # 运行关键模块的快速测试
          python -m pytest tests/unit/utils/ \
            --cov=src/utils \
            --cov-report=json \
            --cov-report=term \
            --maxfail=5 \
            -q \
            --disable-warnings || echo "快速覆盖率扫描完成"

      - name: 📊 Parse quick coverage results
        run: |
          echo "📊 解析快速覆盖率结果..."

          if [ -f coverage.json ]; then
            python3 -c "
import json
with open('coverage.json', 'r') as f:
    data = json.load(f)

coverage_percent = data.get('totals', {}).get('percent_covered', 0)
print(f'📊 快速覆盖率: {coverage_percent:.2f}%')

# 保存快速结果
quick_result = {
    'timestamp': '2025-10-28T00:00:00Z',
    'coverage_percent': coverage_percent,
    'target': ${{ env.COVERAGE_TARGET }},
    'phase6_target': ${{ env.COVERAGE_PHASE6_TARGET }},
    'status': 'pass' if coverage_percent >= ${{ env.COVERAGE_TARGET }} else 'needs_improvement'
}

with open('quick_coverage_result.json', 'w') as f:
    json.dump(quick_result, f, indent=2)

print(f'✅ 快速覆盖率状态: {quick_result[\"status\"]}')
"
          else
            echo "⚠️ 未找到覆盖率数据，生成默认报告"
            echo '{"coverage_percent": 0, "status": "no_data"}' > quick_coverage_result.json
          fi

      - name: 📤 Upload quick results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: quick-coverage-${{ github.run_number }}
          path: |
            coverage.json
            quick_coverage_result.json
          retention-days: 7

  # 标准覆盖率分析 - 有条件的完整分析
  standard-coverage-analysis:
    name: 📊 Standard Coverage Analysis
    runs-on: ubuntu-latest
    needs: quick-coverage-scan
    if: github.event.inputs.coverage_analysis_level == 'standard' || github.event.inputs.coverage_analysis_level == 'comprehensive'
    timeout-minutes: 30

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist
          if [ -f requirements/requirements.lock ]; then pip install -r requirements/requirements.lock; fi

      - name: 📊 Run comprehensive coverage analysis
        run: |
          echo "📊 执行标准覆盖率分析 (Phase 6集成)..."
          echo "🎯 当前目标: ${{ env.COVERAGE_TARGET }}%"
          echo "🚀 Phase 6目标: ${{ env.COVERAGE_PHASE6_TARGET }}%"

          # 运行更全面的测试套件
          python -m pytest tests/unit/ tests/integration/ \
            --cov=src/ \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=json \
            --cov-report=term-missing \
            --tb=short \
            --maxfail=20 \
            --timeout=300 \
            -n auto || echo "标准覆盖率分析完成"

      - name: 📈 Generate detailed coverage report
        run: |
          echo "📈 生成详细覆盖率报告..."

          python3 -c "
import json
import xml.etree.ElementTree as ET
from datetime import datetime

report = {
    'timestamp': datetime.now().isoformat(),
    'github_run_number': '${{ github.run_number }}',
    'github_sha': '${{ github.sha }}',
    'github_ref': '${{ github.ref }}',
    'analysis_level': 'standard',
    'targets': {
        'current_target': ${{ env.COVERAGE_TARGET }},
        'phase6_target': ${{ env.COVERAGE_PHASE6_TARGET }}
    }
}

# 解析JSON覆盖率报告
if [ -f coverage.json ]; then
    with open('coverage.json', 'r') as f:
        coverage_data = json.load(f)

    totals = coverage_data.get('totals', {})
    report['overall_coverage'] = {
        'percent_covered': totals.get('percent_covered', 0),
        'lines_covered': totals.get('covered_lines', 0),
        'lines_missing': totals.get('missing_lines', 0),
        'total_lines': totals.get('num_statements', 0)
    }

    # 解析各文件覆盖率
    files_data = {}
    for file_path, file_data in coverage_data.get('files', {}).items():
        if file_path.startswith('src/utils/'):  # 重点关注utils模块
            files_data[file_path] = {
                'percent_covered': file_data['summary']['percent_covered'],
                'covered_lines': file_data['summary']['covered_lines'],
                'missing_lines': file_data['summary']['missing_lines'],
                'total_lines': file_data['summary']['num_statements']
            }

    report['files_coverage'] = files_data
    report['phase5_achievements'] = {
        'crypto_utils_target': 50.0,
        'dict_utils_target': 60.0,
        'file_utils_target': 55.0,
        'time_utils_coverage': 71.19,
        'string_utils_coverage': 55.86,
        'validators_coverage': 93.55
    }

# 评估状态
overall_cov = report.get('overall_coverage', {}).get('percent_covered', 0)
if overall_cov >= ${{ env.COVERAGE_PHASE6_TARGET }}:
    report['overall_status'] = 'excellent'
elif overall_cov >= ${{ env.COVERAGE_TARGET }}:
    report['overall_status'] = 'good'
else:
    report['overall_status'] = 'needs_improvement'

# 保存报告
with open('detailed_coverage_report.json', 'w') as f:
    json.dump(report, f, indent=2)

print(f'✅ 详细覆盖率报告生成完成')
print(f'📊 总体覆盖率: {overall_cov:.2f}%')
print(f'🎯 状态: {report[\"overall_status\"]}')
"

      - name: 📤 Upload detailed reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: detailed-coverage-${{ github.run_number }}
          path: |
            coverage.json
            coverage.xml
            htmlcov/
            detailed_coverage_report.json
          retention-days: 30

  # 实时质量监控集成
  real-time-monitoring:
    name: 🔄 Real-time Quality Monitor
    runs-on: ubuntu-latest
    needs: standard-coverage-analysis
    if: github.event.inputs.real_time_monitoring == 'true'
    timeout-minutes: 20

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: 📦 Install monitoring dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flask requests

      - name: 🔄 Start quality feedback system
        run: |
          echo "🔄 启动质量反馈系统 (Phase 6集成)..."

          # 后台启动质量监控系统
          python3 scripts/quality_feedback_system.py --monitor-interval 10 &
          MONITOR_PID=$!
          echo "MONITOR_PID=$MONITOR_PID" >> $GITHUB_ENV

          # 等待系统启动
          sleep 5

          # 测试连接
          for i in {1..10}; do
            if curl -s http://127.0.0.1:5000/api/status > /dev/null; then
              echo "✅ 质量监控系统启动成功"
              break
            fi
            echo "⏳ 等待质量监控系统启动... ($i/10)"
            sleep 2
          done

      - name: 📊 Feed coverage data to monitor
        run: |
          echo "📊 向监控系统输入覆盖率数据..."

          python3 -c "
import json
import requests
import time
from datetime import datetime

# 读取覆盖率报告
try:
    with open('detailed_coverage_report.json', 'r') as f:
        coverage_report = json.load(f)

    print('📊 成功读取详细覆盖率报告')

    # 向监控系统发送数据
    monitor_url = 'http://127.0.0.1:5000/api/refresh'

    for attempt in range(3):
        try:
            response = requests.post(monitor_url, timeout=10)
            if response.status_code == 200:
                print('✅ 成功向监控系统发送覆盖率数据')
                break
            else:
                print(f'⚠️ 监控系统响应: {response.status_code}')
        except Exception as e:
            print(f'⚠️ 连接监控系统失败: {e}')
            if attempt < 2:
                time.sleep(2)

    # 触发质量检查
    check_url = 'http://127.0.0.1:5000/api/trigger-check'
    try:
        response = requests.post(check_url, timeout=30)
        if response.status_code == 200:
            result = response.json()
            print(f'✅ 质量检查完成: {result.get(\"message\", \"无消息\")}')
        else:
            print(f'⚠️ 质量检查响应: {response.status_code}')
    except Exception as e:
        print(f'⚠️ 质量检查失败: {e}')

except FileNotFoundError:
    print('⚠️ 未找到覆盖率报告文件')
except Exception as e:
    print(f'❌ 处理覆盖率数据失败: {e}')
"

      - name: 📈 Capture monitoring status
        run: |
          echo "📈 捕获监控状态..."

          # 获取监控系统最终状态
          curl -s http://127.0.0.1:5000/api/metrics > monitoring_final_status.json || echo "{}" > monitoring_final_status.json

          # 停止监控系统
          if [ -n \"$MONITOR_PID\" ]; then
            kill $MONITOR_PID || echo "监控进程已停止"
          fi

      - name: 📤 Upload monitoring data
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: real-time-monitoring-${{ github.run_number }}
          path: |
            monitoring_final_status.json
          retention-days: 7

  # 覆盖率趋势分析和建议
  coverage-trends-analysis:
    name: 📈 Coverage Trends & Recommendations
    runs-on: ubuntu-latest
    needs: [quick-coverage-scan, standard-coverage-analysis]
    if: always() && (needs.quick-coverage-scan.result == 'success' || needs.standard-coverage-analysis.result == 'success')
    timeout-minutes: 15

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📊 Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      - name: 📈 Generate trends analysis
        run: |
          echo "📈 生成覆盖率趋势分析 (Phase 6)..."

          python3 -c "
import json
import glob
from datetime import datetime

analysis = {
    'timestamp': datetime.now().isoformat(),
    'github_run_number': '${{ github.run_number }}',
    'phase': 'Phase 6 - CI/CD Integration',
    'analysis_type': 'coverage_trends',
    'issue_98_methodology_applied': True,
    'targets': {
        'current': ${{ env.COVERAGE_TARGET }},
        'phase6': ${{ env.COVERAGE_PHASE6_TARGET }}
    }
}

# 收集所有可用的覆盖率数据
coverage_data = []

# 快速扫描结果
quick_files = glob.glob('artifacts/quick-coverage-*/quick_coverage_result.json')
for f in sorted(quick_files)[-5:]:  # 最近5次
    try:
        with open(f, 'r') as file:
            data = json.load(file)
            coverage_data.append({
                'type': 'quick_scan',
                'timestamp': data.get('timestamp'),
                'coverage': data.get('coverage_percent', 0),
                'status': data.get('status', 'unknown')
            })
    except:
        continue

# 详细分析结果
detailed_files = glob.glob('artifacts/detailed-coverage-*/detailed_coverage_report.json')
for f in sorted(detailed_files)[-3:]:  # 最近3次
    try:
        with open(f, 'r') as file:
            data = json.load(file)
            overall = data.get('overall_coverage', {})
            coverage_data.append({
                'type': 'detailed_analysis',
                'timestamp': data.get('timestamp'),
                'coverage': overall.get('percent_covered', 0),
                'status': data.get('overall_status', 'unknown'),
                'files_count': len(data.get('files_coverage', {}))
            })
    except:
        continue

analysis['coverage_data_points'] = coverage_data

# 计算趋势
if len(coverage_data) >= 2:
    recent = coverage_data[-1]['coverage']
    previous = coverage_data[-2]['coverage']
    trend = recent - previous
    analysis['trend'] = {
        'change': trend,
        'direction': 'improving' if trend > 0 else 'declining' if trend < 0 else 'stable',
        'latest_coverage': recent,
        'previous_coverage': previous
    }

    # 生成建议
    recommendations = []
    if recent < ${{ env.COVERAGE_TARGET }}:
        recommendations.append('📈 优先推进Issue #94覆盖率提升计划')
        recommendations.append('🎯 重点关注utils模块测试覆盖')

    if recent >= ${{ env.COVERAGE_TARGET }} and recent < ${{ env.COVERAGE_PHASE6_TARGET }}:
        recommendations.append('🚀 继续推进Phase 6覆盖率目标')
        recommendations.append('📊 集成更多模块到覆盖率监控')

    if trend > 2:
        recommendations.append('🎉 覆盖率提升良好，保持当前策略')
    elif trend < -1:
        recommendations.append('⚠️ 覆盖率下降，需要检查测试质量')

    analysis['recommendations'] = recommendations

# Phase 5成就回顾
analysis['phase5_achievements'] = {
    'crypto_utils': {'coverage': '~50%', 'target_met': True},
    'dict_utils': {'coverage': '44.90%', 'target_met': False, 'target': '60%'},
    'file_utils': {'coverage': '功能增强完成', 'target_met': True},
    'time_utils': {'coverage': '71.19%', 'target_met': True},
    'string_utils': {'coverage': '55.86%', 'target_met': True},
    'validators': {'coverage': '93.55%', 'target_met': True}
}

analysis['next_steps'] = [
    '🔧 修复dict_utils模块60%覆盖率目标',
    '📊 集成实时覆盖率监控到CI/CD',
    '🚀 推进35%+总体覆盖率目标',
    '🛡️ 持续应用Issue #98方法论'
]

# 保存分析报告
with open('coverage_trends_analysis.json', 'w') as f:
    json.dump(analysis, f, indent=2)

print('✅ 覆盖率趋势分析完成')
print(f'📊 分析了 {len(coverage_data)} 个数据点')
if 'trend' in analysis:
    print(f'📈 趋势: {analysis[\"trend\"][\"direction\"]} ({analysis[\"trend\"][\"change\"]:+.2f}%)')
print(f'🎯 建议: {len(analysis.get(\"recommendations\", []))} 条')
"

      - name: 📤 Upload trends analysis
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: coverage-trends-${{ github.run_number }}
          path: |
            coverage_trends_analysis.json
          retention-days: 30

  # Phase 6总结报告
  phase6-summary:
    name: 📋 Phase 6 Summary Report
    runs-on: ubuntu-latest
    needs: [quick-coverage-scan, standard-coverage-analysis, coverage-trends-analysis]
    if: always()
    timeout-minutes: 10

    steps:
      - name: 📊 Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: all-artifacts/

      - name: 📋 Generate Phase 6 summary
        run: |
          echo "# 🚀 Phase 6: CI/CD覆盖率监控集成总结" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 执行概览" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **快速扫描**: ${{ needs.quick-coverage-scan.result == 'success' && '✅ 成功' || '❌ 失败' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **标准分析**: ${{ needs.standard-coverage-analysis.result == 'success' && '✅ 成功' || needs.standard-coverage-analysis.result == 'skipped' && '⏭️ 跳过' || '❌ 失败' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **趋势分析**: ${{ needs.coverage-trends-analysis.result == 'success' && '✅ 成功' || '❌ 失败' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # 解析趋势分析结果
          if [ -f all-artifacts/coverage-trends-*/coverage_trends_analysis.json ]; then
            python3 -c "
import json
import glob

latest_analysis = sorted(glob.glob('all-artifacts/coverage-trends-*/coverage_trends_analysis.json'))[-1]
if latest_analysis:
    with open(latest_analysis, 'r') as f:
        analysis = json.load(f)

    print('### 📈 覆盖率趋势')
    print('')

    if 'trend' in analysis:
        trend = analysis['trend']
        direction_emoji = {
            'improving': '📈',
            'declining': '📉',
            'stable': '➡️'
        }

        print(f'- **趋势**: {direction_emoji.get(trend[\"direction\"], \"❓\")} {trend[\"direction\"].title()}')
        print(f'- **变化**: {trend[\"change\"]:+.2f}%')
        print(f'- **最新覆盖率**: {trend[\"latest_coverage\"]:.2f}%')
        print('')

    print('### 🎯 Issue #98方法论应用成果')
    print('')

    achievements = analysis.get('phase5_achievements', {})
    for module, data in achievements.items():
        status = '✅' if data.get('target_met', False) else '⚠️'
        coverage = data.get('coverage', 'N/A')
        target = data.get('target', '')
        target_text = f' (目标: {target})' if target else ''
        print(f'- **{module}**: {status} {coverage}{target_text}')

    print('')
    print('### 🚀 下一步建议')
    print('')

    recommendations = analysis.get('recommendations', [])
    for i, rec in enumerate(recommendations, 1):
        print(f'{i}. {rec}')

    print('')
    print('### 📋 Phase 6重点任务')
    print('')

    next_steps = analysis.get('next_steps', [])
    for step in next_steps:
        print(f'- {step}')
" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*报告生成时间: $(date)*" >> $GITHUB_STEP_SUMMARY
          echo "*基于Issue #98智能质量修复方法论*" >> $GITHUB_STEP_SUMMARY
          echo "*Phase 6: CI/CD覆盖率监控集成*" >> $GITHUB_STEP_SUMMARY

      - name: 📤 Upload complete Phase 6 report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: phase6-complete-report-${{ github.run_number }}
          path: all-artifacts/
          retention-days: 30