name: Coverage Gate

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  coverage-check:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: football_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        make install

    - name: Wait for database services
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done
        until redis-cli -h localhost -p 6379 ping; do sleep 1; done

    - name: Run database migrations
      run: |
        make db-migrate

    - name: Run tests with coverage gate (80%)
      run: |
        pytest --cov=src --cov-config=coverage_ci.ini --cov-report=xml --cov-report=term-missing --cov-fail-under=80
      env:
        DATABASE_URL: postgresql://postgres:testpass@localhost:5432/football_test
        REDIS_URL: redis://localhost:6379/0

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

    - name: Generate coverage report
      run: |
        coverage html --directory=htmlcov_ci
        coverage json --output=coverage_report.json

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: |
          htmlcov_ci/
          coverage_report.json
          coverage.xml

  critical-path-coverage:
    runs-on: ubuntu-latest
    needs: coverage-check

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: football_test
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        make install

    - name: Wait for database services
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do sleep 1; done
        until redis-cli -h localhost -p 6379 ping; do sleep 1; done

    - name: Run database migrations
      run: |
        make db-migrate

    - name: Test critical path modules (100% coverage required)
      run: |
        # Test prediction core logic
        pytest tests/unit/ai/ --cov=src/models --cov-report=term --cov-fail-under=100
        pytest tests/unit/ai/ --cov=src/models/prediction_service.py --cov-report=term --cov-fail-under=100

        # Test scheduler core logic
        pytest tests/unit/scheduler/ --cov=src/scheduler --cov-report=term --cov-fail-under=95
        pytest tests/unit/scheduler/ --cov=src/tasks --cov-report=term --cov-fail-under=95

        # Test services core logic
        pytest tests/unit/services/ --cov=src/services --cov-report=term --cov-fail-under=90
      env:
        DATABASE_URL: postgresql://postgres:testpass@localhost:5432/football_test
        REDIS_URL: redis://localhost:6379/0