# Automated Testing Pipeline
# 自动化测试流水线
# 生成时间: 2025-10-26 20:57:41

name: Automated Testing Pipeline

on:
  schedule:
    # 每天凌晨2点运行
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    paths:
      - 'src/**'
      - 'tests/**'

jobs:
  # 回归测试
  regression-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${ matrix.python-version }
      uses: actions/setup-python@v4
      with:
        python-version: ${ matrix.python-version }

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/requirements.lock

    - name: Run full test suite
      run: |
        make test

    - name: Generate test report
      run: |
        python scripts/generate_test_report.py

    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      with:
        name: test-reports-${ matrix.python-version }
        path: |
          test-report.html
          coverage.xml

  # 端到端测试
  e2e-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up test environment
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30  # 等待服务启动

    - name: Run E2E tests
      run: |
        make test-e2e

    - name: Cleanup test environment
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v

  # 负载测试
  load-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/requirements.lock
        pip install locust

    - name: Run load tests
      run: |
        locust -f tests/performance/locustfile.py \
          --headless \
          --users 100 \
          --spawn-rate 10 \
          --run-time 60s \
          --host http://localhost:8000 \
          --html load-test-report.html

    - name: Upload load test report
      uses: actions/upload-artifact@v3
      with:
        name: load-test-report
        path: load-test-report.html

  # 安全测试
  security-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run security vulnerability scan
      run: |
        pip install safety bandit
        safety check --json --output safety-report.json || true
        bandit -r src/ -f json -o bandit-report.json || true

    - name: Run dependency check
      run: |
        pip install pip-audit
        pip-audit --format=json --output=audit-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
          audit-report.json

  # 兼容性测试
  compatibility-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11"]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${ matrix.python-version }
      uses: actions/setup-python@v4
      with:
        python-version: ${ matrix.python-version }

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements/requirements.lock

    - name: Run compatibility tests
      run: |
        python -m pytest tests/compatibility/ -v

  # 测试报告汇总
  test-summary:
    runs-on: ubuntu-latest
    needs: [regression-tests, e2e-tests, load-tests, security-tests, compatibility-tests]
    if: always()
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Generate comprehensive test report
      run: |
        python scripts/generate_comprehensive_test_report.py

    - name: Upload comprehensive report
      uses: actions/upload-artifact@v3
      with:
        name: comprehensive-test-report
        path: comprehensive-test-report.html

    - name: Notify test results
      uses: 8398a7/action-slack@v3
      with:
        status: ${ job.status }
        channel: '#testing'
        webhook_url: ${ secrets.SLACK_WEBHOOK }
        text: |
          Automated Testing Pipeline completed!
          Regression Tests: ${ needs.regression-tests.result }
          E2E Tests: ${ needs.e2e-tests.result }
          Load Tests: ${ needs.load-tests.result }
          Security Tests: ${ needs.security-tests.result }
          Compatibility Tests: ${ needs.compatibility-tests.result }
