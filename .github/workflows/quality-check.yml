name: Quality Gate

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  quality-check:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio

    - name: Run quality gate check
      run: |
        python scripts/quality_gate.py --ci-mode

    - name: Generate coverage report
      run: |
        pytest tests/unit/ --cov=src --cov-report=xml --cov-report=html --tb=no -q

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage HTML
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

    - name: Run high-priority tests
      run: |
        pytest tests/unit/api/test_adapters.py tests/unit/utils/test_dict_utils_enhanced.py -v

    - name: Quality summary
      if: always()
      run: |
        echo "## 📊 Quality Gate Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY

        # Extract test results
        if [ -f quality-report.json ]; then
          python -c "
import json
with open('quality-report.json') as f:
    data = json.load(f)

metrics = data.get('metrics', {})
print(f\"| Coverage | {metrics.get('coverage', 0):.1f}% |\")
print(f\"| Test Pass Rate | {metrics.get('test_pass_rate', 0):.1f}% |\")
print(f\"| Code Quality | {metrics.get('code_quality', 0):.1f}/10 |\")
print(f\"| Overall Score | {data.get('score', 0):.1f}/10 |\")
print(f\"| Status | {'✅ PASS' if data.get('passed') else '❌ FAIL'} |\")
" >> $GITHUB_STEP_SUMMARY
        fi