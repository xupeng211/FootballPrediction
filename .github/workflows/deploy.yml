name: Deploy to Production

on:
  workflow_run:
    inputs:
      environment:
        description: 'Deployment environment (staging or production)'
        required: true
        default: 'staging'
      version:
        description: 'Version to deploy'
        required: true
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment (staging or production)'
        required: true
        default: 'staging'
      version:
        description: 'Version to deploy (auto-detect if not provided)'
        required: false

jobs:
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'staging' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    concurrency: ${{ github.event.inputs.environment || 'staging' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Configure AWS credentials
        if: github.event.inputs.environment == 'production'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          make install-locked
          npm install -g serverless

      - name: Run pre-deploy checks
        run: |
          echo "Running pre-deploy checks..."
          make env-check
          make test-quick
          make lint
          make type-check

      - name: Build application
        run: |
          echo "Building application..."
          make build

      - name: Deploy to ${{ github.event.inputs.environment || 'staging' }}
        run: |
          echo "Deploying to ${{ github.event.inputs.environment || 'staging' }}..."
          python scripts/deploy.py \
            --environment ${{ github.event.inputs.environment || 'staging' }} \
            --version ${{ github.event.inputs.version || 'latest' }}

      - name: Health check
        run: |
          echo "Running health check..."
          sleep 30  # 等待服务启动

          if [[ "${{ github.event.inputs.environment || 'staging' }}" == "production" ]]; then
            URL="https://api.footballprediction.com"
          else
            URL="https://staging-api.footballprediction.com"
          fi

          for i in {1..30}; do
            if curl -f "$URL/api/v1/health" > /dev/null; then
              echo "✅ Health check passed"
              break
            fi
            echo "Attempt $i/30: waiting for service..."
            sleep 10
          done

          if [[ $i -eq 30 ]]; then
            echo "❌ Health check failed"
            exit 1
          fi

      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          make smoke-test

          # 测试认证端点
          if [[ "${{ github.event.inputs.environment || 'staging' }}" == "production" ]]; then
            URL="https://api.footballprediction.com"
          else
            URL="https://staging-api.footballprediction.com"
          fi

          # 测试健康检查
          curl -f "$URL/api/v1/health"

          # 测试认证（如果可用）
          # curl -X POST "$URL/api/v1/auth/login" \
          #   -H "Content-Type: application/x-www-form-urlencoded" \
          #   -d "username=test&password=test"

      - name: Notify deployment success
        run: |
          echo "Deployment to ${{ github.event.inputs.environment || 'staging' }} completed successfully!"

          # 发送Slack通知
          if [ "${{ secrets.SLACK_WEBHOOK }}" ]; then
            curl -X POST "${{ secrets.SLACK_WEBHOOK }}" \
              -H 'Content-type: application/json' \
              --data "{
                \"text\": \"✅ FootballPrediction deployed to ${{ github.event.inputs.environment || 'staging' }}\",
                \"attachments\": [{
                  \"color\": \"good\",
                  \"fields\": [{
                    \"title\": \"Version\",
                    \"value\": \"${{ github.event.inputs.version || 'latest' }}\",
                    \"short\": true
                  }, {
                    \"title\": \"Commit\",
                    \"value\": \"$GITHUB_SHA\",
                    \"short\": true
                  }]
                }]
              }"
          fi

  rollback:
    name: Rollback deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: failure() && github.event.inputs.environment == 'production'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Rollback deployment
        run: |
          echo "Rolling back deployment..."
          python scripts/deploy.py \
            --action rollback \
            --environment production

      - name: Notify rollback
        run: |
          echo "Deployment rolled back!"

          # 发送Slack通知
          if [ "${{ secrets.SLACK_WEBHOOK }}" ]; then
            curl -X POST "${{ secrets.SLACK_WEBHOOK }}" \
              -H 'Content-type: application/json' \
              --data "{
                \"text\": \"🚨 FootballPrediction deployment rolled back\",
                \"attachments\": [{
                  \"color\": \"danger\",
                  \"fields\": [{
                    \"title\": \"Environment\",
                    \"value\": \"production\",
                    \"short\": true
                  }]
                }]
              }"
          fi
