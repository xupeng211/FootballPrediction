name: Deploy

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # 确定部署环境
  determine-environment:
    name: Determine Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      deploy-to-production: ${{ steps.env.outputs.deploy-to-production }}

    steps:
      - name: Determine environment
        id: env
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENVIRONMENT="${{ github.event.inputs.environment }}"
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            ENVIRONMENT="staging"
          else
            echo "Not deploying from branch ${{ github.ref }}"
            exit 0
          fi

          DEPLOY_TO_PRODUCTION=false
          if [ "$ENVIRONMENT" = "production" ]; then
            DEPLOY_TO_PRODUCTION=true
          fi

          echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "deploy-to-production=$DEPLOY_TO_PRODUCTION" >> $GITHUB_OUTPUT

  # 准备部署
  prepare:
    name: Prepare Deployment
    runs-on: ubuntu-latest
    needs: [determine-environment]
    if: needs.determine-environment.outputs.environment != ''

    environment:
      name: ${{ needs.determine-environment.outputs.environment }}
      url: ${{ needs.determine-environment.outputs.environment == 'production' && 'https://api.footballprediction.com' || 'https://staging-api.footballprediction.com' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get image tag
        id: meta
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            SHA="${{ github.event.workflow_run.head_sha }}"
          else
            SHA="${{ github.sha }}"
          fi
          echo "tag=${SHA:0:7}" >> $GITHUB_OUTPUT

      - name: Build and push to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: football-prediction
          IMAGE_TAG: ${{ steps.meta.outputs.tag }}
        run: |
          docker buildx build \
            --target production \
            --platform linux/amd64 \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --tag $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --push \
            .

      - name: Generate deployment manifest
        run: |
          cat > deployment.yaml <<EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: football-prediction
            namespace: ${{ needs.determine-environment.outputs.environment }}
          spec:
            replicas: ${{ needs.determine-environment.outputs.environment == 'production' && '3' || '1' }}
            selector:
              matchLabels:
                app: football-prediction
            template:
              metadata:
                labels:
                  app: football-prediction
              spec:
                containers:
                - name: app
                  image: ${{ steps.login-ecr.outputs.registry }}/football-prediction:${{ steps.meta.outputs.tag }}
                  ports:
                  - containerPort: 8000
                  env:
                  - name: ENVIRONMENT
                    value: "${{ needs.determine-environment.outputs.environment }}"
                  - name: DATABASE_URL
                    valueFrom:
                      secretKeyRef:
                        name: football-prediction-secrets
                        key: database-url
                  - name: REDIS_URL
                    valueFrom:
                      secretKeyRef:
                        name: football-prediction-secrets
                        key: redis-url
                  resources:
                    requests:
                      cpu: 100m
                      memory: 256Mi
                    limits:
                      cpu: 500m
                      memory: 512Mi
                  livenessProbe:
                    httpGet:
                      path: /health
                      port: 8000
                    initialDelaySeconds: 30
                    periodSeconds: 10
                  readinessProbe:
                    httpGet:
                      path: /ready
                      port: 8000
                    initialDelaySeconds: 5
                    periodSeconds: 5
          EOF

      - name: Upload deployment manifest
        uses: actions/upload-artifact@v4
        with:
          name: deployment-manifest
          path: deployment.yaml
          retention-days: 1

  # 执行部署
  deploy:
    name: Deploy to ${{ needs.determine-environment.outputs.environment }}
    runs-on: ubuntu-latest
    needs: [determine-environment, prepare]
    if: needs.determine-environment.outputs.environment != ''

    environment:
      name: ${{ needs.determine-environment.outputs.environment }}
      url: ${{ needs.determine-environment.outputs.environment == 'production' && 'https://api.footballprediction.com' || 'https://staging-api.footballprediction.com' }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name football-prediction-${{ needs.determine-environment.outputs.environment }}

      - name: Download deployment manifest
        uses: actions/download-artifact@v4
        with:
          name: deployment-manifest

      - name: Deploy application
        run: |
          kubectl apply -f deployment.yaml
          kubectl rollout status deployment/football-prediction -n ${{ needs.determine-environment.outputs.environment }} --timeout=300s

      - name: Verify deployment
        run: |
          kubectl get pods -n ${{ needs.determine-environment.outputs.environment }}
          kubectl get services -n ${{ needs.determine-environment.outputs.environment }}

  # 生产环境额外检查
  production-checks:
    name: Production Health Checks
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy]
    if: needs.determine-environment.outputs.deploy-to-production == 'true'

    steps:
      - name: Wait for deployment to be ready
        run: sleep 60

      - name: Health check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://api.footballprediction.com/health)
          if [ $response -ne 200 ]; then
            echo "Health check failed with status $response"
            exit 1
          fi

      - name: Run smoke tests
        run: |
          curl -f https://api.footballprediction.com/health || exit 1
          curl -f https://api.footballprediction.com/ready || exit 1
          curl -f https://api.footballprediction.com/metrics || exit 1

      - name: Notify team
        if: success()
        run: |
          echo "✅ Production deployment successful!"

  # 回滚准备（仅生产环境）
  prepare-rollback:
    name: Prepare Rollback
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy]
    if: needs.determine-environment.outputs.deploy-to-production == 'true' && failure()

    steps:
      - name: Create rollback issue
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🚨 Production Deployment Failed - Rollback Needed',
              body: `
              Deployment failed for commit: ${{ github.sha }}

              ### Rollback Commands:
              \`\`\`bash
              # Get previous deployment
              kubectl rollout history deployment/football-prediction -n production

              # Rollback to previous revision
              kubectl rollout undo deployment/football-prediction -n production

              # Check status
              kubectl rollout status deployment/football-prediction -n production
              \`\`\`

              Please investigate and rollback immediately.
              `,
              labels: ['urgent', 'rollback', 'production']
            })