name: Dependency Security Audit

on:
  schedule:
    # 每周一 09:00 UTC 自动运行（北京时间 17:00）
    - cron: "0 9 * * 1"
  workflow_dispatch:  # 允许手动触发
  pull_request:
    paths:
      - "requirements/**"

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  security_audit:
    runs-on: ubuntu-latest
    name: Run pip-audit security check

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史，用于生成更好的报告

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pip-audit-${{ hashFiles('requirements/**') }}
          restore-keys: |
            ${{ runner.os }}-pip-audit-

      - name: Install dependencies
        run: |
          echo "Installing project dependencies..."
          # 优先使用完整依赖文件，回退到基础依赖
          if [ -f requirements/requirements.lock ]; then
            pip install -r requirements/requirements.lock
          elif [ -f requirements/base.lock ]; then
            pip install -r requirements/base.lock
          else
            echo "❌ No lock file found!"
            exit 1
          fi

          # 安装审计工具
          pip install pip-audit[toml]

          # 显示安装的包版本
          echo "✅ Dependencies installed successfully"
          pip list | head -20

      - name: Create reports directory
        run: |
          mkdir -p docs/_reports/security
          mkdir -p docs/_reports/security/archives
          echo "📁 Created reports directory"

      - name: Run pip-audit security scan
        id: audit
        run: |
          timestamp=$(date +"%Y-%m-%d_%H-%M-%S")
          report_file="docs/_reports/security/pip_audit_$timestamp.md"
          archive_file="docs/_reports/security/archives/pip_audit_$timestamp.json"

          echo "🔍 Running security audit..."
          echo "Report file: $report_file"

          # 生成 Markdown 报告
          pip-audit \
            -r requirements/requirements.lock \
            --format markdown \
            --output "$report_file" \
            --strict || true  # 允许失败但继续执行

          # 生成 JSON 归档
          pip-audit \
            -r requirements/requirements.lock \
            --format json \
            --output "$archive_file" \
            --strict || true

          # 添加报告头部信息
          cat > temp_report.md << EOF
          # 🔒 依赖安全审计报告

          > **扫描时间**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          > **扫描工具**: pip-audit
          > **Python版本**: $(python --version)
          > **分支**: ${{ github.ref_name }}
          > **提交**: [${{ github.sha }}](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})

          ---

          EOF

          # 追加原始报告内容
          cat "$report_file" >> temp_report.md
          mv temp_report.md "$report_file"

          # 输出统计信息
          echo "📊 Audit Statistics:"
          if grep -q "No known vulnerabilities found" "$report_file"; then
            echo "✅ No vulnerabilities found"
            echo "vulnerability_count=0" >> $GITHUB_OUTPUT
          else
            vuln_count=$(grep -c "CVE-" "$report_file" 2>/dev/null || echo "0")
            echo "⚠️ Found $vuln_count vulnerabilities"
            echo "vulnerability_count=$vuln_count" >> $GITHUB_OUTPUT

            # 统计严重级别
            critical_count=$(grep -c "CRITICAL" "$report_file" 2>/dev/null || echo "0")
            high_count=$(grep -c "HIGH" "$report_file" 2>/dev/null || echo "0")
            medium_count=$(grep -c "MEDIUM" "$report_file" 2>/dev/null || echo "0")
            low_count=$(grep -c "LOW" "$report_file" 2>/dev/null || echo "0")

            echo "critical_count=$critical_count" >> $GITHUB_OUTPUT
            echo "high_count=$high_count" >> $GITHUB_OUTPUT
            echo "medium_count=$medium_count" >> $GITHUB_OUTPUT
            echo "low_count=$low_count" >> $GITHUB_OUTPUT
          fi

          # 保存报告文件名供后续步骤使用
          echo "report_file=$report_file" >> $GITHUB_OUTPUT
          echo "archive_file=$archive_file" >> $GITHUB_OUTPUT

      - name: Generate summary report
        run: |
          timestamp=$(date +"%Y-%m-%d")
          summary_file="docs/_reports/security/README.md"

          # 创建或更新摘要文件
          cat > "$summary_file" << EOF
          # 🔒 依赖安全审计报告汇总

          > **最后更新**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          > **扫描周期**: 每周一 09:00 UTC (北京时间 17:00)
          > **扫描工具**: [pip-audit](https://github.com/pypa/pip-audit)

          ## 📊 最近扫描结果

          | 日期 | 总漏洞数 | 严重 | 高危 | 中危 | 低危 | 报告链接 |
          |------|----------|------|------|------|------|----------|
          EOF

          # 收集最近10次扫描结果
          for report in $(ls -t docs/_reports/security/pip_audit_*.md 2>/dev/null | head -10); do
            report_date=$(echo "$report" | grep -o '[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}')
            if [ -f "$report" ]; then
              if grep -q "No known vulnerabilities found" "$report"; then
                echo "| $report_date | ✅ 0 | - | - | - | - | [查看报告]($report) |" >> "$summary_file"
              else
                total=$(grep -c "CVE-" "$report" 2>/dev/null || echo "0")
                critical=$(grep -c "CRITICAL" "$report" 2>/dev/null || echo "0")
                high=$(grep -c "HIGH" "$report" 2>/dev/null || echo "0")
                medium=$(grep -c "MEDIUM" "$report" 2>/dev/null || echo "0")
                low=$(grep -c "LOW" "$report" 2>/dev/null || echo "0")
                echo "| $report_date | $total | $critical | $high | $medium | $low | [查看报告]($report) |" >> "$summary_file"
              fi
            fi
          done

          echo "" >> "$summary_file"
          echo "## 📁 历史报告归档" >> "$summary_file"
          echo "" >> "$summary_file"
          echo "所有历史报告保存在 [archives/](./archives/) 目录中，以 JSON 格式存储。" >> "$summary_file"

          # 更新索引
          if [ ! -f docs/_reports/README.md ]; then
            mkdir -p docs/_reports
            cat > docs/_reports/README.md << EOF
          # 📊 项目报告汇总

          本目录包含项目的各类自动化报告：

          - 🔒 [安全审计报告](./security/) - 依赖安全扫描结果
          - 📈 [性能报告](./performance/) - 性能测试结果（待实现）
          - 📋 [代码质量报告](./quality/) - 代码质量分析（待实现）

          ## 🔗 相关链接

          - [依赖维护指南](../maintenance/DEPENDENCY_GUARDIAN_MAINTENANCE_GUIDE.md)
          - [CI/CD 工作流](../../.github/workflows/)
          EOF
          fi

      - name: Upload audit report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dependency-audit-report-${{ github.run_number }}
          path: |
            docs/_reports/security/pip_audit_*.md
            docs/_reports/security/archives/*.json
          retention-days: 90
          if-no-files-found: warn

      - name: Check for critical vulnerabilities
        run: |
          report_file="${{ steps.audit.outputs.report_file }}"
          critical_count="${{ steps.audit.outputs.critical_count }}"
          high_count="${{ steps.audit.outputs.high_count }}"

          if [ "$critical_count" -gt 0 ] || [ "$high_count" -gt 0 ]; then
            echo "🚨 High-severity vulnerabilities detected!"

            # 检查是否已有相同的开放 Issue
            existing_issue=$(gh issue list \
              --label "security,dependencies" \
              --state open \
              --json number \
              --jq '.[0].number' 2>/dev/null || echo "")

            if [ -z "$existing_issue" ]; then
              # 创建新的 Issue
              issue_body="## 🚨 依赖安全漏洞告警

              **扫描时间**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
              **分支**: ${{ github.ref_name }}
              **严重漏洞**: $critical_count 个
              **高危漏洞**: $high_count 个

              ### 📋 处理建议

              1. 立即查看最新的安全审计报告
              2. 评估漏洞对项目的影响
              3. 更新受影响的依赖包
              4. 在测试环境验证修复
              5. 部署到生产环境

              ### 📊 详细报告

              [查看完整报告](${{ github.server_url }}/${{ github.repository }}/blob/${{ github.ref_name }}/$report_file)

              ### 🔧 修复命令

              \`\`\`bash
              # 更新依赖
              vim requirements/base.in
              make lock-deps
              make verify-deps
              make test

              # 提交修复
              git add requirements/
              git commit -m \"fix(security): fix CVE vulnerabilities\"
              \`\`\`

              ---

              > 此 Issue 由 [Dependency Audit Automation](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) 自动创建

              **标签**: security, dependencies, automated"

              gh issue create \
                --title "🚨 依赖安全漏洞告警 (发现 $((critical_count + high_count)) 个高危漏洞)" \
                --body "$issue_body" \
                --label "security,dependencies,automated" \
                --assignee "${{ github.actor }}" || echo "Failed to create issue"
            else
              echo "ℹ️ 相关 Issue 已存在: #$existing_issue"
            fi
          else
            echo "✅ No critical or high vulnerabilities found"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Security Badge
        if: always()
        run: |
          vulnerability_count="${{ steps.audit.outputs.vulnerability_count }}"
          critical_count="${{ steps.audit.outputs.critical_count }}"

          # 更新徽章状态
          if [ "$vulnerability_count" = "0" ]; then
            badge_color="brightgreen"
            badge_status="secure"
            badge_message="0%20vulnerabilities"
          elif [ "$critical_count" -gt 0 ]; then
            badge_color="critical"
            badge_status="critical"
            badge_message="$vulnerability_count%20vulns"
          else
            badge_color="yellow"
            badge_status="warning"
            badge_message="$vulnerability_count%20vulns"
          fi

          # 创建或更新徽章文件
          badge_file="docs/_reports/security/security-badge.svg"

          cat > "$badge_file" << EOF
          <svg xmlns="http://www.w3.org/2000/svg" width="120" height="20" role="img">
            <title>Security: $badge_message</title>
            <linearGradient id="s" x2="0" y2="100%">
              <stop offset="0" stop-color="#bbb" stop-opacity=".1"/>
              <stop offset="1" stop-opacity=".1"/>
            </linearGradient>
            <mask id="m">
              <rect width="120" height="20" rx="3" fill="#fff"/>
            </mask>
            <g mask="url(#m)">
              <rect width="60" height="20" fill="#555"/>
              <rect width="60" height="20" fill="#$badge_color"/>
              <rect width="120" height="20" fill="url(#s)"/>
            </g>
            <g aria-hidden="true" fill="#fff" text-anchor="middle" font-family="Verdana,Geneva,DejaVu Sans,sans-serif" text-rendering="geometricPrecision" font-size="110">
              <text aria-hidden="true" x="30" y="150" fill="#010101" transform="rotate(360 30 115)" textLength="30" lengthAdjust="spacing">security</text>
              <text x="90" y="150" transform="rotate(360 90 115)" textLength="50" lengthAdjust="spacing">$badge_message</text>
            </g>
          </svg>
          EOF

          echo "📈 Security badge updated: $badge_status"

      - name: Commit reports
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # 添加报告文件
          git add docs/_reports/security/

          # 检查是否有变更
          if git diff --staged --quiet; then
            echo "ℹ️ No changes to commit"
          else
            git commit -m "docs(security): update dependency audit report

            - 扫描时间: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
            - 漏洞数量: ${{ steps.audit.outputs.vulnerability_count }}
            - 严重漏洞: ${{ steps.audit.outputs.critical_count }}

            [skip ci]"

            echo "📝 Committed security report"
          fi

          # 推送到仓库
          git push

      - name: Notify team on failure
        if: failure()
        run: |
          echo "❌ Security audit failed!"
          echo "Please check the workflow run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          # 可选：发送通知到 Slack 或其他渠道
          # curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"🚨 Dependency security audit failed! Check: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }} || true