name: Issue Tracker

on:
  # CI Pipeline ÂÆåÊàêÊó∂Ëß¶Âèë
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]
    branches: [ main, develop ]
  # MLOps Ê£ÄÊµãÂà∞ÈóÆÈ¢òÊó∂Ëß¶Âèë
  workflow_run:
    workflows: ["MLOps"]
    types: [completed]
  # ÊâãÂä®ÂàõÂª∫Issue
  workflow_dispatch:
    inputs:
      issue_type:
        description: 'Type of issue to create'
        required: true
        default: 'bug'
        type: choice
        options:
        - bug
        - enhancement
        - task
        - question
      title:
        description: 'Issue title'
        required: true
        type: string
      description:
        description: 'Issue description'
        required: false
        type: string
      assignee:
        description: 'Assignee username (optional)'
        required: false
        type: string

jobs:
  # Ë∑üË∏™CIÂ§±Ë¥•
  track-ci-failures:
    name: Track CI Failures
    runs-on: ubuntu-latest
    if: github.event.workflow_run.name == 'CI Pipeline' && github.event.workflow_run.conclusion == 'failure'

    permissions:
      issues: write
      pull-requests: write
      checks: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get CI run details
        id: ci-details
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Ëé∑ÂèñCIÂ§±Ë¥•ÁöÑËØ¶ÁªÜ‰ø°ÊÅØ
          RUN_ID=${{ github.event.workflow_run.id }}
          REPO=${{ github.repository }}

          # Ëé∑ÂèñÂ§±Ë¥•ÁöÑjob‰ø°ÊÅØ
          gh api repos/$REPO/actions/runs/$RUN_ID/jobs > jobs.json

          # ÂàÜÊûêÂ§±Ë¥•ÂéüÂõ†
          FAILED_JOB=$(jq -r '.jobs[] | select(.conclusion == "failure") | .name' jobs.json | head -1)
          FAILED_STEP=$(jq -r '.jobs[] | select(.conclusion == "failure") | .steps[] | select(.conclusion == "failure") | .name' jobs.json | head -1)

          echo "failed-job=$FAILED_JOB" >> $GITHUB_OUTPUT
          echo "failed-step=$FAILED_STEP" >> $GITHUB_OUTPUT
          echo "run-url=https://github.com/$REPO/actions/runs/$RUN_ID" >> $GITHUB_OUTPUT
          echo "commit-sha=$(jq -r '.head_sha' jobs.json)" >> $GITHUB_OUTPUT

      - name: Check for existing issue
        id: check-issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®Áõ∏ÂêåÈóÆÈ¢òÁöÑIssue
          COMMIT=${{ steps.ci-details.outputs.commit-sha }}
          STEP="${{ steps.ci-details.outputs.failed-step }}"

          # ÊêúÁ¥¢Áõ∏ÂÖ≥ÁöÑÂºÄÊîæIssue
          SEARCH_QUERY="repo:${{ github.repository }} is:open is:issue \"$STEP\""
          EXISTING_ISSUE=$(gh issue list --search "$SEARCH_QUERY" --json number --jq '.[0].number // ""')

          echo "existing-issue=$EXISTING_ISSUE" >> $GITHUB_OUTPUT

      - name: Create or update issue
        if: steps.check-issue.outputs.existing-issue == ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # ÂàõÂª∫Êñ∞ÁöÑIssue
          FAILED_JOB="${{ steps.ci-details.outputs.failed-job }}"
          FAILED_STEP="${{ steps.ci-details.outputs.failed-step }}"
          RUN_URL="${{ steps.ci-details.outputs.run-url }}"
          COMMIT="${{ steps.ci-details.outputs.commit-sha }}"

          ISSUE_TITLE="üêõ CI Failure: $FAILED_STEP"

          ISSUE_BODY=$(cat <<EOF
          ## CI Pipeline Failure

          **Failed Job**: $FAILED_JOB
          **Failed Step**: $FAILED_STEP
          **Commit**: $COMMIT
          **Run**: [View Details]($RUN_URL)

          ### Auto-Generated Details
          This issue was automatically created when the CI pipeline failed.

          ### Next Steps
          1. Investigate the failure in the CI run
          2. Fix the issue in a new branch
          3. The issue will be automatically tracked and updated

          ### Labels
          - type: bug
          - priority: high
          - ci/failed
          - auto-generated

          ---
          *This issue will be automatically closed when the CI pipeline succeeds for the same type of failure.*
          EOF
          )

          # ÂàõÂª∫IssueÂπ∂Ê∑ªÂä†Ê†áÁ≠æ
          ISSUE_URL=$(gh issue create \
            --title "$ISSUE_TITLE" \
            --body "$ISSUE_BODY" \
            --label "bug,high priority,ci/failed,auto-generated" \
            --assignee "${{ github.actor }}" \
            --json url \
            --jq .url)

          echo "Created issue: $ISSUE_URL"
          echo "issue-url=$ISSUE_URL" >> $GITHUB_OUTPUT

      - name: Comment on existing issue
        if: steps.check-issue.outputs.existing-issue != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Âú®Áé∞ÊúâIssue‰∏äÊ∑ªÂä†ËØÑËÆ∫
          ISSUE_NUMBER="${{ steps.check-issue.outputs.existing-issue }}"
          RUN_URL="${{ steps.ci-details.outputs.run-url }}"
          COMMIT="${{ steps.ci-details.outputs.commit-sha }}"

          COMMENT="üîÑ CI failed again for commit $COMMIT. [View Details]($RUN_URL)"

          gh issue comment $ISSUE_NUMBER --body "$COMMENT"

      - name: Track issue resolution
        if: steps.check-issue.outputs.existing-issue != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Êõ¥Êñ∞IssueÁä∂ÊÄÅÔºåÊ†áËÆ∞‰∏∫ÈúÄË¶ÅÂÖ≥Ê≥®
          ISSUE_NUMBER="${{ steps.check-issue.outputs.existing-issue }}"

          # Ê∑ªÂä†"needs-attention"Ê†áÁ≠æ
          gh issue edit $ISSUE_NUMBER --add-label "needs-attention"

  # Ë∑üË∏™MLOpsÈóÆÈ¢ò
  track-mlops-issues:
    name: Track MLOps Issues
    runs-on: ubuntu-latest
    if: github.event.workflow_run.name == 'MLOps' && github.event.workflow_run.conclusion == 'failure'

    permissions:
      issues: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Analyze MLOps failure
        id: mlops-analysis
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RUN_ID=${{ github.event.workflow_run.id }}
          REPO=${{ github.repository }}

          # Ëé∑ÂèñMLOpsËøêË°åÊó•Âøó
          gh api repos/$REPO/actions/runs/$RUN_ID/logs > logs.txt

          # ÂàÜÊûêÂ§±Ë¥•Á±ªÂûã
          if grep -q "Model performance below threshold" logs.txt; then
            echo "failure-type=model-performance" >> $GITHUB_OUTPUT
            echo "issue-title=üìâ Model Performance Degradation" >> $GITHUB_OUTPUT
          elif grep -q "Data quality check failed" logs.txt; then
            echo "failure-type=data-quality" >> $GITHUB_OUTPUT
            echo "issue-title=üîç Data Quality Issues Detected" >> $GITHUB_OUTPUT
          elif grep -q "Retrain check failed" logs.txt; then
            echo "failure-type=retrain-needed" >> $GITHUB_OUTPUT
            echo "issue-title=üîÑ Model Retraining Required" >> $GITHUB_OUTPUT
          else
            echo "failure-type=unknown" >> $GITHUB_OUTPUT
            echo "issue-title=‚ö†Ô∏è MLOps Pipeline Failure" >> $GITHUB_OUTPUT
          fi

          echo "run-url=https://github.com/$REPO/actions/runs/$RUN_ID" >> $GITHUB_OUTPUT

      - name: Create MLOps issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TITLE="${{ steps.mlops-analysis.outputs.issue-title }}"
          FAILURE_TYPE="${{ steps.mlops-analysis.outputs.failure-type }}"
          RUN_URL="${{ steps.mlops-analysis.outputs.run-url }}"

          BODY=$(cat <<EOF
          ## MLOps Pipeline Alert

          **Failure Type**: $FAILURE_TYPE
          **Detection Time**: $(date -u +%Y-%m-%d\ %H:%M:%S\ UTC)
          **Run**: [View Details]($RUN_URL)

          ### Recommended Actions

          EOF
          )

          # Ê†πÊçÆÂ§±Ë¥•Á±ªÂûãÊ∑ªÂä†ÂÖ∑‰ΩìÂª∫ËÆÆ
          case $FAILURE_TYPE in
            "model-performance")
              BODY+="
          1. Check recent prediction accuracy
          2. Analyze feature drift
          3. Consider retraining the model
          4. Review recent data quality
              "
              ;;
            "data-quality")
              BODY+="
          1. Review data ingestion pipeline
          2. Check data source integrity
          3. Validate data schema
              "
              ;;
            "retrain-needed")
              BODY+="
          1. Run manual retrain: \`make retrain-check\`
          2. Validate new model performance
          3. Deploy updated model
              "
              ;;
          esac

          BODY+='

          ### Labels
          - type: mlops
          - priority: medium
          - auto-generated

          ---
          *This issue requires attention from the MLOps team.*
          '

          # ÂàõÂª∫Issue
          gh issue create \
            --title "$TITLE" \
            --body "$BODY" \
            --label "mlops,$FAILURE_TYPE,auto-generated" \
            --assignee "${{ github.actor }}"

  # ÊâãÂä®ÂàõÂª∫Issue
  manual-issue:
    name: Create Manual Issue
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'

    permissions:
      issues: write

    steps:
      - name: Create issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TITLE="${{ github.event.inputs.title }}"
          DESCRIPTION="${{ github.event.inputs.description }}"
          ISSUE_TYPE="${{ github.event.inputs.issue_type }}"
          ASSIGNEE="${{ github.event.inputs.assignee }}"

          # ËÆæÁΩÆÊ†áÁ≠æ
          case $ISSUE_TYPE in
            "bug")
              LABELS="bug,needs-triage"
              ;;
            "enhancement")
              LABELS="enhancement,feature-request"
              ;;
            "task")
              LABELS="task"
              ;;
            "question")
              LABELS="question"
              ;;
          esac

          # ÊûÑÂª∫IssueÂÜÖÂÆπ
          BODY="## Description
          $DESCRIPTION

          ---
          *Created manually via workflow dispatch by @${{ github.actor }}*"

          # ÂàõÂª∫Issue
          if [ -n "$ASSIGNEE" ]; then
            gh issue create \
              --title "$TITLE" \
              --body "$BODY" \
              --label "$LABELS" \
              --assignee "$ASSIGNEE"
          else
            gh issue create \
              --title "$TITLE" \
              --body "$BODY" \
              --label "$LABELS"
          fi

  # Ëá™Âä®ÂÖ≥Èó≠Â∑≤Ëß£ÂÜ≥ÁöÑIssue
  auto-close-resolved:
    name: Auto-close Resolved Issues
    runs-on: ubuntu-latest
    if: github.event.workflow_run.name == 'CI Pipeline' && github.event.workflow_run.conclusion == 'success'

    permissions:
      issues: write

    steps:
      - name: Check for related issues
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Ëé∑ÂèñÊúÄËøëÁöÑÊàêÂäüËøêË°å
          COMMIT="${{ github.event.workflow_run.head_sha }}"

          # Êü•ÊâæÁõ∏ÂÖ≥ÁöÑÂºÄÊîæIssue
          ISSUES=$(gh issue list \
            --repo "${{ github.repository }}" \
            --label "ci/failed" \
            --state open \
            --json number,title \
            --jq '.[]')

          # Ê£ÄÊü•ÊòØÂê¶ÂèØ‰ª•ÂÖ≥Èó≠Issue
          echo "$ISSUES" | while read -r issue; do
            ISSUE_NUMBER=$(echo "$issue" | jq -r '.number')
            ISSUE_TITLE=$(echo "$issue" | jq -r '.title')

            # Â¶ÇÊûúÊúÄËøëÁöÑCIÊàêÂäüÔºåÂÖ≥Èó≠Áõ∏ÂÖ≥ÁöÑÂ§±Ë¥•Issue
            if echo "$ISSUE_TITLE" | grep -q "CI Failure"; then
              echo "Closing issue #$ISSUE_NUMBER: $ISSUE_TITLE"
              gh issue comment $ISSUE_NUMBER \
                --body "‚úÖ This issue has been automatically closed as the CI pipeline is now passing."
              gh issue close $ISSUE_NUMBER
            fi
          done