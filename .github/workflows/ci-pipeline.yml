name: CI Pipeline

on:
  push:
    branches: [ main, develop, hotfix/** ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHONPATH: ${{ github.workspace }}

jobs:
  # 阶段1: 基础检查（快速失败）
  basic-checks:
    name: Basic Checks
    runs-on: ubuntu-latest

    outputs:
      should-run-full: ${{ steps.changes.outputs.should-run }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for relevant changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "should-run=true" >> $GITHUB_OUTPUT
          else
            # For push events, check if relevant files changed
            if git diff --name-only HEAD~1 | grep -E "^(src/|tests/|requirements|pyproject|setup\.py|Makefile)"; then
              echo "should-run=true" >> $GITHUB_OUTPUT
            else
              echo "should-run=false" >> $GITHUB_OUTPUT
            fi
          fi

  # 阶段2: 单元测试（必须通过）
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: basic-checks
    if: needs.basic-checks.outputs.should-run == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run unit tests
        run: |
          chmod +x scripts/run_unit_tests.sh
          ./scripts/run_unit_tests.sh

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-coverage
          path: |
            coverage.json
            htmlcov/
            docs/_reports/unit_test_*.md
          retention-days: 30

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-results
          path: docs/_reports/unit-tests.xml
          retention-days: 30

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('coverage.json')) {
              const coverage = JSON.parse(fs.readFileSync('coverage.json', 'utf8'));
              const percent = coverage.totals.percent_covered;
              const threshold = 80;

              const message = percent >= threshold
                ? `🎉 Unit test coverage: **${percent.toFixed(1)}%** ✅ (≥${threshold}%)`
                : `⚠️ Unit test coverage: **${percent.toFixed(1)}%** ❌ (<${threshold}%)`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            }

  # 阶段3: 集成测试（允许失败）
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [basic-checks, unit-tests]
    if: needs.basic-checks.outputs.should-run == 'true'
    continue-on-error: true  # 允许失败

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run integration tests
        run: |
          chmod +x scripts/run_integration_tests.sh
          ./scripts/run_integration_tests.sh

      - name: Upload integration test reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: |
            docs/_reports/integration_test_*.md
            docs/_reports/integration-tests.xml
          retention-days: 30

  # 阶段4: 端到端测试（只在main分支触发）
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [basic-checks, unit-tests]
    if: |
      needs.basic-checks.outputs.should-run == 'true' &&
      (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    continue-on-error: true  # 允许失败

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run E2E tests
        run: |
          chmod +x scripts/run_e2e_tests.sh
          ./scripts/run_e2e_tests.sh

      - name: Upload E2E test reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-test-results
          path: |
            docs/_reports/e2e_test_*.md
            docs/_reports/e2e-tests.xml
          retention-days: 30

  # 阶段5: 生成测试总结报告
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    if: always() && needs.basic-checks.outputs.should-run == 'true'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate summary
        run: |
          echo "# Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Test Results Overview" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Unit Tests
          if [ -f "unit-test-coverage/coverage.json" ]; then
            COVERAGE=$(python -c "import json; print(json.load(open('unit-test-coverage/coverage.json')).get('totals', {}).get('percent_covered', 0))")
            echo "### ✅ Unit Tests" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: Passed" >> $GITHUB_STEP_SUMMARY
            echo "- **Coverage**: ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Unit Tests" >> $GITHUB_STEP_SUMMARY
            echo "- **Status**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Integration Tests
          echo "### 🔗 Integration Tests" >> $GITHUB_STEP_SUMMARY
          if [ -f "integration-test-results/integration-tests.xml" ]; then
            echo "- **Status**: Completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status**: Skipped or Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # E2E Tests
          echo "### 🎯 E2E Tests" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            if [ -f "e2e-test-results/e2e-tests.xml" ]; then
              echo "- **Status**: Completed" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Status**: Failed" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **Status**: Skipped (non-main branch)" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment on failure
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const message = `⚠️ Some tests failed. Please check the logs for details.\n\n- Unit Tests: ${{ needs.unit-tests.result }}\n- Integration Tests: ${{ needs.integration-tests.result }}\n- E2E Tests: ${{ needs.e2e-tests.result }}`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });