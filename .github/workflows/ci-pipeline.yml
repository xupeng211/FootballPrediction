name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # === 代码质量检查 ===
  lint:
    name: Code Quality (Ruff)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Run Ruff linter
        run: ruff check src/ tests/

      - name: Run Ruff formatter check
        run: ruff format --check src/ tests/

  # === 分层类型检查 ===
  typecheck:
    name: Static Type Check (MyPy)
    runs-on: ubuntu-latest
    needs: lint

    strategy:
      matrix:
        phase: [core, aux]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mypy

      - name: Run MyPy on core modules (strict)
        if: matrix.phase == 'core'
        run: |
          echo "🔍 Running MyPy on core modules (strict mode)..."
          mypy src/core src/services src/api src/domain src/repositories src/database/repositories --strict
        continue-on-error: false

      - name: Run MyPy on auxiliary modules (relaxed)
        if: matrix.phase == 'aux'
        run: |
          echo "🔍 Running MyPy on auxiliary modules (relaxed mode)..."
          mypy src/utils src/monitoring src/tasks src/cache src/collectors src/data src/features src/ml src/scheduler src/security || true
        continue-on-error: true

  # === 单元测试 ===
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: typecheck

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            .venv
          key: ${{ runner.os }}-python-3.11-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-3.11-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.lock || pip install pytest pytest-asyncio pytest-cov

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
          ENVIRONMENT: testing
        run: |
          pytest -m "unit" --cov=src --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unit
          name: unit-coverage

  # === 集成测试 ===
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [typecheck-core]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_USER: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.lock || pip install pytest pytest-asyncio

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
          ENVIRONMENT: testing
        run: |
          pytest -m "integration" -v

  # === 安全扫描 ===
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit security scan
        run: |
          bandit -r src/ -f json -o bandit-report.json || true

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # === 构建Docker镜像 ===
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test-unit, typecheck-core]
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: football-prediction
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # === 通知 ===
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, typecheck, test-unit, test-integration, security-scan]
    if: always()

    steps:
      - name: Notify Slack on Success
        if: ${{ needs.test-unit.result == 'success' && needs.typecheck.result == 'success' }}
        run: |
          echo "✅ CI Pipeline Passed Successfully!"
          # 这里可以添加 Slack 通知逻辑

      - name: Notify Slack on Failure
        if: ${{ needs.test-unit.result == 'failure' || needs.typecheck.result == 'failure' }}
        run: |
          echo "❌ CI Pipeline Failed!"
          # 这里可以添加 Slack 通知逻辑
