import json
from typing import Any, Optional


try:
    import redis
    REDIS_AVAILABLE = True
except ImportError:
    REDIS_AVAILABLE = False


class SimpleRedisCache:
    """简单的Redis缓存客户端"""

    def __init__(self, host: str = 'localhost', port: int = 6379, db: int = 0, password: Optional[str] = None):
        """初始化Redis客户端"""
        if not REDIS_AVAILABLE:
            raise ImportError("redis package is required. Install with: pip install redis")

        self.client = redis.Redis()
            host=host,
            port=port,
            db=db,
            password=password,
            decode_responses=True

        self.default_ttl = 3600  # 1小时

    def set(self, key: str, value: Any, ttl: Optional[int] = None) -> bool:
        """设置缓存"""
        try:
            # 序列化复杂对象
            if not isinstance(value, (str, int, float)):
                value = json.dumps(value, default=str)

            # 设置TTL
            expire_time = ttl or self.default_ttl

            return self.client.setex(key, expire_time, value)
        except Exception as e:
            print(f"Redis set error: {e}")
            return False

    def get(self, key: str, default: Any = None) -> Any:
        """获取缓存"""
        try:
            value = self.client.get(key)
            if value is None:
                return default

            # 尝试反序列化
            try:
                return json.loads(value)
            except (json.JSONDecodeError, TypeError):
                return value
        except Exception as e:
            print(f"Redis get error: {e}")
            return default

    def delete(self, key: str) -> bool:
        """删除缓存"""
        try:
            return bool(self.client.delete(key))
        except Exception as e:
            print(f"Redis delete error: {e}")
            return False

    def clear(self) -> bool:
        """清空当前数据库"""
        try:
            return self.client.flushdb()
        except Exception as e:
            print(f"Redis clear error: {e}")
            return False

    def exists(self, key: str) -> bool:
        """检查键是否存在"""
        try:
            return bool(self.client.exists(key))
        except Exception as e:
            print(f"Redis exists error: {e}")
            return False

    def ttl(self, key: str) -> int:
        """获取键的剩余生存时间"""
        try:
            return self.client.ttl(key)
        except Exception as e:
            print(f"Redis TTL error: {e}")
            return -1

    def keys(self, pattern: str = '*') -> list[str]:
        """获取匹配模式的所有键"""
        try:
            return self.client.keys(pattern)
        except Exception as e:
            print(f"Redis keys error: {e}")
            return []

    def ping(self) -> bool:
        """测试连接"""
        try:
            return self.client.ping()
        except Exception as e:
            print(f"Redis ping error: {e}")
            return False


# 创建默认实例
try:
    cache = SimpleRedisCache()
except ImportError:
    cache = None
