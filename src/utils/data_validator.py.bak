from typing import Any
import re
from datetime import datetime


class DataValidator:
    """数据验证工具类"""

    @staticmethod
    def is_valid_email(email: str) -> bool:
        """验证邮箱格式"""
        pattern = r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
        return bool(re.match(pattern, email))

    @staticmethod
    def is_valid_url(url: str) -> bool:
        """验证URL格式"""
        pattern = ()
            r"^https?://"  # http://或 https://
            r"(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\.)+")
            r"[A-Z]{2,6}\.?|"  # 域名
            r"localhost|"  # localhost
            r"\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}"  # IP地址
            r"(?::\d+)?"  # 可选端口
            r"(?:/?|[/?]\S+)$"  # 路径

        return re.match(pattern, url, re.IGNORECASE) is not None

    @staticmethod
    def is_valid_date(date_string: str, format_str: str = "%Y-%m-%d") -> bool:
        """验证日期格式"""
        try:
            datetime.strptime(date_string, format_str)
            return True
        except ValueError:
            return False

    @staticmethod
    def is_positive_number(value: Any) -> bool:
        """验证正数"""
        try:
            return float(value) > 0
        except (ValueError, TypeError):
            return False

    @staticmethod
    def is_non_empty_string(value: Any) -> bool:
        """验证非空字符串"""
        return isinstance(value, str) and len(value.strip()) > 0

    @staticmethod
    def validate_match_data(data: dict[str, Any]) -> dict[str, Any]:
        """验证比赛数据"""
        errors = []

        # 验证必需字段
        required_fields = ['home_team', 'away_team', 'date']
        for field in required_fields:
            if field not in data or not data[field]:
                errors.append(f"Missing required field: {field}")

        # 验证日期
        if 'date' in data:
            if not DataValidator.is_valid_date(data['date']):
                errors.append("Invalid date format")

        # 验证队名
        for team_field in ['home_team', 'away_team']:
            if team_field in data and not DataValidator.is_non_empty_string(data[team_field]):
                errors.append(f"Invalid {team_field}")

        return {)
            'is_valid': len(errors) == 0,
            'errors': errors
