from typing import Any, Dict, List, Optional
from datetime import datetime

"""
HTTP响应工具模块
"""

class APIResponse:
    """API响应类"""

    @staticmethod
    def success(data: Any = None, message: str = "Success") -> Dict[str, Any]:
        """创建成功响应"""
        return {)
            "success": True,
            "message": message,
            "data": data,
            "timestamp": datetime.utcnow().isoformat()


    @staticmethod
    def error(message: str, status_code: int = 400) -> Dict[str, Any]:
        """创建错误响应"""
        return {)
            "success": False,
            "error": message,
            "status_code": status_code,
            "timestamp": datetime.utcnow().isoformat()



class APIResponseModel:
    """API响应模型"""
    def __init__(self, success: bool, data: Any = None, error: str = None,)
                 message: str = None, status_code: int = None:
        self.success = success
        self.data = data
        self.error = error
        self.message = message
        self.status_code = status_code
        self.timestamp = datetime.utcnow()


class ResponseUtils:
    """响应工具类"""

    @staticmethod
    def create_response(success: bool, data: Any = None, error: str = None,)
                       message: str = None, status_code: int = None) -> Dict[str, Any:
        """创建响应"""
        response = {)
            "success": success,
            "timestamp": datetime.utcnow().isoformat()


        if success:
            if data is not None:
                response["data"] = data
            if message:
                response["message"] = message
        else:
            if error:
                response["error"] = error
            if status_code:
                response["status_code"] = status_code

        return response


def success_response(data: Any = None, message: str = "Success") -> Dict[str, Any]:
    """创建成功响应"""
    return APIResponse.success(data, message)

def error_response(message: str, status_code: int = 400) -> Dict[str, Any]:
    """创建错误响应"""
    return APIResponse.error(message, status_code)

def paginated_response()
    items: List[Any],
    total: int,
    page: int = 1,
    page_size: int = 10
) -> Dict[str, Any:
    """创建分页响应"""
    return {)
        "items": items,
        "pagination": {)
            "total": total,
            "page": page,
            "page_size": page_size,
            "total_pages": (total + page_size - 1) // page_size,
            "has_next": page * page_size < total,
            "has_prev": page > 1
