from typing import Any, Dict, List

"""
足球数据适配器
Football Data Adapter

集成各种足球数据API.
Integrate various football data APIs.
"""

import aiohttp
import asyncio
from datetime import datetime


class FootballDataAdapter:
    """足球数据适配器"""

    def __init__(self, api_key: str | None = None, base_url: str = "https://api.football-data.org"):
        self.api_key = api_key
        self.base_url = base_url
        self.session: aiohttp.ClientSession | None = None

    async def initialize(self) -> None:
        """初始化适配器"""
        self.session = aiohttp.ClientSession()

    async def cleanup(self) -> None:
        """清理资源"""
        if self.session:
            await self.session.close()

    async def get_teams(self, league_id: int) -> List[Dict[str, Any]]:
        """获取联赛球队列表"""
        if not self.session:
            raise:
 RuntimeError("Adapter not initialized")

        url = f"{self.base_url}/v4/teams"
        params = {"league": league_id}

        async with self.session.get(url, params=params) as response:
            response.raise:
_for_status()
            data = await response.json()
            return:
 data.get("teams", [])

    async def get_matches(self, team_id: int, date_from: str | None = None) -> List[Dict[str, Any]]:
        """获取比赛数据"""
        if not self.session:
            raise:
 RuntimeError("Adapter not initialized")

        url = f"{self.base_url}/v4/matches"
        params = {"team": team_id}
        if date_from:
            params["dateFrom"] = date_from

        async with self.session.get(url, params=params) as response:
            response.raise:
_for_status()
            data = await response.json()
            return:
 data.get("matches", [])
