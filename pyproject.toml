[build-system]
requires = ["setuptools>=65.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "football-prediction"
version = "0.1.0"
description = "企业级足球预测系统"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Football Prediction Team", email = "team@example.com"},
]
keywords = ["football", "prediction", "fastapi", "ml", "enterprise"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: FastAPI",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
]

# 核心依赖
dependencies = [
    # Web框架
    "fastapi>=0.115.6",
    "uvicorn[standard]>=0.24.0",

    # 数据库
    "sqlalchemy>=2.0.36",
    "alembic>=1.13.1",
    "asyncpg>=0.29.0",
    "psycopg2-binary>=2.9.9",

    # 缓存
    "redis>=5.2.1",
    "hiredis>=2.3.2",

    # 数据验证和序列化
    "pydantic>=2.10.4",
    "pydantic-settings>=2.6.1",

    # HTTP客户端
    "httpx>=0.27.0",
    "aiohttp>=3.11.10",

    # 认证和安全
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.12",

    # 任务队列
    "celery>=5.4.0",
    "kombu>=5.4.3",

    # 机器学习
    "numpy>=1.26.4",
    "pandas>=2.2.3",
    "scikit-learn>=1.5.2",

    # 数据分析
    "matplotlib>=3.9.3",
    "seaborn>=0.13.2",

    # 配置和日志
    "python-dotenv>=1.0.1",
    "structlog>=24.4.0",
    "rich>=13.9.4",

    # 工具库
    "click>=8.1.7",
    "typer>=0.12.5",
    "pyyaml>=6.0.2",
    "python-dateutil>=2.9.0",
]

# 开发依赖
[project.optional-dependencies]
dev = [
    # 测试
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.6.1",
    "pytest-html>=4.1.1",
    "pytest-benchmark>=5.1.0",
    "factory-boy>=3.3.1",
    "faker>=30.8.1",

    # 代码质量
    "ruff>=0.8.4",
    "mypy>=1.13.0",
    "black>=24.10.0",  # 用于与其他工具集成
    "isort>=5.13.2",
    "bandit>=1.7.10",
    "safety>=3.2.8",

    # 开发工具
    "pre-commit>=4.0.1",
    "ipython>=8.19.0",
    "jupyter>=1.1.1",
    "notebook>=7.3.1",
    "watchdog>=5.0.3",

    # 文档
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.5.42",
    "mkdocstrings[python]>=0.26.2",
]

test = [
    "pytest>=8.3.3",
    "pytest-asyncio>=0.24.0",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "pytest-xdist>=3.6.1",
    "pytest-html>=4.1.1",
    "factory-boy>=3.3.1",
    "faker>=30.8.1",
]

docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.5.42",
    "mkdocstrings[python]>=0.26.2",
    "mkdocs-mermaid2-plugin>=1.1.1",
]

prod = [
    "gunicorn>=23.0.0",
    "prometheus-client>=0.21.0",
    "opentelemetry-api>=1.28.2",
    "opentelemetry-sdk>=1.28.2",
    "opentelemetry-instrumentation-fastapi>=0.49b2",
]

[tool.ruff]
target-version = "py311"  # Python runtime target: 3.11
line-length = 88
extend-exclude = [
    "docs/legacy",
    "examples",
    "notebooks",
    "playground",
    "tests/legacy",
    "tests/_archived_legacy",
    "migrations",
]

[tool.ruff.lint]
# 启用的规则集
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "S",   # flake8-bandit (security)
]

# 忽略的规则
ignore = [
    "E501",  # Line too long (handled by formatter)
    "B008",  # Do not perform function calls in argument defaults
    "S101",  # Use of assert detected
    "S603",  # subprocess call: check for execution of untrusted input
    "S607",  # Starting a process with a shell: possible security exposure
    "S311",  # Standard pseudo-random generators are not suitable for cryptographic purposes
]

# 每文件忽略规则
[tool.ruff.lint.per-file-ignores]
# 测试文件可以有更宽松的规则
"tests/**/*.py" = [
    "F401",  # Unused imports
    "F811",  # Redefinition
    "F821",  # Undefined name
    "E402",  # Module level import not at top of file
    "S",     # Security rules not needed for tests
    "B",     # Bugbear rules not needed for tests
]

# 脚本文件
"scripts/**/*.py" = [
    "S101",  # Allow assert
    "S603",  # Allow subprocess calls
]

# 迁移文件
"**/migrations/versions/*.py" = [
    "E501",  # Allow long lines
    "F401",  # Unused imports
]

[tool.ruff.lint.isort]
known-third-party = ["fastapi", "sqlalchemy", "pydantic", "redis", "celery"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Black配置（用于兼容性）
[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  migrations
  | _generated
  | \.venv
  | __pycache__
)/
'''

# isort配置（用于兼容性）
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
known_third_party = ["fastapi", "sqlalchemy", "pydantic", "redis", "celery"]

# Coverage配置
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/virtualenv/*",
    "*/.venv/*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2
fail_under = 80

[tool.coverage.html]
directory = "htmlcov"

# Pytest配置已迁移到pytest.ini以避免配置冲突
# pytest-asyncio特定配置
[tool.pytest_asyncio]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

# Bandit安全检查配置
[tool.bandit]
exclude_dirs = ["tests", "test_*.py"]
skips = ["B101", "B601"]

# Mypy配置已迁移到mypy.ini
