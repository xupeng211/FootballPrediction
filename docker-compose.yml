services:
  app:
    build:
      context: .
      target: production
    ports:
      - "8000:8000"
    env_file:
      - .env.ci
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DB_HOST=${DB_HOST:-db}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-football_prediction_dev}
      - DB_USER=${DB_USER:-football_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app/src:ro
      - ./logs:/app/logs
    networks:
      - football-network
    restart: unless-stopped

  db:
    image: postgres:15
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-football_prediction_dev}
      - POSTGRES_USER=${POSTGRES_USER:-football_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - football-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    # 移除外部端口映射以提高安全性
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes --appendfsync everysec
    volumes:
      - redis_data:/data
    networks:
      - football-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Kafka和Zookeeper服务 - 用于流式数据处理
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - football-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - football-network
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - football-network
    restart: unless-stopped

  # TODO: 等待实现数据采集模块后再启用
  # data-collector:
  #   build:
  #     context: .
  #     target: production
  #   environment:
  #     - ENVIRONMENT=development
  #     - DB_HOST=db
  #     - DB_PORT=5432
  #     - DB_NAME=football_prediction_dev
  #     - DB_USER=football_user
  #     - DB_PASSWORD=football_pass
  #     - REDIS_URL=redis://redis:6379/1
  #     - API_FOOTBALL_KEY=${API_FOOTBALL_KEY}
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   volumes:
  #     - ./src:/app/src:ro
  #     - ./logs:/app/logs
  #   networks:
  #     - football-network
  #   command: ["python", "-m", "src.footballprediction.data_collection.scheduler"]
  #   restart: unless-stopped

  # TODO: 等待实现ML训练模块后再启用
  # ml-trainer:
  #   build:
  #     context: .
  #     target: production
  #   environment:
  #     - ENVIRONMENT=development
  #     - DB_HOST=db
  #     - DB_PORT=5432
  #     - DB_NAME=football_prediction_dev
  #     - DB_USER=football_user
  #     - DB_PASSWORD=football_pass
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   volumes:
  #     - ./src:/app/src:ro
  #     - ./models:/app/models
  #     - ./logs:/app/logs
  #   networks:
  #     - football-network
  #   command: ["python", "-m", "src.footballprediction.ml.training_scheduler"]
  #   profiles: ["ml"]  # 可选启动
  #   restart: unless-stopped

  # MinIO 对象存储服务 - 支持数据湖存储
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"      # MinIO API端口
      - "9001:9001"      # MinIO管理界面端口
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_DOMAIN=${MINIO_DOMAIN:-minio}
      - MINIO_REGION_NAME=${MINIO_REGION_NAME:-us-east-1}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
      - ./scripts/minio-init.sh:/scripts/init.sh:ro
    networks:
      - football-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 15s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # MinIO初始化服务 - 创建必要的桶
  minio-init:
    image: minio/mc:latest
    depends_on:
      minio:
        condition: service_healthy
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    entrypoint: |
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD;
      /usr/bin/mc mb --ignore-existing myminio/football-lake-bronze;
      /usr/bin/mc mb --ignore-existing myminio/football-lake-silver;
      /usr/bin/mc mb --ignore-existing myminio/football-lake-gold;
      /usr/bin/mc mb --ignore-existing myminio/football-lake-archive;
      /usr/bin/mc mb --ignore-existing myminio/football-models;
      /usr/bin/mc policy set none myminio/football-lake-bronze;
      /usr/bin/mc policy set none myminio/football-lake-silver;
      /usr/bin/mc policy set none myminio/football-lake-gold;
      /usr/bin/mc policy set none myminio/football-lake-archive;
      /usr/bin/mc policy set none myminio/football-models;
      echo 'MinIO桶初始化完成 - 包含MLflow模型存储';
      "
    networks:
      - football-network

  # Prometheus 监控服务
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    networks:
      - football-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Grafana 可视化服务
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=${GF_USERS_ALLOW_SIGN_UP:-false}
      - GF_SERVER_DOMAIN=${GF_SERVER_DOMAIN:-localhost}
      - GF_SMTP_ENABLED=${GF_SMTP_ENABLED:-false}
      - GF_INSTALL_PLUGINS=${GF_INSTALL_PLUGINS:-grafana-clock-panel,grafana-simple-json-datasource}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - football-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # PostgreSQL Exporter - 数据库指标导出
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    environment:
      - DATA_SOURCE_NAME=${DATA_SOURCE_NAME:-postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@db:5432/$POSTGRES_DB?sslmode=disable}
    ports:
      - "9187:9187"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - football-network
    restart: unless-stopped

  # Redis Exporter - Redis指标导出
  redis-exporter:
    image: oliver006/redis_exporter:latest
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "9121:9121"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - football-network
    restart: unless-stopped

  # Node Exporter - 系统指标导出
  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - football-network
    restart: unless-stopped

  # AlertManager - 告警管理
  alertmanager:
    image: prom/alertmanager:latest
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    networks:
      - football-network
    restart: unless-stopped

  # Marquez - 数据血缘管理
  marquez:
    image: marquezproject/marquez:latest
    ports:
      - "5000:5000"
      - "5001:5001"
    environment:
      - MARQUEZ_CONFIG=/usr/src/app/marquez.yml
      - MARQUEZ_DB_HOST=${MARQUEZ_DB_HOST:-marquez-db}
      - MARQUEZ_DB_PORT=${MARQUEZ_DB_PORT:-5432}
      - MARQUEZ_DB_NAME=${MARQUEZ_DB_NAME:-marquez}
      - MARQUEZ_DB_USER=${MARQUEZ_DB_USER:-marquez_user}
      - MARQUEZ_DB_PASSWORD=${MARQUEZ_DB_PASSWORD}
    volumes:
      - ./monitoring/marquez/marquez.yml:/usr/src/app/marquez.yml:ro
    depends_on:
      marquez-db:
        condition: service_healthy
    networks:
      - football-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/v1/namespaces"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Marquez Database
  marquez-db:
    image: postgres:15
    environment:
      - POSTGRES_DB=${MARQUEZ_DB_NAME:-marquez}
      - POSTGRES_USER=${MARQUEZ_DB_USER:-marquez_user}
      - POSTGRES_PASSWORD=${MARQUEZ_DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5433:5432"
    volumes:
      - marquez_db_data:/var/lib/postgresql/data
    networks:
      - football-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U marquez_user -d marquez"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # MLflow Database - 独立的PostgreSQL实例用于MLflow
  mlflow-db:
    image: postgres:15
    environment:
      - POSTGRES_DB=${MLFLOW_DB_NAME:-mlflow}
      - POSTGRES_USER=${MLFLOW_DB_USER:-mlflow_user}
      - POSTGRES_PASSWORD=${MLFLOW_DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5434:5432"
    volumes:
      - mlflow_db_data:/var/lib/postgresql/data
    networks:
      - football-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mlflow_user -d mlflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # MLflow Tracking Server - ML实验跟踪和模型注册
  mlflow:
    image: python:3.11-slim
    ports:
      - "5002:5000"  # MLflow UI端口
    environment:
      - MLFLOW_BACKEND_STORE_URI=${MLFLOW_BACKEND_STORE_URI:-postgresql://$MLFLOW_DB_USER:$MLFLOW_DB_PASSWORD@mlflow-db:5432/$MLFLOW_DB_NAME}
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=${MLFLOW_DEFAULT_ARTIFACT_ROOT:-s3://football-models/mlflow-artifacts}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL:-http://minio:9000}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
    volumes:
      - ./mlflow:/app/mlflow
    working_dir: /app
    depends_on:
      mlflow-db:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - football-network
    command: >
      bash -c "
      pip install mlflow[extras]==2.8.1 psycopg2-binary boto3 &&
      mlflow server
        --backend-store-uri ${MLFLOW_BACKEND_STORE_URI:-postgresql://$MLFLOW_DB_USER:$MLFLOW_DB_PASSWORD@mlflow-db:5432/$MLFLOW_DB_NAME}
        --default-artifact-root ${MLFLOW_DEFAULT_ARTIFACT_ROOT:-s3://football-models/mlflow-artifacts}
        --artifacts-destination ${MLFLOW_DEFAULT_ARTIFACT_ROOT:-s3://football-models/mlflow-artifacts}
        --serve-artifacts
        --host 0.0.0.0
        --port 5000
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  # Celery Worker - 任务执行服务
  celery-worker:
    build:
      context: .
      target: production
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DB_HOST=${DB_HOST:-db}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-football_prediction_dev}
      - DB_USER=${DB_USER:-football_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./src:/app/src:ro
      - ./logs:/app/logs
    networks:
      - football-network
    command: >
      bash -c "
      cd /app &&
      celery -A src.tasks.celery_app worker
        --loglevel=info
        --concurrency=4
        --queues=fixtures,odds,scores,maintenance,streaming,default
        --hostname=worker@%h
        --time-limit=600
        --soft-time-limit=300
      "
    healthcheck:
      test: ["CMD", "celery", "-A", "src.tasks.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Celery Beat - 定时任务调度服务
  celery-beat:
    build:
      context: .
      target: production
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DB_HOST=${DB_HOST:-db}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-football_prediction_dev}
      - DB_USER=${DB_USER:-football_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/0}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/0}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      celery-worker:
        condition: service_healthy
    volumes:
      - ./src:/app/src:ro
      - ./logs:/app/logs
      - celery_beat_data:/app/celerybeat-schedule
    networks:
      - football-network
    command: >
      bash -c "
      cd /app &&
      celery -A src.tasks.celery_app beat
        --loglevel=info
        --schedule=/app/celerybeat-schedule/celerybeat-schedule
        --pidfile=/app/celerybeat-schedule/celerybeat.pid
      "
    restart: unless-stopped

  # Celery Flower - 任务监控界面
  celery-flower:
    build:
      context: .
      target: production
    ports:
      - "5555:5555"  # Flower UI端口
    environment:
      - ENVIRONMENT=development
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/0
    depends_on:
      redis:
        condition: service_healthy
      celery-worker:
        condition: service_healthy
    volumes:
      - ./src:/app/src:ro
    networks:
      - football-network
    command: >
      bash -c "
      cd /app &&
      pip install flower &&
      celery -A src.tasks.celery_app flower
        --port=5555
        --broker=redis://:${REDIS_PASSWORD}@redis:6379/0
        --url_prefix=flower
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  marquez_db_data:
    driver: local
  mlflow_db_data:
    driver: local
  celery_beat_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_data:
    driver: local

networks:
  football-network:
    driver: bridge
